<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Poetry&#39;s Blog</title>
  
  <subtitle>Choose a gesture to allow yourself to live irreplaceable.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://blog.poetries.top/"/>
  <updated>2018-08-31T08:54:59.904Z</updated>
  <id>http://blog.poetries.top/</id>
  
  <author>
    <name>Poetry</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>初识MobX</title>
    <link href="http://blog.poetries.top/2018/08/31/acq-mobx/"/>
    <id>http://blog.poetries.top/2018/08/31/acq-mobx/</id>
    <published>2018-08-31T08:25:24.000Z</published>
    <updated>2018-08-31T08:54:59.904Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、认识MobX"><a href="#一、认识MobX" class="headerlink" title="一、认识MobX"></a>一、认识MobX</h2><blockquote><p>打印<code>mobx</code>，看看<code>mobx</code>中有什么</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-dab61a98feb75db1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="mobx"></p><blockquote><p><code>MobX</code>的整个流程</p></blockquote><p><img src="https://camo.githubusercontent.com/20705ede0bf83c38a187bd911ed417db69701237/687474703a2f2f636e2e6d6f62782e6a732e6f72672f666c6f772e706e67" alt=""></p><p><strong>MobX 和 Redux 的比较</strong></p><ul><li><code>Redux</code> 是单一数据源，而 <code>MobX</code> 往往是多个 <code>store</code>。<code>MobX</code> 可以根据应用的 <code>UI</code>、数据或业务逻辑来组织 <code>store</code>，具体如何进行需要你自己进行权衡</li><li><code>Redux store</code> 使用普通的 <code>JavaScript</code> 对象结构，<code>MobX</code> 将常规 <code>JavaScript</code> 对象包裹，赋予 <code>observable</code> 的能力，通过隐式订阅，自动跟踪 <code>observable</code> 的变化。<code>MobX</code> 是观察引用的，在跟踪函数中（例如：<code>computed value</code>、<code>reactions</code>等等），任何被引用的 <code>observable</code> 的属性都会被记录，一旦引用改变，<code>MobX</code> 将作出反应。注意，不在跟踪函数中的属性将不会被跟踪，在异步中访问的属性也不会被跟踪</li><li><code>Redux</code> 的 <code>state</code> 是只读的，只能通过将之前的 <code>state</code> 与触发的 <code>action</code> 结合，产生新的 <code>state</code>，因此是纯净的（<code>pure</code>）。而 <code>MobX</code> 的 <code>state</code> 即可读又可写，<code>action</code> 是非必须的，可以直接赋值改变，因此是不纯净的（Impure）</li><li><code>Redux</code> 需要你去规范化你的 <code>state</code>，<code>Immutable</code> 数据使 <code>Reducer</code> 在更新时需要将状态树的祖先数据进行复制和更新，新的对象会导致与之 <code>connect</code>的所有 <code>UI</code> 组件都重复渲染。因此<code>Redux state</code> 不建议进行深层嵌套，或者需要我们在组件中用 <code>shouldComponentUpdate</code> 优化。而 <code>MobX</code> 只自动更新你所关心的，不必担心嵌套带来的重渲染问题</li></ul><blockquote><p><code>redux</code> 管理的是 (<code>STORE</code> -&gt; <code>VIEW</code> -&gt; <code>ACTION</code>) 的整个闭环，而 <code>mobx</code> 只关心 <code>STORE</code> -&gt; <code>VIEW</code> 的部分</p></blockquote><p><strong>优点</strong></p><ul><li><strong>基于运行时的数据订阅</strong> <code>mobx</code> 的数据依赖始终保持了最小，而且还是基于运行时。而如果用 <code>redux</code>，可能一不小心就多订阅或者少订阅了数据。所以为了达到高性能，我们需要借助 <code>PureRenderMixin</code> 以及 <code>reselect</code> 对 <code>selector</code> 做缓存</li><li><strong>通过 OOP 的方式组织领域模型 (domain model)</strong>  <code>OOP</code> 的方式在某些场景下会比较方便，尤其是容易抽取 <code>domain model</code> 的时候。进而由于 <code>mobx</code> 支持引用的方式引用数据，所以可以非常容易得形成模型图 (model graph )，这样可以更好地理解我们的应用。</li><li><strong>修改数据方便自然</strong>  <code>mobx</code> 是基于原生的 <code>JavaScript</code> 对象、数组和 <code>Class</code>实现的。所以修改数据不需要额外语法成本，也不需要始终返回一个新的数据，而是直接操作数据</li></ul><p><strong>缺点</strong></p><ul><li><strong>缺最佳实践和社区</strong>  mobx 比较新，遇到的问题可能社区都没有遇到过。并且，mobx 并没有很好的扩展/插件机制</li><li><strong>随意修改 store</strong> 我们都知道 redux 里唯一可以改数据的地方是 reducer，这样可以保证应用的安全稳定；而 mobx 可以随意修改数据，触发更新，给人一种不安全的感觉<ul><li>最新的<code>mobx 2.2</code> 加入了 <code>action</code> 的支持。并且在开启 <code>strict mode</code> 之后，就只有 <code>action</code> 可以对数据进行修改，限制数据的修改入口。可以解决这个问题</li></ul></li><li><strong>逻辑层的限制</strong><ul><li>如果更新逻辑不能很好地封装在 <code>domain class</code> 里，用 <code>redux</code> 会更合适。另外，<code>mobx</code>缺类 <code>redux-saga</code> 的库，业务逻辑的整合不知道放哪合适</li></ul></li></ul><h2 id="二、核心API"><a href="#二、核心API" class="headerlink" title="二、核心API"></a>二、核心API</h2><p><img src="https://upload-images.jianshu.io/upload_images/1480597-25b582583cf82dc6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="2-1-observable"><a href="#2-1-observable" class="headerlink" title="2.1 @observable"></a>2.1 @observable</h3><blockquote><p><code>Observable</code> 值可以是JS基本数据类型、引用类型、普通对象、类实例、数组和映射。其修饰的state会暴露出来供观察者使用</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Observable 值可以是JS基本数据类型、引用类型、普通对象、类实例、数组和映射</span></span><br><span class="line">@observable title = <span class="string">'this is about page'</span></span><br><span class="line">@observable num = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算值(computed values)是可以根据现有的状态或其它计算值衍生出的值</span></span><br><span class="line">@computed get getUserInfo()&#123;</span><br><span class="line">   <span class="keyword">return</span> <span class="string">`我是computed经过计算的getter,currenct num:<span class="subst">$&#123;<span class="keyword">this</span>.num&#125;</span>`</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 注意：当你使用装饰器模式时，@action 中的 this 没有绑定在当前这个实例上，要用过 @action.bound 来绑定 使得 this 绑定在实例对象上</span></span><br><span class="line">@action.bound add()&#123;</span><br><span class="line">    <span class="keyword">this</span>.num ++</span><br><span class="line">&#125;</span><br><span class="line">@action.bound reduce()&#123;</span><br><span class="line">    <span class="keyword">this</span>.num --</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-2-observer"><a href="#2-2-observer" class="headerlink" title="2.2 observer"></a>2.2 observer</h3><blockquote><p>可以用作包裹 <code>React</code> 组件的高阶组件。 在组件的 <code>render</code> 函数中的任何已使用的 <code>observable</code> 发生变化时，组件都会自动重新渲染。 注意 <code>observer</code> 是由 <code>&quot;mobx-react&quot;</code> 包提供的，而不是 <code>mobx</code> 本身</p></blockquote><ul><li><code>@Observer</code> 是一个注解，本质上是用 <code>mobx.autorun</code> 包装了组件的 <code>render</code> 函数以确保任何组件渲染中使用的数据变化时都可以强制刷新组件</li></ul><h3 id="2-3-computed"><a href="#2-3-computed" class="headerlink" title="2.3 @computed"></a>2.3 @computed</h3><ul><li>计算值(<code>computed values</code>)是可以根据现有的状态或其它计算值衍生出的值</li><li>用于获取由基础 <code>state</code>衍生出来的值。如果基础值没有变，获取衍生值时就会走缓存，这样就不会引起虚拟 DOM 的重新渲染</li></ul><blockquote><ul><li><code>getter</code>：获得计算得到的新<code>state</code>并返回。</li><li><code>setter</code>： 不能用来直接改变计算属性的值，但是它们可以用来作“逆向”衍生。</li></ul></blockquote><blockquote><p>通过 <code>@computed + getter</code>函数来定义衍生值</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span> </span>&#123;</span><br><span class="line">    @observable length = <span class="number">2</span>;</span><br><span class="line">    @computed get squared() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.length * <span class="keyword">this</span>.length;</span><br><span class="line">    &#125;</span><br><span class="line">    set squared(value) &#123; <span class="comment">// 这是一个自动的动作，不需要注解</span></span><br><span class="line">        <span class="keyword">this</span>.length = <span class="built_in">Math</span>.sqrt(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-4-actions"><a href="#2-4-actions" class="headerlink" title="2.4 @actions"></a>2.4 @actions</h3><blockquote><ul><li>只有在 <code>actions</code> 中，才可以修改 <code>Mobx</code> 中 <code>state</code> 的值</li><li>注意：当你使用装饰器模式时，<code>@action</code> 中的 <code>this</code> 没有绑定在当前这个实例上，要用过 <a href="mailto:`@action.bound" target="_blank" rel="noopener">`@action.bound</a><code>来绑定 使得</code>this` 绑定在实例对象上</li></ul></blockquote><ul><li>通过引入 <code>mobx</code> 定义的严格模式，强制使用 <code>action</code> 来修改状态</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;configure&#125; <span class="keyword">from</span> <span class="string">'mobx'</span>;</span><br><span class="line"></span><br><span class="line">configure(&#123; <span class="attr">enforceActions</span>: <span class="string">'always'</span> &#125;) <span class="comment">// 开启严格模式</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">@action.bound add()&#123;</span><br><span class="line">    <span class="keyword">this</span>.num ++</span><br><span class="line">&#125;</span><br><span class="line">@action.bound reduce()&#123;</span><br><span class="line">    <span class="keyword">this</span>.num --</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2-5-autorun"><a href="#2-5-autorun" class="headerlink" title="2.5 autorun"></a>2.5 autorun</h3><ul><li>当可观察对象中保存的值发生变化时，可以在<code>mobx.autorun</code>中被观察到。<code>observable</code> 的值初始化或改变时，自动运行</li><li>如果你想响应式的产生一个可以被其它 <code>observer</code> 使用的值，请使用 <code>@computed</code>，如果你不想产生一个新值，而想要达到一个效果，请使用 <code>autorun</code>。 举例来说，效果是像打印日志、发起网络请求等这样命令式的副作用</li></ul><h3 id="2-6-reactions"><a href="#2-6-reactions" class="headerlink" title="2.6 reactions"></a>2.6 reactions</h3><blockquote><p><code>Reactions</code>和计算值很像，但它不是产生一个新的值，而是会产生一些副作用，比如打印到控制台、网络请求、递增地更新 <code>React</code>组件树以修补<code>DOM</code>、等等。 简而言之，<code>reactions</code> 在 响应式编程和命令式编程之间建立沟通的桥梁</p></blockquote><h3 id="2-7-Flow"><a href="#2-7-Flow" class="headerlink" title="2.7 Flow"></a>2.7 Flow</h3><blockquote><p>用法: <code>flow(function* (args) { })</code></p></blockquote><ul><li><code>flow()</code> 接收 <code>generator</code> 函数作为它唯一的输入</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; configure &#125; <span class="keyword">from</span> <span class="string">'mobx'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不允许在动作外部修改状态</span></span><br><span class="line">configure(&#123; <span class="attr">enforceActions</span>: <span class="literal">true</span> &#125;);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Store</span> </span>&#123;</span><br><span class="line">    @observable githubProjects = [];</span><br><span class="line">    @observable state = <span class="string">"pending"</span>; <span class="comment">// "pending" / "done" / "error"</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    fetchProjects = flow(<span class="function"><span class="keyword">function</span>* <span class="title">fetchProjects</span>(<span class="params"></span>) </span>&#123; <span class="comment">// &lt;- 注意*号，这是生成器函数！</span></span><br><span class="line">        <span class="keyword">this</span>.githubProjects = [];</span><br><span class="line">        <span class="keyword">this</span>.state = <span class="string">"pending"</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">const</span> projects = <span class="keyword">yield</span> fetchGithubProjectsSomehow(); <span class="comment">// 用 yield 代替 await</span></span><br><span class="line">            <span class="keyword">const</span> filteredProjects = somePreprocessing(projects);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 异步代码自动会被 `action` 包装</span></span><br><span class="line">            <span class="keyword">this</span>.state = <span class="string">"done"</span>;</span><br><span class="line">            <span class="keyword">this</span>.githubProjects = filteredProjects;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="keyword">this</span>.state = <span class="string">"error"</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、计数器例子"><a href="#三、计数器例子" class="headerlink" title="三、计数器例子"></a>三、计数器例子</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; observer &#125; <span class="keyword">from</span> <span class="string">'mobx-react'</span>;<span class="comment">//结合react</span></span><br><span class="line"><span class="keyword">import</span> &#123; observable, autorun,computed &#125; <span class="keyword">from</span> <span class="string">'mobx'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义数据store</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Counter</span> </span>&#123;</span><br><span class="line">  @observable number = <span class="number">0</span>;</span><br><span class="line">  @computed get msg() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">'number:'</span> + <span class="keyword">this</span>.number</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">// 用action改变数据，避免混乱</span></span><br><span class="line">  @action increment()&#123;</span><br><span class="line">    <span class="keyword">this</span>.number ++</span><br><span class="line">  &#125;</span><br><span class="line">  @action decrement: <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.number --</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> store = <span class="keyword">new</span> Counter()</span><br><span class="line"></span><br><span class="line"><span class="comment">// 把属性注入react组件</span></span><br><span class="line">@observer</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (<span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">        &#123; store.msg &#125; <span class="tag">&lt;<span class="name">br</span> /&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleInc&#125;</span>&gt;</span> + <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">      <span class="tag">&lt;<span class="name">button</span> <span class="attr">onClick</span>=<span class="string">&#123;this.handleDec&#125;</span>&gt;</span> - <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>);</span><br><span class="line">  &#125;</span><br><span class="line">  handleInc() &#123;</span><br><span class="line">    store.increment();</span><br><span class="line">  &#125;</span><br><span class="line">  handleDec() &#123;</span><br><span class="line">    store.decrement();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ReactDOM.render(<span class="xml"><span class="tag">&lt;<span class="name">App</span> /&gt;</span>, document.getElementById('root'));</span></span><br></pre></td></tr></table></figure><h2 id="四、应用案例"><a href="#四、应用案例" class="headerlink" title="四、应用案例"></a>四、应用案例</h2><blockquote><p><a href="https://github.com/poetries/react-mobx-template" target="_blank" rel="noopener">https://github.com/poetries/react-mobx-template</a></p></blockquote><h2 id="五、参考"><a href="#五、参考" class="headerlink" title="五、参考"></a>五、参考</h2><blockquote><p>文档学习 <a href="https://cn.mobx.js.org/" target="_blank" rel="noopener">https://cn.mobx.js.org/</a></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、认识MobX&quot;&gt;&lt;a href=&quot;#一、认识MobX&quot; class=&quot;headerlink&quot; title=&quot;一、认识MobX&quot;&gt;&lt;/a&gt;一、认识MobX&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;打印&lt;code&gt;mobx&lt;/code&gt;，看看&lt;code&gt;mobx&lt;
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
      <category term="MobX" scheme="http://blog.poetries.top/tags/MobX/"/>
    
  </entry>
  
  <entry>
    <title>浅析redux-saga中间件及用法</title>
    <link href="http://blog.poetries.top/2018/08/29/redux-saga-and-redux-thunk/"/>
    <id>http://blog.poetries.top/2018/08/29/redux-saga-and-redux-thunk/</id>
    <published>2018-08-29T11:20:20.000Z</published>
    <updated>2018-08-31T08:54:59.924Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、redux-thunk"><a href="#一、redux-thunk" class="headerlink" title="一、redux-thunk"></a>一、redux-thunk</h2><h3 id="1-1-redux的副作用处理"><a href="#1-1-redux的副作用处理" class="headerlink" title="1.1 redux的副作用处理"></a>1.1 redux的副作用处理</h3><blockquote><p>redux中的数据流大致是</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UI—————&gt;action（plain）—————&gt;reducer——————&gt;state——————&gt;UI</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1480597-318cf8dc905ad6ed.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ul><li><code>redux</code>是遵循函数式编程的规则，上述的数据流中，<code>action</code>是一个原始js对象（<code>plain object</code>）且<code>reducer</code>是一个纯函数，对于同步且没有副作用的操作，上述的数据流起到可以管理数据，从而控制视图层更新的目的</li><li>如果存在副作用函数，那么我们需要首先处理副作用函数，然后生成原始的js对象。如何处理副作用操作，在<code>redux</code>中选择在发出<code>action</code>，到<code>reducer</code>处理函数之间使用中间件处理副作用</li></ul><blockquote><p>redux增加中间件处理副作用后的数据流大致如下：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UI——&gt;action(side function)—&gt;middleware—&gt;action(plain)—&gt;reducer—&gt;state—&gt;UI</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1480597-455dd2791c909234.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>在有副作用的<code>action</code>和原始的<code>action</code>之间增加中间件处理，从图中我们也可以看出，中间件的作用就是：</p></blockquote><ul><li>转换异步操作，<strong>生成原始的action</strong>，这样，<code>reducer</code>函数就能处理相应的<code>action</code>，从而改变<code>state</code>，更新<code>UI</code></li></ul><h3 id="1-2-redux-thunk源码"><a href="#1-2-redux-thunk源码" class="headerlink" title="1.2 redux-thunk源码"></a>1.2 redux-thunk源码</h3><blockquote><p>在redux中，thunk是redux作者给出的中间件，实现极为简单，10多行代码</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createThunkMiddleware</span>(<span class="params">extraArgument</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="function">(<span class="params">&#123; dispatch, getState &#125;</span>) =&gt;</span> next =&gt; <span class="function"><span class="params">action</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> action === <span class="string">'function'</span>) &#123;</span><br><span class="line">      <span class="keyword">return</span> action(dispatch, getState, extraArgument);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> next(action);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> thunk = createThunkMiddleware();</span><br><span class="line">thunk.withExtraArgument = createThunkMiddleware;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> thunk;</span><br></pre></td></tr></table></figure><blockquote><p>这几行代码做的事情也很简单，判别action的类型，如果action是函数，就调用这个函数，调用的步骤为</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">action(dispatch, getState, extraArgument);</span><br></pre></td></tr></table></figure><blockquote><p>发现实参为<code>dispatch</code>和<code>getState</code>，因此我们在定义<code>action</code>为<code>thunk</code>函数是，一般形参为<code>dispatch</code>和<code>getState</code></p></blockquote><h3 id="1-3-redux-thunk的缺点"><a href="#1-3-redux-thunk的缺点" class="headerlink" title="1.3 redux-thunk的缺点"></a>1.3 redux-thunk的缺点</h3><blockquote><p><code>thunk</code>的缺点也是很明显的，<code>thunk</code>仅仅做了执行这个函数，并不在乎函数主体内是什么，也就是说<code>thunk</code>使得<code>redux</code>可以接受函数作为<code>action</code>，但是函数的内部可以多种多样。比如下面是一个获取商品列表的异步操作所对应的<code>action</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> ()=&gt;<span class="function">(<span class="params">dispatch</span>)=&gt;</span>&#123;</span><br><span class="line">    fetch(<span class="string">'/api/goodList'</span>,&#123; <span class="comment">//fecth返回的是一个promise</span></span><br><span class="line">      method: <span class="string">'get'</span>,</span><br><span class="line">      dataType: <span class="string">'json'</span>,</span><br><span class="line">    &#125;).then(<span class="function"><span class="keyword">function</span>(<span class="params">json</span>)</span>&#123;</span><br><span class="line">      <span class="keyword">var</span> json=<span class="built_in">JSON</span>.parse(json);</span><br><span class="line">      <span class="keyword">if</span>(json.msg==<span class="number">200</span>)&#123;</span><br><span class="line">        dispatch(&#123;<span class="attr">type</span>:<span class="string">'init'</span>,<span class="attr">data</span>:json.data&#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,<span class="function"><span class="keyword">function</span>(<span class="params">error</span>)</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(error);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>从这个具有副作用的<code>action</code>中，我们可以看出，函数内部极为复杂。如果需要为每一个异步操作都如此定义一个<code>action</code>，显然<code>action</code>不易维护</p></blockquote><p><strong>action不易维护的原因</strong></p><ul><li><code>action</code>的形式不统一</li><li>就是异步操作太为分散，分散在了各个<code>action</code>中</li></ul><h2 id="二、redux-saga-简介"><a href="#二、redux-saga-简介" class="headerlink" title="二、redux-saga 简介"></a>二、redux-saga 简介</h2><blockquote><p><code>redux-saga</code>是一个 <code>redux</code>中间件，它具有如下特性</p></blockquote><ul><li>集中处理 <code>redux</code> 副作用问题。</li><li>被实现为 <code>generator</code> 。</li><li>类 <code>redux-thunk</code> 中间件。</li><li><code>watch</code>/<code>worker</code>（监听-&gt;执行） 的工作形式</li></ul><p><strong>redux-saga的优点</strong></p><ul><li>集中处理了所有的异步操作，异步接口部分一目了然</li><li><code>action</code>是普通对象，这跟<code>redux</code>同步的<code>action</code>一模一样</li><li>通过<code>Effect</code>，方便异步接口的测试</li><li>通过<code>worker</code> 和<code>watcher</code>可以实现非阻塞异步调用，并且同时可以实现非阻塞调用下的事件监听</li><li>异步操作的流程是可以控制的，可以随时取消相应的异步操作</li></ul><blockquote><p>基本用法</p></blockquote><ul><li>使用<code>createSagaMiddleware</code>方法创建<code>saga</code> 的<code>Middleware</code>，然后在创建的<code>redux</code>的<code>store</code>时，使用<code>applyMiddleware</code>函数将创建的<code>saga Middleware</code>实例绑定到<code>store</code>上，最后可以调用<code>saga Middleware</code>的<code>run</code>函数来执行某个或者某些<code>Middleware</code>。</li><li>在<code>saga</code>的<code>Middleware</code>中，可以使用<code>takeEvery</code>或者<code>takeLatest</code>等<code>API</code>来监听某个<code>action</code>，当某个<code>action</code>触发后，<code>saga</code>可以使用<code>call</code>发起异步操作，操作完成后使用<code>put</code>函数触发<code>action</code>，同步更新<code>state</code>，从而完成整个<code>State</code>的更新。</li></ul><h2 id="三、redux-saga使用案例"><a href="#三、redux-saga使用案例" class="headerlink" title="三、redux-saga使用案例"></a>三、redux-saga使用案例</h2><ul><li><code>redux-saga</code>是控制执行的<code>generator</code>，在<code>redux-saga</code>中<code>action</code>是原始的<code>js</code>对象，把所有的异步副作用操作放在了<code>saga</code>函数里面。这样既统一了<code>action</code>的形式，又使得异步操作集中可以被集中处理</li><li><code>redux-saga</code>是通过<code>genetator</code>实现的，如果不支持<code>generator</code>需要通过插件<code>babel-polyfill</code>转义。我们接着来实现一个输出<code>hellosaga</code>的例子</li></ul><p><strong>创建一个helloSaga.js文件</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> * <span class="title">helloSaga</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">'Hello Sagas!'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>在redux中使用redux-saga中间件</strong></p><blockquote><p>在<code>main.js</code>中</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore, applyMiddleware &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"><span class="keyword">import</span> createSagaMiddleware <span class="keyword">from</span> <span class="string">'redux-saga'</span></span><br><span class="line"><span class="keyword">import</span> &#123; helloSaga &#125; <span class="keyword">from</span> <span class="string">'./sagas'</span></span><br><span class="line"><span class="keyword">const</span> sagaMiddleware=createSagaMiddleware();</span><br><span class="line"><span class="keyword">const</span> store = createStore(</span><br><span class="line"> reducer,</span><br><span class="line"> applyMiddleware(sagaMiddleware)</span><br><span class="line">);</span><br><span class="line">sagaMiddleware.run(helloSaga);</span><br><span class="line"><span class="comment">//会输出Hello, Sagas!</span></span><br></pre></td></tr></table></figure><blockquote><p>和调用<code>redux</code>的其他中间件一样，如果想使用<code>redux-saga</code>中间件，那么只要在<code>applyMiddleware</code>中调用一个<code>createSagaMiddleware</code>的实例。唯一不同的是需要调用<code>run</code>方法使得<code>generator</code>可以开始执行</p></blockquote><h2 id="四、redux-saga使用细节"><a href="#四、redux-saga使用细节" class="headerlink" title="四、redux-saga使用细节"></a>四、redux-saga使用细节</h2><h3 id="4-1-声明式的Effect"><a href="#4-1-声明式的Effect" class="headerlink" title="4.1 声明式的Effect"></a>4.1 声明式的Effect</h3><blockquote><p>在<code>redux-saga</code>中提供了一系列的<code>api</code>，比如<code>take</code>、<code>put</code>、<code>all</code>、<code>select</code>等<code>API</code>，在<code>redux-saga</code>中将这一系列的<code>api</code>都定义为Effect。这些<code>Effect</code>执行后，当函数<code>resolve</code>时返回一个描述对象，然后<code>redux-saga</code>中间件根据这个描述对象恢复执行<code>generator</code>中的函数</p></blockquote><p><strong>redux-thunk的大体过程</strong></p><blockquote><p><code>action1(side function)</code>—&gt;<code>redux-thunk</code>监听—&gt;执行相应的有副作用的方法—&gt;<code>action2(plain object)</code></p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-6610e1f4b0d07aa3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>转化到<code>action2</code>是一个原始<code>js</code>对象形式的<code>action</code>，然后执行<code>reducer</code>函数就会更新<code>store</code>中的<code>state</code></p></blockquote><p><strong>redux-saga的大体过程</strong></p><blockquote><p>action1(plain object)——&gt;redux-saga监听—&gt;执行相应的Effect方法——&gt;返回描述对象—&gt;恢复执行异步和副作用函数—&gt;action2(plain object)</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-0b64449bd093536d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>对比<code>redux-thunk</code>我们发现，<code>redux-saga</code>中监听到了原始<code>js</code>对象<code>action</code>，并不会马上执行副作用操作，会先通过<code>Effect</code>方法将其转化成一个描述对象，然后再将描述对象，作为标识，再恢复执行副作用函数</p></blockquote><h3 id="4-2-Effect提供的具体方法"><a href="#4-2-Effect提供的具体方法" class="headerlink" title="4.2 Effect提供的具体方法"></a>4.2 Effect提供的具体方法</h3><blockquote><p>下面来介绍几个<code>Effect</code>中常用的几个方法，从低阶的API，比如<code>take</code>，<code>call(apply)</code>，<code>fork</code>，<code>put</code>，<code>select</code>等，以及高阶<code>API</code>，比如<code>takeEvery</code>和<code>takeLatest</code>等</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import &#123;take,call,put,select,fork,takeEvery,takeLatest&#125; from &apos;redux-saga/effects&apos;</span><br></pre></td></tr></table></figure><h4 id="4-2-1-take"><a href="#4-2-1-take" class="headerlink" title="4.2.1 take"></a>4.2.1 take</h4><blockquote><p><code>take</code>这个方法，是用来监听<code>action</code>，返回的是监听到的<code>action</code>对象。比如</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const loginAction = &#123;</span><br><span class="line">   type:&apos;login&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在<code>UI Component</code>中<code>dispatch</code>一个<code>action</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dispatch(loginAction)</span><br></pre></td></tr></table></figure><p>在saga中使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const action = yield take(&apos;login&apos;);</span><br></pre></td></tr></table></figure><blockquote><p>可以监听到UI传递到中间件的<code>Action</code>,上述<code>take</code>方法的返回，就是<code>dipath</code>的原始对象。一旦监听到<code>login</code>动作，返回的<code>action</code>为：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  type:&apos;login&apos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-2-2-call-apply"><a href="#4-2-2-call-apply" class="headerlink" title="4.2.2 call(apply)"></a>4.2.2 call(apply)</h4><blockquote><p><code>call</code>和<code>apply</code>方法与<code>js</code>中的<code>call</code>和<code>apply</code>相似，我们以<code>call</code>方法为例</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">call(fn, ...args)</span><br></pre></td></tr></table></figure><blockquote><p><code>call</code>方法调用<code>fn</code>，参数为<code>args</code>，返回一个描述对象。不过这里<code>call</code>方法传入的函数<code>fn</code>可以是普通函数，也可以是<code>generator</code>。<code>call</code>方法应用很广泛，在<code>redux-saga</code>中使用异步请求等常用<code>call</code>方法来实现</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yield call(fetch,&apos;/userInfo&apos;,username)</span><br></pre></td></tr></table></figure><h4 id="4-2-3-put"><a href="#4-2-3-put" class="headerlink" title="4.2.3 put"></a>4.2.3 put</h4><blockquote><p>redux-saga做为中间件，工作流是这样的</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UI——&gt;action1————&gt;redux-saga中间件————&gt;action2————&gt;reducer..</span><br></pre></td></tr></table></figure><blockquote><p>从工作流中，我们发现<code>redux-saga</code>执行完副作用函数后，必须发出<code>action</code>，然后这个<code>action</code>被<code>reducer</code>监听，从而达到更新<code>state</code>的目的。相应的这里的<code>put</code>对应与<code>redux</code>中的<code>dispatch</code>，工作流程图如下</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-9f946c314d488481.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>可以看出<code>redux-saga</code>执行副作用方法转化<code>action</code>时，<code>put</code>这个<code>Effect</code>方法跟<code>redux</code>原始的<code>dispatch</code>相似，都是可以发出<code>action</code>，且发出的<code>action</code>都会被<code>reducer</code>监听到。<code>put</code>的使用方法</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yield put(&#123;type:&apos;login&apos;&#125;)</span><br></pre></td></tr></table></figure><h4 id="4-2-4-select"><a href="#4-2-4-select" class="headerlink" title="4.2.4 select"></a>4.2.4 select</h4><blockquote><p><code>put</code>方法与<code>redux</code>中的<code>dispatch</code>相对应，同样的如果我们想在中间件中获取<code>state</code>，那么需要使用<code>select</code>。<code>select</code>方法对应的是<code>redux</code>中的<code>getState</code>，用户获取<code>store</code>中的<code>state</code>，使用方法：</p></blockquote> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const id = yield select(state =&gt; state.id);</span><br></pre></td></tr></table></figure><h4 id="4-2-5-fork"><a href="#4-2-5-fork" class="headerlink" title="4.2.5 fork"></a>4.2.5 fork</h4><blockquote><p><code>fork</code>方法相当于<code>web work</code>，<code>fork</code>方法不会阻塞主线程，在非阻塞调用中十分有用</p></blockquote><h4 id="4-2-6-takeEvery和takeLatest"><a href="#4-2-6-takeEvery和takeLatest" class="headerlink" title="4.2.6 takeEvery和takeLatest"></a>4.2.6 takeEvery和takeLatest</h4><blockquote><p><code>takeEvery</code>和<code>takeLatest</code>用于监听相应的动作并执行相应的方法，是构建在<code>take</code>和<code>fork</code>上面的高阶<code>api</code>，比如要监听<code>login</code>动作，好用<code>takeEvery</code>方法可以</p></blockquote> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">takeEvery(&apos;login&apos;,loginFunc)</span><br></pre></td></tr></table></figure><ul><li><code>takeEvery</code>监听到<code>login</code>的动作，就会执行<code>loginFunc</code>方法，除此之外，<code>takeEvery</code>可以同时监听到多个相同的<code>action</code>。</li><li><code>takeLatest</code>方法跟<code>takeEvery</code>是相同方式调用</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">takeLatest(&apos;login&apos;,loginFunc)</span><br></pre></td></tr></table></figure><blockquote><p>与<code>takeLatest</code>不同的是，<code>takeLatest</code>是会监听执行最近的那个被触发的<code>action</code></p></blockquote><h2 id="五、案例分析一"><a href="#五、案例分析一" class="headerlink" title="五、案例分析一"></a>五、案例分析一</h2><blockquote><p>接着我们来实现一个<code>redux-saga</code>样例，存在一个登陆页，登陆成功后，显示列表页，并且，在列表页，可以点击登出，返回到登陆页。例子的最终展示效果如下</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-d55fad60b5d7d797.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>样例的功能流程图为</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-c71a6ade70f5f2fa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="5-1-LoginPanel-登陆页"><a href="#5-1-LoginPanel-登陆页" class="headerlink" title="5.1 LoginPanel(登陆页)"></a>5.1 LoginPanel(登陆页)</h3><p><strong>输入时时保存用户名和密码</strong></p><ul><li>用户名输入框和密码框onchange时触发的函数为</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">changeUsername:<span class="function">(<span class="params">e</span>)=&gt;</span>&#123;</span><br><span class="line">    dispatch(&#123;<span class="attr">type</span>:<span class="string">'CHANGE_USERNAME'</span>,<span class="attr">value</span>:e.target.value&#125;);</span><br><span class="line"> &#125;,</span><br><span class="line">changePassword:<span class="function">(<span class="params">e</span>)=&gt;</span>&#123;</span><br><span class="line">  dispatch(&#123;<span class="attr">type</span>:<span class="string">'CHANGE_PASSWORD'</span>,<span class="attr">value</span>:e.target.value&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在函数中最后会<code>dispatch</code>两个<code>action：CHANGE_USERNAME和CHANGE_PASSWORD</code></p></blockquote><ul><li>在<code>saga.js</code>文件中监听这两个方法并执行副作用函数，最后<code>put</code>发出转化后的<code>action</code>，给<code>reducer</code>函数调用</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> * <span class="title">watchUsername</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> action= <span class="keyword">yield</span> take(<span class="string">'CHANGE_USERNAME'</span>);</span><br><span class="line">    <span class="keyword">yield</span> put(&#123;<span class="attr">type</span>:<span class="string">'change_username'</span>,</span><br><span class="line">    value:action.value&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> * <span class="title">watchPassword</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> action=<span class="keyword">yield</span> take(<span class="string">'CHANGE_PASSWORD'</span>);</span><br><span class="line">    <span class="keyword">yield</span> put(&#123;<span class="attr">type</span>:<span class="string">'change_password'</span>,</span><br><span class="line">    value:action.value&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>最后在<code>reducer</code>中接收到<code>redux-saga</code>的<code>put</code>方法传递过来的<code>action：change_username</code>和<code>change_password</code>，然后更新<code>state</code></p></blockquote><p><strong>监听登陆事件判断登陆是否成功</strong></p><blockquote><p>在UI中发出的登陆事件为</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">toLoginIn:<span class="function">(<span class="params">username,password</span>)=&gt;</span>&#123;</span><br><span class="line">  dispatch(&#123;<span class="attr">type</span>:<span class="string">'TO_LOGIN_IN'</span>,username,password&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>登陆事件的<code>action</code>为：<code>TO_LOGIN_IN</code>.对于登入事件的处理函数为：</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="comment">//监听登入事件</span></span><br><span class="line">    <span class="keyword">const</span> action1=<span class="keyword">yield</span> take(<span class="string">'TO_LOGIN_IN'</span>);</span><br><span class="line">    <span class="keyword">const</span> res=<span class="keyword">yield</span> call(fetchSmart,<span class="string">'/login'</span>,&#123;</span><br><span class="line">      method:<span class="string">'POST'</span>,</span><br><span class="line">      body:<span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">        username:action1.username,</span><br><span class="line">        password:action1.password</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span>(res)&#123;</span><br><span class="line">      put(&#123;<span class="attr">type</span>:<span class="string">'to_login_in'</span>&#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>在上述的处理函数中，首先监听原始动作提取出传递来的用户名和密码，然后请求是否登陆成功，如果登陆成功有返回值，则执行<code>put</code>的<code>action:to_login_in</code></p></blockquote><h3 id="5-2-LoginSuccess"><a href="#5-2-LoginSuccess" class="headerlink" title="5.2 LoginSuccess"></a>5.2 LoginSuccess</h3><blockquote><p>(登陆成功列表展示页)</p></blockquote><ul><li>登陆成功后的页面功能包括：<ul><li>获取列表信息，展示列表信息</li><li>登出功能，点击可以返回登陆页面</li></ul></li></ul><p><strong>获取列表信息</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;delay&#125; <span class="keyword">from</span> <span class="string">'redux-saga'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> * <span class="title">getList</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">   <span class="keyword">yield</span> delay(<span class="number">3000</span>);</span><br><span class="line">   <span class="keyword">const</span> res = <span class="keyword">yield</span> call(fetchSmart,<span class="string">'/list'</span>,&#123;</span><br><span class="line">     method:<span class="string">'POST'</span>,</span><br><span class="line">     body:<span class="built_in">JSON</span>.stringify(&#123;&#125;)</span><br><span class="line">   &#125;);</span><br><span class="line">   <span class="keyword">yield</span> put(&#123;<span class="attr">type</span>:<span class="string">'update_list'</span>,<span class="attr">list</span>:res.data.activityList&#125;);</span><br><span class="line"> &#125; <span class="keyword">catch</span>(error) &#123;</span><br><span class="line">   <span class="keyword">yield</span> put(&#123;<span class="attr">type</span>:<span class="string">'update_list_error'</span>, error&#125;);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>为了演示请求过程，我们在本地<code>mock</code>，通过<code>redux-saga</code>的工具函数<code>delay</code>，<code>delay</code>的功能相当于延迟xx秒，因为真实的请求存在延迟，因此可以用delay在本地模拟真实场景下的请求延迟</p></blockquote><p><strong>登出功能</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">const action2=yield take(&apos;TO_LOGIN_OUT&apos;);</span><br><span class="line">yield put(&#123;type:&apos;to_login_out&apos;&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>与登入相似，登出的功能从UI处接受<code>action:TO_LOGIN_OUT</code>,然后转发<code>action:to_login_out</code></p></blockquote><p><strong>完整的实现登入登出和列表展示的代码</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> * <span class="title">getList</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">   <span class="keyword">yield</span> delay(<span class="number">3000</span>);</span><br><span class="line">   <span class="keyword">const</span> res = <span class="keyword">yield</span> call(fetchSmart,<span class="string">'/list'</span>,&#123;</span><br><span class="line">     method:<span class="string">'POST'</span>,</span><br><span class="line">     body:<span class="built_in">JSON</span>.stringify(&#123;&#125;)</span><br><span class="line">   &#125;);</span><br><span class="line">   <span class="keyword">yield</span> put(&#123;<span class="attr">type</span>:<span class="string">'update_list'</span>,<span class="attr">list</span>:res.data.activityList&#125;);</span><br><span class="line"> &#125; <span class="keyword">catch</span>(error) &#123;</span><br><span class="line">   <span class="keyword">yield</span> put(&#123;<span class="attr">type</span>:<span class="string">'update_list_error'</span>, error&#125;);</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> * <span class="title">watchIsLogin</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">  <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="comment">//监听登入事件</span></span><br><span class="line">    <span class="keyword">const</span> action1=<span class="keyword">yield</span> take(<span class="string">'TO_LOGIN_IN'</span>);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">const</span> res=<span class="keyword">yield</span> call(fetchSmart,<span class="string">'/login'</span>,&#123;</span><br><span class="line">      method:<span class="string">'POST'</span>,</span><br><span class="line">      body:<span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">        username:action1.username,</span><br><span class="line">        password:action1.password</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//根据返回的状态码判断登陆是否成功</span></span><br><span class="line">    <span class="keyword">if</span>(res.status===<span class="number">10000</span>)&#123;</span><br><span class="line">      <span class="keyword">yield</span> put(&#123;<span class="attr">type</span>:<span class="string">'to_login_in'</span>&#125;);</span><br><span class="line">      <span class="comment">//登陆成功后获取首页的活动列表</span></span><br><span class="line">      <span class="keyword">yield</span> call(getList);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//监听登出事件</span></span><br><span class="line">    <span class="keyword">const</span> action2=<span class="keyword">yield</span> take(<span class="string">'TO_LOGIN_OUT'</span>);</span><br><span class="line">    <span class="keyword">yield</span> put(&#123;<span class="attr">type</span>:<span class="string">'to_login_out'</span>&#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>通过请求状态码判断登入是否成功，在登陆成功后，可以通过</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yield call(getList)</span><br></pre></td></tr></table></figure><blockquote><p>注意call方法调用是会阻塞主线程的，具体来说</p></blockquote><ul><li>在call方法调用结束之前，call方法之后的语句是无法执行的</li><li>如果<code>call(getList)</code>存在延迟，<code>call(getList)</code>之后的语句 <code>const action2=yieldtake(&#39;TO_LOGIN_OUT&#39;)</code>在<code>call</code>方法返回结果之前无法执行</li><li>在延迟期间的登出操作会被忽略</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/1480597-377d80bb1517bae2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><strong>无阻塞调用</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yield call(getList)</span><br></pre></td></tr></table></figure><p>修改为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yield fork(getList)</span><br></pre></td></tr></table></figure><blockquote><p>通过fork方法不会阻塞主线程，在白屏时点击登出，可以立刻响应登出功能，从而返回登陆页面</p></blockquote><h2 id="六、案例分析二"><a href="#六、案例分析二" class="headerlink" title="六、案例分析二"></a>六、案例分析二</h2><h3 id="6-1-配置saga信息"><a href="#6-1-配置saga信息" class="headerlink" title="6.1 配置saga信息"></a>6.1 配置saga信息</h3><blockquote><p><code>src/store/configureStore.js</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; createStore, applyMiddleware, compose &#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"><span class="comment">// import &#123;createLogger &#125; from 'redux-logger'</span></span><br><span class="line"><span class="keyword">import</span> createHistory <span class="keyword">from</span> <span class="string">'history/createBrowserHistory'</span></span><br><span class="line"><span class="keyword">import</span> createSagaMiddleware <span class="keyword">from</span> <span class="string">'redux-saga'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; routerMiddleware &#125; <span class="keyword">from</span> <span class="string">'react-router-redux'</span></span><br><span class="line"><span class="keyword">import</span> rootSaga <span class="keyword">from</span> <span class="string">'../sagas'</span></span><br><span class="line"><span class="keyword">import</span> rootReducer <span class="keyword">from</span> <span class="string">'../reducers/'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> history = createHistory()</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> middleware = routerMiddleware(history)</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建saga middleware</span></span><br><span class="line"><span class="keyword">const</span> sagaMiddleware = createSagaMiddleware();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> configureStore = <span class="function"><span class="params">preloadedState</span> =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// 安装 Redux-DevTools Chrome 插件后可用 composeEnhancers()</span></span><br><span class="line"><span class="keyword">const</span> composeEnhancers = <span class="built_in">window</span>.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> store = createStore(</span><br><span class="line">rootReducer,</span><br><span class="line">preloadedState,</span><br><span class="line">composeEnhancers(</span><br><span class="line">applyMiddleware(sagaMiddleware,middleware)</span><br><span class="line">)</span><br><span class="line">)</span><br><span class="line">sagaMiddleware.run(rootSaga);</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">module</span>.hot) &#123;</span><br><span class="line"><span class="comment">// Enable Webpack hot module replacement for reducers</span></span><br><span class="line"><span class="built_in">module</span>.hot.accept(<span class="string">'../reducers'</span>, () =&gt; &#123;</span><br><span class="line"><span class="keyword">const</span> nextRootReducer = <span class="built_in">require</span>(<span class="string">'../reducers'</span>).default</span><br><span class="line">store.replaceReducer(nextRootReducer)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> store</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> configureStore</span><br></pre></td></tr></table></figure><h3 id="6-2-配置reduce"><a href="#6-2-配置reduce" class="headerlink" title="6.2 配置reduce"></a>6.2 配置reduce</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/reducers/index.js</span></span><br><span class="line"><span class="keyword">import</span> &#123;combineReducers&#125; <span class="keyword">from</span> <span class="string">'redux'</span></span><br><span class="line"><span class="keyword">import</span> &#123;routerReducer <span class="keyword">as</span> routing&#125; <span class="keyword">from</span> <span class="string">'react-router-redux'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> rootReducer = combineReducers(&#123;</span><br><span class="line">      routing,</span><br><span class="line">      poetry : <span class="built_in">require</span>(<span class="string">'./poetry'</span>).default</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> rootReducer</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/reducers/poetry.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> ActionTypes <span class="keyword">from</span> <span class="string">'../actions'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> (state = &#123;</span><br><span class="line">fetching:<span class="literal">false</span>,</span><br><span class="line">error:<span class="literal">false</span>,</span><br><span class="line">errMsg:<span class="string">''</span>,</span><br><span class="line">data:[]</span><br><span class="line">&#125;,action) =&gt; &#123;</span><br><span class="line"><span class="keyword">if</span>(action.type === ActionTypes.FETCH_POETRY_REQUEST)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;...state,<span class="attr">fetching</span>:<span class="literal">true</span>,<span class="attr">errMsg</span>:<span class="string">''</span>&#125;)</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(action.type === ActionTypes.FETCH_POETRY_SUCCESS)&#123;</span><br><span class="line"><span class="keyword">const</span> data = action.payload.data</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;...state,<span class="attr">fetching</span>:<span class="literal">false</span>,data,<span class="attr">errMsg</span>:<span class="string">''</span>&#125;)</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(action.type === ActionTypes.FETCH_POETRY_FAILURE)&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Object</span>.assign(&#123;...state,<span class="attr">fetching</span>:<span class="literal">false</span>,<span class="attr">error</span>:<span class="literal">true</span>,<span class="attr">errMsg</span>:action.payload.errMsg&#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> state</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="6-3-处理action"><a href="#6-3-处理action" class="headerlink" title="6.3 处理action"></a>6.3 处理action</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// src/action/index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; createAction &#125; <span class="keyword">from</span> <span class="string">'redux-actions'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> COMMON_FETCHING = <span class="string">'COMMON_FETCHING'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> COMMON_OVER = <span class="string">'COMMON_OVER'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> MSG_SHOW = <span class="string">'MSG_SHOW'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> MSG_INIT = <span class="string">'MSG_INIT'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> POP_LOGIN = <span class="string">'POP_LOGIN'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> initMsg = <span class="function"><span class="params">()</span> =&gt;</span> (&#123;<span class="attr">type</span> : MSG_INIT&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 相比用thunk多了一步 多了个action 来触发saga woker</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> FETCH_POETRY_REQUEST = <span class="string">'FETCH_POETRY_REQUEST'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> FETCH_POETRY_SUCCESS = <span class="string">'FETCH_POETRY_SUCCESS'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> FETCH_POETRY_FAILURE = <span class="string">'FETCH_POETRY_FAILURE'</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> fetchPoetryRequest = createAction(FETCH_POETRY_REQUEST)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> fetchPoetrySuccess = createAction(FETCH_POETRY_SUCCESS)</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> fetchPoetryFauilure= createAction(FETCH_POETRY_FAILURE)</span><br></pre></td></tr></table></figure><h3 id="6-4-处理sagas"><a href="#6-4-处理sagas" class="headerlink" title="6.4 处理sagas"></a>6.4 处理sagas</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// src/sagas/index.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123; all &#125; <span class="keyword">from</span> <span class="string">'redux-saga/effects'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="function"><span class="keyword">function</span>* <span class="title">rootSaga</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">yield</span> all([</span><br><span class="line">        ...require(<span class="string">'./fetchPoetry'</span>).default</span><br><span class="line">    ])</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// src/fetchPoetry.js</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> &#123;put,take,call,fork,takeEvery,select&#125; <span class="keyword">from</span> <span class="string">'redux-saga/effects'</span></span><br><span class="line"><span class="keyword">import</span> &#123;delay&#125; <span class="keyword">from</span> <span class="string">'redux-saga'</span></span><br><span class="line"><span class="keyword">import</span>  * <span class="keyword">as</span> api  <span class="keyword">from</span> <span class="string">'../api'</span></span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> actionTypes <span class="keyword">from</span> <span class="string">'../actions/'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// saga worker 监听FETCH_POETRY_REQUEST动作触发执行相应操作</span></span><br><span class="line"><span class="function"><span class="keyword">function</span>* <span class="title">fetchPoetrySaga</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// yield delay(100)</span></span><br><span class="line">    <span class="comment">// ======== 写法一 ========= </span></span><br><span class="line">    <span class="comment">// yield takeEvery(actionTypes.FETCH_POETRY_REQUEST,function*(action)&#123;</span></span><br><span class="line">    <span class="comment">//     // 调用this.props.fetchPoetryRequest(&#123;user:'poetries',age:23&#125;) 传参进来这里</span></span><br><span class="line">    <span class="comment">//     // 也可以通过这样获取state中的参数 const state = yield select()</span></span><br><span class="line">    <span class="comment">//     const &#123;user,age&#125; = action</span></span><br><span class="line">    <span class="comment">//     try&#123;</span></span><br><span class="line">    <span class="comment">//         const data =  yield call(api.get(&#123;</span></span><br><span class="line">    <span class="comment">//             url:'/mock/5b7fd63f719c7b7241f4e2fa/tangshi/tang-shi'</span></span><br><span class="line">    <span class="comment">//         &#125;))</span></span><br><span class="line">    <span class="comment">//         yield put(actionTypes.fetchPoetrySuccess(&#123;data:data.data.data&#125;))</span></span><br><span class="line">    <span class="comment">//     &#125;catch(error)&#123;</span></span><br><span class="line">    <span class="comment">//         yield put(actionTypes.fetchPoetryFauilure(&#123;errMsg:error.message&#125;))</span></span><br><span class="line">    <span class="comment">//     &#125;</span></span><br><span class="line">     </span><br><span class="line">    <span class="comment">// &#125;)</span></span><br><span class="line">    <span class="comment">// === 写法二====</span></span><br><span class="line">  <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">      <span class="comment">// 当dispatch(&#123;type:FETCH_POETRY_REQUEST&#125;)的时候被这里监听 执行对应的请求</span></span><br><span class="line">    <span class="keyword">const</span> &#123;user,age&#125; =  <span class="keyword">yield</span> take(actionTypes.FETCH_POETRY_REQUEST)</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">         <span class="keyword">const</span> data =  <span class="keyword">yield</span> call(api.get(&#123;</span><br><span class="line">             url:<span class="string">'/mock/5b7fd63f719c7b7241f4e2fa/tangshi/tang-shi'</span></span><br><span class="line">         &#125;))</span><br><span class="line">          <span class="keyword">yield</span> put(actionTypes.fetchPoetrySuccess(&#123;<span class="attr">data</span>:data.data.data&#125;))</span><br><span class="line">     &#125;<span class="keyword">catch</span>(error)&#123;</span><br><span class="line">         <span class="keyword">yield</span> put(actionTypes.fetchPoetryFauilure(&#123;<span class="attr">errMsg</span>:error.message&#125;))</span><br><span class="line">     &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 导出所有的saga</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span>  [</span><br><span class="line">    fork(fetchPoetrySaga)</span><br><span class="line">]</span><br></pre></td></tr></table></figure><blockquote><p>完整代码例子 <a href="https://github.com/poetries/redux-saga-template" target="_blank" rel="noopener">https://github.com/poetries/redux-saga-template</a></p></blockquote><h2 id="七、总结"><a href="#七、总结" class="headerlink" title="七、总结"></a>七、总结</h2><blockquote><p><code>redux-saga</code>做为<code>redux</code>中间件的全部优点</p></blockquote><ul><li>统一<code>action</code>的形式，在<code>redux-saga</code>中，从<code>UI</code>中<code>dispatch</code>的<code>action</code>为原始对象</li><li>集中处理异步等存在副作用的逻辑</li><li>通过转化<code>effects</code>函数，可以方便进行单元测试</li><li>完善和严谨的流程控制，可以较为清晰的控制复杂的逻辑</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、redux-thunk&quot;&gt;&lt;a href=&quot;#一、redux-thunk&quot; class=&quot;headerlink&quot; title=&quot;一、redux-thunk&quot;&gt;&lt;/a&gt;一、redux-thunk&lt;/h2&gt;&lt;h3 id=&quot;1-1-redux的副作用处理&quot;&gt;&lt;a h
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="Redux" scheme="http://blog.poetries.top/tags/Redux/"/>
    
      <category term="中间件" scheme="http://blog.poetries.top/tags/%E4%B8%AD%E9%97%B4%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>vue状态管理之vuex（十六）</title>
    <link href="http://blog.poetries.top/2018/08/29/vue-vuex/"/>
    <id>http://blog.poetries.top/2018/08/29/vue-vuex/</id>
    <published>2018-08-29T03:30:32.000Z</published>
    <updated>2018-08-31T08:54:59.928Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>了解vuex核心概念请移步 <a href="https://vuex.vuejs.org/zh/" target="_blank" rel="noopener">https://vuex.vuejs.org/zh/</a></p></blockquote><h2 id="一、初始vuex"><a href="#一、初始vuex" class="headerlink" title="一、初始vuex"></a>一、初始vuex</h2><h3 id="1-1-vuex是什么"><a href="#1-1-vuex是什么" class="headerlink" title="1.1 vuex是什么"></a>1.1 vuex是什么</h3><blockquote><ul><li><code>vuex</code> 就是把需要共享的变量全部存储在一个对象里面，然后将这个对象放在顶层组件中供其他组件使用<ul><li>父子组件通信时，我们通常会采用 <code>props + emit</code> 这种方式。但当通信双方不是父子组件甚至压根不存在相关联系，或者一个状态需要共享给多个组件时，就会非常麻烦，数据也会相当难维护</li></ul></li></ul></blockquote><h3 id="1-2-vuex中有什么"><a href="#1-2-vuex中有什么" class="headerlink" title="1.2 vuex中有什么"></a>1.2 vuex中有什么</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = <span class="keyword">new</span> Vuex.Store(&#123;</span><br><span class="line">    state: &#123;</span><br><span class="line">        name: <span class="string">'weish'</span>,</span><br><span class="line">        age: <span class="number">22</span></span><br><span class="line">    &#125;,</span><br><span class="line">    getters: &#123;</span><br><span class="line">        personInfo(state) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">`My name is <span class="subst">$&#123;state.name&#125;</span>, I am <span class="subst">$&#123;state.age&#125;</span>`</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    mutations: &#123;</span><br><span class="line">        SET_AGE(state, age) &#123;</span><br><span class="line">            commit(age, age);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    actions: &#123;</span><br><span class="line">        nameAsyn(&#123;commit&#125;) &#123;</span><br><span class="line">            setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                commit(<span class="string">'SET_AGE'</span>, <span class="number">18</span>);</span><br><span class="line">            &#125;, <span class="number">1000</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    modules: &#123;</span><br><span class="line">        a: modulesA</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>个就是最基本也是完整的<code>vuex</code>代码；<code>vuex</code> 包含有五个基本的对象</p></blockquote><ul><li><code>state</code>：存储状态。也就是变量；</li><li><code>getters</code>：派生状态。也就是<code>set</code>、<code>get</code>中的<code>get</code>，有两个可选参数：<code>state</code>、<code>getters</code>分别可以获取<code>state</code>中的变量和其他的<code>getters</code>。外部调用方式：<code>store.getters.personInfo()</code>。就和<code>vue</code>的<code>computed</code>差不多；</li><li><code>mutations</code>：提交状态修改。也就是<code>set</code>、<code>get</code>中的<code>set</code>，这是<code>vuex</code>中唯一修改<code>state</code>的方式，但不支持异步操作。第一个参数默认是<code>state</code>。外部调用方式：<code>store.commit(&#39;SET_AGE&#39;, 18)</code>。和<code>vue</code>中的<code>methods</code>类似。</li><li><code>actions</code>：和<code>mutations</code>类似。不过<code>actions</code>支持异步操作。第一个参数默认是和<code>store</code>具有相同参数属性的对象。外部调用方式：<code>store.dispatch(&#39;nameAsyn&#39;)</code>。</li><li><code>modules</code>：<code>store</code>的子模块，内容就相当于是<code>store</code>的一个实例。调用方式和前面介绍的相似，只是要加上当前子模块名，如：<code>store.a.getters.xxx()</code></li></ul><h3 id="1-3-vue-cli中使用vuex的方式"><a href="#1-3-vue-cli中使用vuex的方式" class="headerlink" title="1.3 vue-cli中使用vuex的方式"></a>1.3 vue-cli中使用vuex的方式</h3><p><strong>目录结构</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">├── index.html</span><br><span class="line">├── main.js</span><br><span class="line">├── components</span><br><span class="line">└── store</span><br><span class="line">    ├── index.js          # 我们组装模块并导出 store 的地方</span><br><span class="line">    ├── state.js          # 跟级别的 state</span><br><span class="line">    ├── getters.js        # 跟级别的 getter</span><br><span class="line">    ├── mutation-types.js # 根级别的mutations名称（官方推荐mutions方法名使用大写）</span><br><span class="line">    ├── mutations.js      # 根级别的 mutation</span><br><span class="line">    ├── actions.js        # 根级别的 action</span><br><span class="line">    └── modules</span><br><span class="line">        ├── m1.js         # 模块1</span><br><span class="line">        └── m2.js         # 模块2</span><br></pre></td></tr></table></figure><p><strong>state示例</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> state = &#123;</span><br><span class="line">    name: <span class="string">'weish'</span>,</span><br><span class="line">    age: <span class="number">22</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> state;</span><br></pre></td></tr></table></figure><p><strong>getter示例</strong></p><blockquote><p><code>getters.js</code>示例（我们一般使用<code>getters</code>来获取<code>state</code>的状态，而不是直接使用<code>state</code>）</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> name = <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> state.name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> age = <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> state.age</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> other = <span class="function">(<span class="params">state</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">`My name is <span class="subst">$&#123;state.name&#125;</span>, I am <span class="subst">$&#123;state.age&#125;</span>.`</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>mutation-type示例</strong></p><blockquote><p>将所有<code>mutations</code>的函数名放在这个文件里</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export const SET_NAME = &apos;SET_NAME&apos;;</span><br><span class="line">export const SET_AGE = &apos;SET_AGE&apos;;</span><br></pre></td></tr></table></figure><p><strong>mutations示例</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> types <span class="keyword">from</span> <span class="string">'./mutation-type.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    [types.SET_NAME](state, name) &#123;</span><br><span class="line">        state.name = name;</span><br><span class="line">    &#125;,</span><br><span class="line">    [types.SET_AGE](state, age) &#123;</span><br><span class="line">        state.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><strong>actions示例</strong></p><blockquote><p>异步操作、多个<code>commit</code>时</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> types <span class="keyword">from</span> <span class="string">'./mutation-type.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    nameAsyn(&#123;commit&#125;, &#123;age, name&#125;) &#123;</span><br><span class="line">        commit(types.SET_NAME, name);</span><br><span class="line">        commit(types.SET_AGE, age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>modules–m1.js示例</strong></p><blockquote><p>如果不是很复杂的应用，一般来讲是不会分模块的</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    state: &#123;&#125;,</span><br><span class="line">    getters: &#123;&#125;,</span><br><span class="line">    mutations: &#123;&#125;,</span><br><span class="line">    actions: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>index.js示例（组装vuex)</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> vue <span class="keyword">from</span> <span class="string">'vue'</span>;</span><br><span class="line"><span class="keyword">import</span> vuex <span class="keyword">from</span> <span class="string">'vuex'</span>;</span><br><span class="line"><span class="keyword">import</span> state <span class="keyword">from</span> <span class="string">'./state.js'</span>;</span><br><span class="line"><span class="keyword">import</span> * <span class="keyword">as</span> getters <span class="keyword">from</span> <span class="string">'./getters.js'</span>;</span><br><span class="line"><span class="keyword">import</span> mutations <span class="keyword">from</span> <span class="string">'./mutations.js'</span>;</span><br><span class="line"><span class="keyword">import</span> actions <span class="keyword">from</span> <span class="string">'./actions.js'</span>;</span><br><span class="line"><span class="keyword">import</span> m1 <span class="keyword">from</span> <span class="string">'./modules/m1.js'</span>;</span><br><span class="line"><span class="keyword">import</span> m2 <span class="keyword">from</span> <span class="string">'./modules/m2.js'</span>;</span><br><span class="line"><span class="keyword">import</span> createLogger <span class="keyword">from</span> <span class="string">'vuex/dist/logger'</span>; <span class="comment">// 修改日志</span></span><br><span class="line"></span><br><span class="line">vue.use(vuex);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> debug = process.env.NODE_ENV !== <span class="string">'production'</span>; <span class="comment">// 开发环境中为true，否则为false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> vuex.Store(&#123;</span><br><span class="line">    state,</span><br><span class="line">    getters,</span><br><span class="line">    mutations,</span><br><span class="line">    actions,</span><br><span class="line">    modules: &#123;</span><br><span class="line">        m1,</span><br><span class="line">        m2</span><br><span class="line">    &#125;,</span><br><span class="line">    plugins: debug ? [createLogger()] : [] <span class="comment">// 开发环境下显示vuex的状态修改</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>最后将<code>store</code>实例挂载到<code>main.js</code>里面的<code>vue</code>上去就行了</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store/index.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  store,</span><br><span class="line">  render: <span class="function"><span class="params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>在<code>vue</code>组件中使用时，我们通常会使用<code>mapGetters</code>、<code>mapActions</code>、<code>mapMutations</code>，然后就可以按照<code>vue</code>调用<code>methods</code>和<code>computed</code>的方式去调用这些变量或函数，示例如</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;mapGetters, mapMutations, mapActions&#125; <span class="keyword">from</span> <span class="string">'vuex'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 只写组件中的script部分 */</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    computed: &#123;</span><br><span class="line">        ...mapGetters([</span><br><span class="line">            name,</span><br><span class="line">            age</span><br><span class="line">        ])</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;</span><br><span class="line">        ...mapMutations(&#123;</span><br><span class="line">            setName: <span class="string">'SET_NAME'</span>,</span><br><span class="line">            setAge: <span class="string">'SET_AGE'</span></span><br><span class="line">        &#125;),</span><br><span class="line">        ...mapActions([</span><br><span class="line">            nameAsyn</span><br><span class="line">        ])</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="二、modules"><a href="#二、modules" class="headerlink" title="二、modules"></a>二、modules</h2><blockquote><p>在 src 目录下 , 新建一个 store 文件夹 , 然后在里面新建一个 index.js</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line">Vue.use(vuex);</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> vuex.Store(&#123;</span><br><span class="line">    state:&#123;</span><br><span class="line">        show:<span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>在 <code>main.js</code> 里的代码应该改成,在实例化 <code>Vue</code>对象时加入 <code>store</code> 对象</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//vuex</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'./store'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  router,</span><br><span class="line">  store,<span class="comment">//使用store</span></span><br><span class="line">  template: <span class="string">'&lt;App/&gt;'</span>,</span><br><span class="line">  components: &#123; App &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>这样就把 <code>store</code> 分离出去了 , 那么还有一个问题是 : 这里 <code>$store.state.show</code> 无论哪个组件都可以使用 , 那组件多了之后 , 状态也多了 , 这么多状态都堆在 store 文件夹下的 <code>index.js</code> 不好维护怎么办 ?</p></blockquote><ul><li>我们可以使用 <code>vuex</code> 的 <code>modules</code> , 把 <code>store</code> 文件夹下的 <code>index.js</code> 改成</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> vuex <span class="keyword">from</span> <span class="string">'vuex'</span></span><br><span class="line">Vue.use(vuex);</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> dialog_store <span class="keyword">from</span> <span class="string">'../components/dialog_store.js'</span>;<span class="comment">//引入某个store对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> vuex.Store(&#123;</span><br><span class="line">    modules: &#123;</span><br><span class="line">        dialog: dialog_store</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>这里我们引用了一个 <code>dialog_store.js</code> , 在这个 <code>js</code>文件里我们就可以单独写 <code>dialog</code> 组件的状态了 </p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    state:&#123;</span><br><span class="line">        show:<span class="literal">false</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>做出这样的修改之后 , 我们将之前我们使用的 <code>$store.state.show</code> 统统改为 <code>$store.state.dialog.show</code> 即可</p></blockquote><ul><li>如果还有其他的组件需要使用 <code>vuex</code> , 就新建一个对应的状态文件 , 然后将他们加入 <code>store</code>文件夹下的 <code>index.js</code>文件中的 <code>modules</code> 中</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">modules: &#123;</span><br><span class="line">    dialog: dialog_store,</span><br><span class="line">    other: other,<span class="comment">//其他组件</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="三、mutations"><a href="#三、mutations" class="headerlink" title="三、mutations"></a>三、mutations</h2><blockquote><p>对<code>vuex</code> 的依赖仅仅只有一个 <code>$store.state.dialog.show</code> 一个状态 , 但是如果我们要进行一个操作 , 需要依赖很多很多个状态 , 那管理起来又麻烦了</p></blockquote><ul><li><code>mutations</code>里的操作必须是同步的</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    state:&#123;<span class="comment">//state</span></span><br><span class="line">        show:<span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    mutations:&#123;</span><br><span class="line">        switch_dialog(state)&#123;<span class="comment">//这里的state对应着上面这个state</span></span><br><span class="line">            state.show = state.show?<span class="literal">false</span>:<span class="literal">true</span>;</span><br><span class="line">            <span class="comment">//你还可以在这里执行其他的操作改变state</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>使用 <code>mutations</code> 后 , 原先我们的父组件可以改为 </p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> @<span class="attr">click</span>=<span class="string">"$store.commit('switch_dialog')"</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">t-dialog</span>&gt;</span><span class="tag">&lt;/<span class="name">t-dialog</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> dialog <span class="keyword">from</span> <span class="string">'./components/dialog.vue'</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  components:&#123;</span></span><br><span class="line"><span class="javascript">    <span class="string">"t-dialog"</span>:dialog</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>使用 <code>$store.commit(&#39;switch_dialog&#39;)</code> 来触发 <code>mutations</code> 中的 <code>switch_dialog</code> 方法</p></blockquote><h2 id="四、actions"><a href="#四、actions" class="headerlink" title="四、actions"></a>四、actions</h2><blockquote><p>多个 <code>state</code> 的操作 , 使用 <code>mutations</code>会来触发会比较好维护 , 那么需要执行多个 <code>mutations</code> 就需要用 <code>action</code> 了</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    state:&#123;<span class="comment">//state</span></span><br><span class="line">        show:<span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    mutations:&#123;</span><br><span class="line">        switch_dialog(state)&#123;<span class="comment">//这里的state对应着上面这个state</span></span><br><span class="line">            state.show = state.show?<span class="literal">false</span>:<span class="literal">true</span>;</span><br><span class="line">            <span class="comment">//你还可以在这里执行其他的操作改变state</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    actions:&#123;</span><br><span class="line">        switch_dialog(context)&#123;<span class="comment">//这里的context和我们使用的$store拥有相同的对象和方法</span></span><br><span class="line">            context.commit(<span class="string">'switch_dialog'</span>);</span><br><span class="line">            <span class="comment">//你还可以在这里触发其他的mutations方法</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>那么 , 在之前的父组件中 , 我们需要做修改 , 来触发 <code>action</code> 里的 <code>switch_dialog</code> 方法</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span> @<span class="attr">click</span>=<span class="string">"$store.dispatch('switch_dialog')"</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">t-dialog</span>&gt;</span><span class="tag">&lt;/<span class="name">t-dialog</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> dialog <span class="keyword">from</span> <span class="string">'./components/dialog.vue'</span></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  components:&#123;</span></span><br><span class="line"><span class="javascript">    <span class="string">"t-dialog"</span>:dialog</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>使用 <code>$store.dispatch(&#39;switch_dialog&#39;)</code> 来触发 <code>action</code> 中的 <code>switch_dialog</code> 方法。</li><li>官方推荐 , 将异步操作放在 <code>action</code>中</li></ul><h2 id="五、getters"><a href="#五、getters" class="headerlink" title="五、getters"></a>五、getters</h2><blockquote><p><code>getters</code>和 <code>vue</code> 中的<code>computed</code> 类似 , 都是用来计算 <code>state</code> 然后生成新的数据 ( 状态 ) 的</p></blockquote><ul><li>假如我们需要一个与状态 <code>show</code> 刚好相反的状态 , 使用 <code>vue</code> 中的 <code>computed</code> 可以这样算出来</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">computed()&#123;</span><br><span class="line">    not_show()&#123;</span><br><span class="line">        <span class="keyword">return</span> !<span class="keyword">this</span>.$store.state.dialog.show;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>那么 , 如果很多很多个组件中都需要用到这个与 <code>show</code>刚好相反的状态 , 那么我们需要写很多很多个 <code>not_show</code>, 使用 <code>getters</code>就可以解决这种问题 </p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    state:&#123;<span class="comment">//state</span></span><br><span class="line">        show:<span class="literal">false</span></span><br><span class="line">    &#125;,</span><br><span class="line">    getters:&#123;</span><br><span class="line">        not_show(state)&#123;<span class="comment">//这里的state对应着上面这个state</span></span><br><span class="line">            <span class="keyword">return</span> !state.show;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    mutations:&#123;</span><br><span class="line">        switch_dialog(state)&#123;<span class="comment">//这里的state对应着上面这个state</span></span><br><span class="line">            state.show = state.show?<span class="literal">false</span>:<span class="literal">true</span>;</span><br><span class="line">            <span class="comment">//你还可以在这里执行其他的操作改变state</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    actions:&#123;</span><br><span class="line">        switch_dialog(context)&#123;<span class="comment">//这里的context和我们使用的$store拥有相同的对象和方法</span></span><br><span class="line">            context.commit(<span class="string">'switch_dialog'</span>);</span><br><span class="line">            <span class="comment">//你还可以在这里触发其他的mutations方法</span></span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>我们在组件中使用 <code>$store.state.dialog.show</code> 来获得状态 <code>show</code> , 类似的 , 我们可以使用 <code>$store.getters.not_show</code> 来获得状态 <code>not_show</code></p></blockquote><ul><li>注意 : <code>$store.getters.not_show</code> 的值是不能直接修改的 , 需要对应的 <code>state</code> 发生变化才能修改</li></ul><h2 id="六、mapState、mapGetters、mapActions"><a href="#六、mapState、mapGetters、mapActions" class="headerlink" title="六、mapState、mapGetters、mapActions"></a>六、mapState、mapGetters、mapActions</h2><blockquote><p>很多时候 , <code>$store.state.dialog.show</code> 、<code>$store.dispatch(&#39;switch_dialog&#39;)</code> 这种写法很不方便</p></blockquote><ul><li>使用 <code>mapState</code>、<code>mapGetters</code>、<code>mapActions</code> 就不会这么复杂了</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-dialog</span> <span class="attr">:visible.sync</span>=<span class="string">"show"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123;mapState&#125; <span class="keyword">from</span> <span class="string">'vuex'</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  computed:&#123;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">//这里的三点叫做 : 扩展运算符</span></span></span><br><span class="line"><span class="undefined">    ...mapState(&#123;</span></span><br><span class="line"><span class="javascript">      show:<span class="function"><span class="params">state</span>=&gt;</span>state.dialog.show</span></span><br><span class="line"><span class="undefined">    &#125;),</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>相当于</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">el-dialog</span> <span class="attr">:visible.sync</span>=<span class="string">"show"</span>&gt;</span><span class="tag">&lt;/<span class="name">el-dialog</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">import</span> &#123;mapState&#125; <span class="keyword">from</span> <span class="string">'vuex'</span>;</span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">  computed:&#123;</span></span><br><span class="line"><span class="undefined">    show()&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="keyword">this</span>.$store.state.dialog.show;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>mapGetters</code>、<code>mapActions</code> 和 <code>mapState</code> 类似 , <code>mapGetters</code> 一般也写在 <code>computed</code> 中 , <code>mapActions</code> 一般写在 <code>methods</code> 中</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;了解vuex核心概念请移步 &lt;a href=&quot;https://vuex.vuejs.org/zh/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://vuex.vuejs.org/zh/&lt;/a&gt;&lt;/p&gt;
&lt;/block
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="Vue" scheme="http://blog.poetries.top/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>vue过渡与动画（十五）</title>
    <link href="http://blog.poetries.top/2018/08/28/vue-animation-transition/"/>
    <id>http://blog.poetries.top/2018/08/28/vue-animation-transition/</id>
    <published>2018-08-28T12:10:32.000Z</published>
    <updated>2018-08-31T08:54:59.928Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、transition标签结合css"><a href="#一、transition标签结合css" class="headerlink" title="一、transition标签结合css"></a>一、transition标签结合css</h2><p><img src="https://upload-images.jianshu.io/upload_images/1480597-08967bd611312202.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p><code>vue.2.0</code>中的过渡动画利用自身的<code>transition</code>组件实现</p></blockquote><p><strong>有四种情形可以实现过渡效果</strong></p><ul><li>利用<code>v-if</code>渲染元素时</li><li>利用<code>v-show</code>展示或者隐藏元素时应用过渡生效</li><li>动态组件(把几个组件挂载到一个父节点上，在父节点绑定变量来决定显示哪个子组件)</li><li>组件根节点</li></ul><blockquote><ul><li>过渡有两种总的状态：即<code>enter</code>(过渡开始)和<code>leave</code>(过渡结束) </li><li>这两中状态再细分，可分出6种状态，对应6个类名</li><li>在进入/离开的过渡中，会有 6 个 <code>class</code> 切换</li></ul></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-cdb6a6cb0faa21b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="transition"></p><p><img src="https://cn.vuejs.org/images/transition.png" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-d2cb3498acd43afd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>控制元素的滑入与滑出，例如：<code>DOM</code>结构，要在<code>transition</code>组件上添加<code>name</code>属性，并在<code>css</code>中使用<code>name</code>的属性值替代以上<code>v-</code>状态种的<code>v</code>作为类名</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">"slide"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"food"</span> <span class="attr">v-show</span>=<span class="string">"showFlag"</span> @<span class="attr">click</span>=<span class="string">"hide"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"food-content"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"imang-header"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">img</span> <span class="attr">:src</span>=<span class="string">"food.image"</span> &gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><p> css样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.food</span></span><br><span class="line">  <span class="selector-tag">position</span> <span class="selector-pseudo">:fixed</span></span><br><span class="line">  <span class="selector-tag">left</span><span class="selector-pseudo">:0</span></span><br><span class="line">  <span class="selector-tag">top</span><span class="selector-pseudo">:0</span></span><br><span class="line">  <span class="selector-tag">bottom</span>: 48<span class="selector-tag">px</span></span><br><span class="line">  <span class="selector-tag">z-index</span><span class="selector-pseudo">:30</span></span><br><span class="line">  <span class="selector-tag">width</span> <span class="selector-pseudo">:100</span>%</span><br><span class="line">  <span class="selector-tag">background</span> :<span class="selector-id">#fff</span></span><br><span class="line">  <span class="comment">/*定义元素最终移动到的位置，以及移动到此位置需要的时间*/</span></span><br><span class="line"><span class="selector-class">.slide-enter-active</span></span><br><span class="line">  <span class="selector-tag">transition</span>: <span class="selector-tag">all</span> <span class="selector-class">.5s</span> <span class="selector-tag">ease</span></span><br><span class="line">  <span class="selector-tag">transform</span><span class="selector-pseudo">:translate3d(0</span>,0,0)</span><br><span class="line">  <span class="comment">/*定义元素从什么位置离开，以及离开岛指定位置所需的时间*/</span></span><br><span class="line"><span class="selector-class">.slide-leave-active</span></span><br><span class="line">  <span class="selector-tag">transition</span>: <span class="selector-tag">all</span> <span class="selector-class">.5s</span> <span class="selector-tag">ease</span></span><br><span class="line">  <span class="selector-tag">transform</span><span class="selector-pseudo">:translate3d(0</span>,0,0)</span><br><span class="line">  <span class="comment">/*定义元素从100%的位置移入到0，过渡结束后再从0回到100%的位置*/</span></span><br><span class="line"><span class="selector-class">.slide-enter</span>,<span class="selector-class">.slide-leave-to</span></span><br><span class="line">  <span class="selector-tag">transform</span><span class="selector-pseudo">:translate3d(100</span>%,0,0)</span><br></pre></td></tr></table></figure><p><strong>单组件过渡</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span> <span class="attr">name</span>=<span class="string">"fade"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"show"</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.fade-enter-active</span>, <span class="selector-class">.fade-leave-active</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: opacity .<span class="number">5s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.fade-enter</span>, <span class="selector-class">.fade-leave-to</span> &#123;</span><br><span class="line">  <span class="attribute">opacity</span>: <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>类似的只需要在过度类中填写动画即可</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.fade-enter-active</span>, <span class="selector-class">.fade-leave-active</span> &#123;</span><br><span class="line">  <span class="attribute">animation</span>: fade-in .<span class="number">5s</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-class">.fade-enter</span>, <span class="selector-class">.fade-leave-to</span> &#123;</span><br><span class="line">  <span class="attribute">animation</span>:fade-in .<span class="number">5s</span> reverse;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">keyframes</span> bounce-in &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">ooacity</span>: <span class="number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  50% &#123;</span><br><span class="line">    <span class="attribute">ooacity</span>: .<span class="number">5</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">ooacity</span>: <span class="number">1</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、自定义过渡类名实现动画"><a href="#二、自定义过渡类名实现动画" class="headerlink" title="二、自定义过渡类名实现动画"></a>二、自定义过渡类名实现动画</h2><p><img src="https://upload-images.jianshu.io/upload_images/1480597-1460f61d58e3115c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p><code>animate.css</code>结合<code>transition</code></p></blockquote><blockquote><p><a href="https://daneden.github.io/animate.css/" target="_blank" rel="noopener">https://daneden.github.io/animate.css/</a></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"toggle"</span>&gt;</span>显示/隐藏<span class="tag">&lt;/<span class="name">button</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">transition</span> </span></span><br><span class="line"><span class="tag">     <span class="attr">enter-active-class</span>=<span class="string">"animated fadeInRight"</span></span></span><br><span class="line"><span class="tag">     <span class="attr">leave-active-class</span>=<span class="string">"animated fadeOutRight"</span></span></span><br><span class="line"><span class="tag">     &gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- 坑：span行内元素（行内元素没有宽） 应该改为块级元素 --&gt;</span></span><br><span class="line">       <span class="comment">&lt;!-- &lt;span class="show" v-show="isshow"&gt;it创业&lt;/span&gt; --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"width:200px"</span> <span class="attr">class</span>=<span class="string">"show"</span> <span class="attr">v-show</span>=<span class="string">"isshow"</span>&gt;</span>it创业<span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">     <span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="三、js钩子函数实现动画"><a href="#三、js钩子函数实现动画" class="headerlink" title="三、js钩子函数实现动画"></a>三、js钩子函数实现动画</h2><p><img src="https://upload-images.jianshu.io/upload_images/1480597-eefc46df55457ac2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>这些钩子函数可以结合 <code>CSS transitions/animations</code>使用，也可以单独使用。</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">transition</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:before-enter</span>=<span class="string">"beforeEnter"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:enter</span>=<span class="string">"enter"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:after-enter</span>=<span class="string">"afterEnter"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:enter-cancelled</span>=<span class="string">"enterCancelled"</span></span></span><br><span class="line"><span class="tag"></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:before-leave</span>=<span class="string">"beforeLeave"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:leave</span>=<span class="string">"leave"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:after-leave</span>=<span class="string">"afterLeave"</span></span></span><br><span class="line"><span class="tag">  <span class="attr">v-on:leave-cancelled</span>=<span class="string">"leaveCancelled"</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- ... --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">transition</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// ...</span></span><br><span class="line">methods: &#123;</span><br><span class="line">  <span class="comment">// --------</span></span><br><span class="line">  <span class="comment">// 进入中</span></span><br><span class="line">  <span class="comment">// --------</span></span><br><span class="line"></span><br><span class="line">  beforeEnter: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 此回调函数是可选项的设置</span></span><br><span class="line">  <span class="comment">// 与 CSS 结合时使用</span></span><br><span class="line">  enter: <span class="function"><span class="keyword">function</span> (<span class="params">el, done</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    done()</span><br><span class="line">  &#125;,</span><br><span class="line">  afterEnter: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">  enterCancelled: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="comment">// --------</span></span><br><span class="line">  <span class="comment">// 离开时</span></span><br><span class="line">  <span class="comment">// --------</span></span><br><span class="line"></span><br><span class="line">  beforeLeave: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 此回调函数是可选项的设置</span></span><br><span class="line">  <span class="comment">// 与 CSS 结合时使用</span></span><br><span class="line">  leave: <span class="function"><span class="keyword">function</span> (<span class="params">el, done</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">    done()</span><br><span class="line">  &#125;,</span><br><span class="line">  afterLeave: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// leaveCancelled 只用于 v-show 中</span></span><br><span class="line">  leaveCancelled: <span class="function"><span class="keyword">function</span> (<span class="params">el</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>当只用 <code>JavaScript</code> 过渡的时候，在 <code>enter</code> 和 <code>leave</code> 中必须使用 <code>done</code> 进行回调。否则，它们将被同步调用，过渡会立即完成</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、transition标签结合css&quot;&gt;&lt;a href=&quot;#一、transition标签结合css&quot; class=&quot;headerlink&quot; title=&quot;一、transition标签结合css&quot;&gt;&lt;/a&gt;一、transition标签结合css&lt;/h2&gt;&lt;p&gt;&lt;i
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="Vue" scheme="http://blog.poetries.top/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>vue项目中的痛点（十四）</title>
    <link href="http://blog.poetries.top/2018/08/28/vue-project-dev-question/"/>
    <id>http://blog.poetries.top/2018/08/28/vue-project-dev-question/</id>
    <published>2018-08-28T09:10:30.000Z</published>
    <updated>2018-08-31T08:54:59.928Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、列表进入详情页传参"><a href="#一、列表进入详情页传参" class="headerlink" title="一、列表进入详情页传参"></a>一、列表进入详情页传参</h2><blockquote><p>例如商品列表页面前往商品详情页面，需要传一个商品id</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123;path: 'detail', query: &#123;id: 1&#125;&#125;"</span>&gt;</span>前往detail页面<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>c</code>页面的路径为<code>http://localhost:8080/#/detail?id=1</code>，可以看到传了一个参数<code>id=1</code>，并且就算刷新页面id也还会存在。此时在c页面可以通过id来获取对应的详情数据，获取<code>id</code>的方式是<code>this.$route.query.id</code></p></blockquote><p><strong>vue传参方式有：query、params+动态路由传参</strong></p><blockquote><p><code>query</code>通过<code>path</code>切换路由，<code>params</code>通过<code>name</code>切换路由</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// query通过path切换路由</span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123;path: 'Detail', query: &#123; id: 1 &#125;&#125;"</span>&gt;</span>前往Detail页面<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">// params通过name切换路由</span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123;name: 'Detail', params: &#123; id: 1 &#125;&#125;"</span>&gt;</span>前往Detail页面<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>query</code>通过<code>this.$route.query</code>来接收参数，<code>params</code>通过<code>this.$route.params</code>来接收参数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// query通过this.$route.query接收参数</span></span><br><span class="line">created () &#123;</span><br><span class="line">    <span class="keyword">const</span> id = <span class="keyword">this</span>.$route.query.id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// params通过this.$route.params来接收参数</span></span><br><span class="line">created () &#123;</span><br><span class="line">    <span class="keyword">const</span> id = <span class="keyword">this</span>.$route.params.id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>query</code>传参的<code>url</code>展现方式：<code>/detail?id=1&amp;user=123&amp;identity=1&amp;</code>更多参数</li><li><code>params</code>＋动态路由的<code>url</code>方式：<code>/detail/123</code></li><li><code>params</code>动态路由传参，一定要在路由中定义参数，然后在路由跳转的时候必须要加上参数，否则就是空白页面</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;      </span><br><span class="line">    path: &apos;/detail/:id&apos;,      </span><br><span class="line">    name: &apos;Detail&apos;,      </span><br><span class="line">    component: Detail    </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ul><li><strong>注意</strong>，<code>params</code>传参时，如果没有在路由中定义参数，也是可以传过去的，同时也能接收到，但是一旦刷新页面，这个参数就不存在了。这对于需要依赖参数进行某些操作的行为是行不通的</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// 定义的路由中，只定义一个id参数</span><br><span class="line">&#123;</span><br><span class="line">    path: 'detail/:id',</span><br><span class="line">    name: 'Detail',</span><br><span class="line">    components: Detail</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// template中的路由传参，</span><br><span class="line">// 传了一个id参数和一个token参数</span><br><span class="line">// id是在路由中已经定义的参数，而token没有定义</span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123;name: 'Detail', params: &#123; id: 1, token: '123456' &#125;&#125;"</span>&gt;</span>前往Detail页面<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 在详情页接收</span><br><span class="line">created () &#123;</span><br><span class="line">    // 以下都可以正常获取到</span><br><span class="line">    // 但是页面刷新后，id依然可以获取，而token此时就不存在了</span><br><span class="line">    const id = this.$route.params.id;</span><br><span class="line">    const token = this.$route.params.token;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>综上：尽量使用<code>query</code>来传参</p></blockquote><h2 id="二、请求服务器接口跨域"><a href="#二、请求服务器接口跨域" class="headerlink" title="二、请求服务器接口跨域"></a>二、请求服务器接口跨域</h2><blockquote><p>本地开发项目请求服务器接口的时候，因为客户端的同源策略，导致了跨域的问题</p></blockquote><ul><li><code>vue-cli</code>初始化的项目，在配置文件中提供了<code>proxyTable</code>来解决本地开发的跨域问题。<code>config</code>文件的<code>index.js</code>文件中，找到<code>proxyTable</code>选项，进行如下配置</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">proxyTable: &#123;</span><br><span class="line">      <span class="comment">// 用‘/api’开头，代理所有请求到目标服务器</span></span><br><span class="line">      <span class="string">'/api'</span>: &#123;</span><br><span class="line">        target: <span class="string">'http://jsonplaceholder.typicode.com'</span>, <span class="comment">// 接口域名</span></span><br><span class="line">        changeOrigin: <span class="literal">true</span>, <span class="comment">// 是否启用跨域</span></span><br><span class="line">        pathRewrite: &#123; <span class="comment">//</span></span><br><span class="line">          <span class="string">'^/api'</span>: <span class="string">''</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>例如请求接口：<code>/api/posts/1 ==&gt;http://jsonplaceholder.typicode.com/posts/1</code></li><li>这个时候就可以在本地环境请求后台接口了</li></ul><h2 id="三、axios的封装和API接口的统一管理"><a href="#三、axios的封装和API接口的统一管理" class="headerlink" title="三、axios的封装和API接口的统一管理"></a>三、axios的封装和API接口的统一管理</h2><ul><li><code>axios</code>的封装，主要是用来帮我们进行请求的拦截和响应的拦截。</li><li>在请求的拦截中我们可以携带<code>userToken</code>，<code>post</code>请求头、<code>qs</code>对<code>post</code>提交数据的序列化等- 在响应的拦截中，我们可以进行根据状态码来进行错误的统一处理等等。</li><li><code>axios</code>接口的统一管理，是做项目时必须的流程。这样可以方便我们管理我们的接口，在接口更新时我们不必再返回到我们的业务代码中去修改接口</li></ul><h2 id="四、UI库的按需加载"><a href="#四、UI库的按需加载" class="headerlink" title="四、UI库的按需加载"></a>四、UI库的按需加载</h2><blockquote><p>这里以vant的按需加载为例，演示vue中ui库怎样进行按需加载</p></blockquote><ul><li>安装： <code>cnpm i vant -S</code></li><li>安装<code>babel-plugin-import</code>插件使其按需加载：  <code>cnpm i babel-plugin-import -D</code></li><li>在 <code>.babelrc</code>文件中中添加插件配置 </li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">libraryDirectory &#123; </span><br><span class="line"></span><br><span class="line">    <span class="string">"plugins"</span>: [ </span><br><span class="line">        <span class="comment">// 这里是原来的代码部分</span></span><br><span class="line">        <span class="comment">// …………</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 这里是要我们配置的代码</span></span><br><span class="line">        [<span class="string">"import"</span>, </span><br><span class="line">            &#123; </span><br><span class="line">                <span class="string">"libraryName"</span>: <span class="string">"vant"</span>, </span><br><span class="line">                <span class="string">"libraryDirectory"</span>: <span class="string">"es"</span>, </span><br><span class="line">                <span class="string">"style"</span>: <span class="literal">true</span> </span><br><span class="line">            &#125;</span><br><span class="line">        ] </span><br><span class="line">    ] </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>在<code>main.js</code>中按需加载你需要的插件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 按需引入vant组件</span></span><br><span class="line"><span class="keyword">import</span> &#123;   </span><br><span class="line">    DatetimePicker,   </span><br><span class="line">    Button,   </span><br><span class="line">    List </span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'vant'</span>;</span><br></pre></td></tr></table></figure><blockquote><p>使用组件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用vant组件</span></span><br><span class="line">Vue.use(DatetimePicker)  </span><br><span class="line">    .use(Button)  </span><br><span class="line">    .use(List);</span><br></pre></td></tr></table></figure><blockquote><p>最后在在页面中使用：</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">van-button</span> <span class="attr">type</span>=<span class="string">"primary"</span>&gt;</span>按钮<span class="tag">&lt;/<span class="name">van-button</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="五、定时器问题"><a href="#五、定时器问题" class="headerlink" title="五、定时器问题"></a>五、定时器问题</h2><blockquote><p>在a页面写一个定时，让他每秒钟打印一个1，然后跳转到b页面，此时可以看到，定时器依然在执行。这样是非常消耗性能的</p></blockquote><p><strong>解决方案一</strong></p><blockquote><p>在data函数里面进行定义定时器名称</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;            </span><br><span class="line">    return &#123;                              </span><br><span class="line">        timer: null  // 定时器名称          </span><br><span class="line">    &#125;        </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><blockquote><p>然后这样使用定时器</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">this.timer = (() =&gt; &#123;</span><br><span class="line">    // 某些操作</span><br><span class="line">&#125;, 1000)</span><br></pre></td></tr></table></figure><blockquote><p>最后在<code>beforeDestroy()</code>生命周期内清除定时器</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">beforeDestroy() &#123;</span><br><span class="line">    clearInterval(<span class="keyword">this</span>.timer);        </span><br><span class="line">    <span class="keyword">this</span>.timer = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>方案1有两点不好的地方</p></blockquote><ul><li>它需要在这个组件实例中保存这个 timer，如果可以的话最好只有生命周期钩子可以访问到它。这并不算严重的问题，但是它可以被视为杂物。</li><li>我们的建立代码独立于我们的清理代码，这使得我们比较难于程序化的清理我们建立的所有东西</li></ul><p><strong>解决方案2</strong></p><blockquote><p>该方法是通过<code>$once</code>这个事件侦听器器在定义完定时器之后的位置来清除定时器。以下是完整代码</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> timer = setInterval(<span class="function"><span class="params">()</span> =&gt;</span>&#123;                    </span><br><span class="line">    <span class="comment">// 某些定时器操作                </span></span><br><span class="line">&#125;, <span class="number">500</span>);            </span><br><span class="line"><span class="comment">// 通过$once来监听定时器，在beforeDestroy钩子可以被清除。</span></span><br><span class="line"><span class="keyword">this</span>.$once(<span class="string">'hook:beforeDestroy'</span>, () =&gt; &#123;            </span><br><span class="line">    clearInterval(timer);                                    </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="六、rem文件的导入问题"><a href="#六、rem文件的导入问题" class="headerlink" title="六、rem文件的导入问题"></a>六、rem文件的导入问题</h2><blockquote><p>在做手机端时，适配是必须要处理的一个问题。例如，我们处理适配的方案就是通过写一个<code>rem.js</code>，原理很简单，就是根据网页尺寸计算<code>html</code>的<code>font-size</code>大小</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">; (<span class="function"><span class="keyword">function</span>(<span class="params">c, d</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> e = <span class="built_in">document</span>.documentElement || <span class="built_in">document</span>.body,</span><br><span class="line">    a = <span class="string">"orientationchange"</span> <span class="keyword">in</span> <span class="built_in">window</span> ? <span class="string">"orientationchange"</span>: <span class="string">"resize"</span>,</span><br><span class="line">    b = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> f = e.clientWidth;</span><br><span class="line">        e.style.fontSize = (f &gt;= <span class="number">750</span>) ? <span class="string">"100px"</span>: <span class="number">100</span> * (f / <span class="number">750</span>) + <span class="string">"px"</span></span><br><span class="line">    &#125;;</span><br><span class="line">    b();</span><br><span class="line">    c.addEventListener(a, b, <span class="literal">false</span>)</span><br><span class="line">&#125;)(<span class="built_in">window</span>);</span><br></pre></td></tr></table></figure><blockquote><p>在<code>main.js</code>中，直接<code>import &#39;./config/rem&#39;</code>导入即可。<code>import</code>的路径根据你的文件路径去填写</p></blockquote><h2 id="七、打包后生成很大的-map文件"><a href="#七、打包后生成很大的-map文件" class="headerlink" title="七、打包后生成很大的.map文件"></a>七、打包后生成很大的.map文件</h2><blockquote><p>项目打包后，代码都是经过压缩加密的，如果运行时报错，输出的错误信息无法准确得知是哪里的代码报错。 而生成的<code>.map</code>后缀的文件，就可以像未加密的代码一样，准确的输出是哪一行哪一列有错可以通过设置来不生成该类文件。但是我们在生成环境是不需要<code>.map</code>文件的，所以可以在打包时不生成这些文件</p></blockquote><ul><li>在<code>config/index.js</code>文件中，设置<code>productionSourceMap: false</code>,就可以不生成<code>.map</code>文件</li></ul><h2 id="八、fastClick的300ms延迟"><a href="#八、fastClick的300ms延迟" class="headerlink" title="八、fastClick的300ms延迟"></a>八、fastClick的300ms延迟</h2><blockquote><p>在<code>main.js</code>中引入<code>fastClick</code>和初始化</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> FastClick <span class="keyword">from</span> <span class="string">'fastclick'</span>; <span class="comment">// 引入插件</span></span><br><span class="line">FastClick.attach(<span class="built_in">document</span>.body); <span class="comment">// 使用 fastclick</span></span><br></pre></td></tr></table></figure><h2 id="九、路由懒加载（延迟加载）"><a href="#九、路由懒加载（延迟加载）" class="headerlink" title="九、路由懒加载（延迟加载）"></a>九、路由懒加载（延迟加载）</h2><blockquote><p>路由懒加载可以帮我们在进入首屏时不用加载过度的资源，从而减少首屏加载速度</p></blockquote><p><strong>非懒加载写法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Index <span class="keyword">from</span> <span class="string">'@/page/index/index'</span>;</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;  </span><br><span class="line">    routes: [    </span><br><span class="line">        &#123; </span><br><span class="line">            path: <span class="string">'/'</span>, </span><br><span class="line">            name: <span class="string">'Index'</span>,     </span><br><span class="line">            component: Index </span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>路由懒加载写法</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  routes: [    </span><br><span class="line">        &#123; </span><br><span class="line">            path: <span class="string">'/'</span>, </span><br><span class="line">            name: <span class="string">'Index'</span>, </span><br><span class="line">            component: <span class="function"><span class="params">resolve</span> =&gt;</span> <span class="built_in">require</span>([<span class="string">'@/view/index/index'</span>], resolve) </span><br><span class="line">        &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="十、开启gzip压缩代码"><a href="#十、开启gzip压缩代码" class="headerlink" title="十、开启gzip压缩代码"></a>十、开启gzip压缩代码</h2><blockquote><p><code>spa</code>这种单页应用，首屏由于一次性加载所有资源，所有首屏加载速度很慢。解决这个问题非常有效的手段之一就是前后端开启<code>gizp</code>（其他还有缓存、路由懒加载等等）。<code>gizp</code>其实就是帮我们减少文件体积，能压缩到<code>30%</code>左右，即<code>100k</code>的文件<code>gizp</code>后大约只有<code>30</code>k`</p></blockquote><ul><li><code>vue-cli</code>初始化的项目中，是默认有此配置的，只需要开启即可。但是需要先安装插件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i compression-webpack-plugin</span><br></pre></td></tr></table></figure><ul><li>在<code>config/index.js</code>中开启即可</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">build: &#123;</span><br><span class="line">    ………………</span><br><span class="line">    productionGzip: true, // false不开启gizp，true开启</span><br><span class="line">    ………………</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>这里前端进行的打包时的<code>gzip</code>，但是还需要后台服务器的配置。配置是比较简单的，配置几行代码就可以了</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、列表进入详情页传参&quot;&gt;&lt;a href=&quot;#一、列表进入详情页传参&quot; class=&quot;headerlink&quot; title=&quot;一、列表进入详情页传参&quot;&gt;&lt;/a&gt;一、列表进入详情页传参&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;例如商品列表页面前往商品详情页面，需要传一
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="Vue" scheme="http://blog.poetries.top/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>vue实例方法（十三)</title>
    <link href="http://blog.poetries.top/2018/08/28/vue-$vm-method-props/"/>
    <id>http://blog.poetries.top/2018/08/28/vue-$vm-method-props/</id>
    <published>2018-08-28T08:04:43.000Z</published>
    <updated>2018-08-31T08:54:59.928Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、Vue之实例属性"><a href="#一、Vue之实例属性" class="headerlink" title="一、Vue之实例属性"></a>一、Vue之实例属性</h2><p><img src="http://upload-images.jianshu.io/upload_images/1480597-464e2c77b92ade46.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p><code>Vue</code> 实例暴露了一些有用的实例属性与方法。这些属性与方法都有前缀 <code>$</code>，以便与代理的数据属性区分</p></blockquote><p><strong>组件树</strong></p><ul><li><code>$parent</code>：用来访问组件实例的父实例</li><li><code>$root</code>: 用来访问当前组件树的根实例</li><li><code>$children</code>:用来访问当前组件实例的直接子组件实例</li><li><code>$refs</code>:用来访问<code>v-ref</code>指令的子组件</li></ul><p><strong>DOM访问</strong></p><ul><li><code>$el</code>：用来挂载当前组件实例的<code>dom</code>元素</li><li><code>$els</code>：用来访问<code>$el</code>元素中使用了<code>v-el</code>指令的<code>DOM</code>元素</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app2"</span>&gt;</span></span><br><span class="line">    &#123;&#123; message &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm2 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">"#app2"</span>,</span></span><br><span class="line"><span class="undefined">        data:&#123;</span></span><br><span class="line"><span class="javascript">            message : <span class="string">"I am message."</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="javascript">    <span class="built_in">console</span>.log(vm2.$el);          <span class="comment">//vm2.$el === 原生js中document.getElementById("app2") </span></span></span><br><span class="line"><span class="javascript">    vm2.$el.style.color = <span class="string">"red"</span>;   <span class="comment">//变成红色</span></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>数据访问</strong></p><ul><li><code>$data</code>：用来访问组件实例观察的数据对象</li><li><code>$options</code>：用来访问组件实例化时的初始化选项对象</li></ul><p><strong>DOM方法的使用</strong></p><ul><li><code>$appendTo(elementOrSelector, callback)</code>：将<code>el</code>所指的<code>DOM</code>元素插入目标元素</li><li><code>$before(elementOrSelector, callback)</code>：将<code>el</code>所指的<code>DOM</code>元素或片段插入目标元素之前</li><li><code>$after(elementOrSelector, callback)</code>：将<code>el</code>所指的<code>DOM</code>元素或片段插入目标元素之后</li><li><code>$remove(callback)</code>：将<code>el</code>所指的<code>DOM</code>元素或片段从<code>DOM</code>中删除</li><li><code>$nextTick(callback)</code>：用来在下一次<code>DOM</code>更新循环后执行指定的回调函数</li></ul><p><strong>event方法的使用</strong></p><ul><li><p><strong>监听</strong></p><ul><li><code>$on(event, callback)</code>：监听实例的自定义事件</li><li><code>$once(event, callback)</code>：同上，但只能触发一次</li></ul></li><li><p><strong>触发</strong></p><ul><li><code>$dispatch(event, args)</code>：派发事件，先在当前实例触发，再沿父链一层层向上，对应的监听函数返回<code>false</code>停止</li><li><code>$broadcast(event, args)</code>：广播事件，遍历当前实例的<code>$children</code>，如果对应的监听函数返回false，就停止</li><li><code>$emit(event, args)</code>：触发事件</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"ap2"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; num &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"increase1"</span>&gt;</span> add <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"reduce2()"</span>&gt;</span> reduce2 <span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"offReduce()"</span>&gt;</span> off reduce <span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> ap2 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">"#ap2"</span>,</span></span><br><span class="line"><span class="undefined">        data:&#123;</span></span><br><span class="line"><span class="undefined">            num:5</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        methods:&#123;</span></span><br><span class="line"><span class="javascript">            increase1:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.num ++;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="javascript">    <span class="comment">// .$on定义事件 .$once定义只触发一次的事件</span></span></span><br><span class="line"><span class="javascript">    ap2.$on(<span class="string">"reduce"</span>,<span class="function"><span class="keyword">function</span> (<span class="params">diff</span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">        ap2.num -= diff ;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="javascript">    <span class="comment">// .$emit触发事件</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">reduce2</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        ap2.$emit(<span class="string">"reduce"</span>, <span class="number">2</span>);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="javascript">    <span class="comment">// .$off解除事件 解除后，定义的reduce事件将不再执行</span></span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">offReduce</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        ap2.$off(<span class="string">"reduce"</span>);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="二、实例方法"><a href="#二、实例方法" class="headerlink" title="二、实例方法"></a>二、实例方法</h2><h3 id="2-1-watch"><a href="#2-1-watch" class="headerlink" title="2.1 $.watch()"></a>2.1 $.watch()</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">var</span> data = &#123; <span class="attr">a</span>: <span class="number">1</span> &#125;</span><br><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#example'</span>,</span><br><span class="line">  data: data</span><br><span class="line">&#125;)</span><br><span class="line"> </span><br><span class="line">vm.$data === data <span class="comment">// -&gt; true</span></span><br><span class="line">vm.$el === <span class="built_in">document</span>.getElementById(<span class="string">'example'</span>) <span class="comment">// -&gt; true</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// $watch 是一个实例方法</span></span><br><span class="line">vm.$watch(<span class="string">'a'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">newVal, oldVal</span>) </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;)</span><br><span class="line">  <span class="comment">// 这个回调将在 `vm.a`  改变后调用</span></span><br></pre></td></tr></table></figure><h3 id="2-2-vm-nextTick"><a href="#2-2-vm-nextTick" class="headerlink" title="2.2 vm.$nextTick"></a>2.2 vm.$nextTick</h3><blockquote><p>将回调延迟到下次 <code>DOM</code> 更新循环之后执行。在修改数据之后立即使用它，然后等待 DOM 更新。它跟全局方法 <code>Vue.nextTick</code> 一样，不同的是回调的 <code>this</code> 自动绑定到调用它的实例上</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"vm.$destroy()"</span>&gt;</span>销毁实例 $destroy<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"vm.$forceUpdate()"</span>&gt;</span>刷新构造器 $forceUpdate<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">onclick</span>=<span class="string">"edit()"</span>&gt;</span>更新 $.nextTick(fn)<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> Header = Vue.extend(&#123;</span></span><br><span class="line"><span class="xml">        template:`<span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>`,</span></span><br><span class="line"><span class="javascript">        data:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">                message:<span class="string">"I am message"</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="javascript">        updated:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"updated 更新之后"</span>);</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="javascript">        destroyed:<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"destroy 销毁之后"</span>);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Header().$mount(<span class="string">"#app"</span>);</span></span><br><span class="line"><span class="undefined"> </span></span><br><span class="line"><span class="javascript">    <span class="function"><span class="keyword">function</span> <span class="title">edit</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        vm.message = <span class="string">"new message"</span>;     <span class="comment">//更新数据</span></span></span><br><span class="line"><span class="javascript">        vm.$nextTick(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;      <span class="comment">//更新完成后调用</span></span></span><br><span class="line"><span class="javascript">            <span class="built_in">console</span>.log(<span class="string">"更新完后，我被调用"</span>);</span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>放在<code>Vue.nextTick()</code>回调函数中的执行的应该是会对<code>DOM</code>进行操作的 <code>js</code>代码</p></blockquote><p><strong>什么时候需要用的Vue.nextTick()</strong></p><ul><li>你在<code>Vue</code>生命周期的<code>created()</code>钩子函数进行的<code>DOM</code>操作一定要放在<code>Vue.nextTick()</code>的回调函数中。原因是什么呢，原因是在<code>created()</code>钩子函数执行的时候<code>DOM</code> 其实并未进行任何渲染，而此时进行<code>DOM</code>操作无异于徒劳，所以此处一定要将<code>DOM</code>操作的js代码放进<code>Vue.nextTick()</code>的回调函数中。与之对应的就是<code>mounted</code>钩子函数，因为该钩子函数执行时所有的<code>DOM</code>挂载和渲染都已完成，此时在该钩子函数中进行任何<code>DOM</code>操作都不会有问题 。</li><li>在数据变化后要执行的某个操作，而这个操作需要使用随数据改变而改变的<code>DOM</code>结构的时候，这个操作都应该放进<code>Vue.nextTick()</code>的回调函数中</li><li>为了在数据变化之后等待 <code>Vue</code> 完成更新 <code>DOM</code> ，可以在数据变化之后立即使用 <code>Vue.nextTick(callback)</code> 。这样回调函数在 <code>DOM</code> 更新完成后就会调用</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、Vue之实例属性&quot;&gt;&lt;a href=&quot;#一、Vue之实例属性&quot; class=&quot;headerlink&quot; title=&quot;一、Vue之实例属性&quot;&gt;&lt;/a&gt;一、Vue之实例属性&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="Vue" scheme="http://blog.poetries.top/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>vue-axios封装请求（十二）</title>
    <link href="http://blog.poetries.top/2018/08/28/vue-axios/"/>
    <id>http://blog.poetries.top/2018/08/28/vue-axios/</id>
    <published>2018-08-28T07:35:32.000Z</published>
    <updated>2018-08-31T08:54:59.928Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、axios-简介"><a href="#一、axios-简介" class="headerlink" title="一、axios 简介"></a>一、axios 简介</h2><blockquote><p><code>axios</code> 是一个基于<code>Promise</code>用于浏览器和 <code>nodejs</code> 的 <code>HTTP</code> 客户端，它本身具有以下特征：</p></blockquote><ul><li>从浏览器中创建 <code>XMLHttpRequest</code></li><li>从 <code>node.js</code> 发出 <code>http</code> 请求</li><li>支持<code>Promise API</code></li><li>拦截请求和响应</li><li>转换请求和响应数据</li><li>取消请求</li><li>自动转换<code>JSON</code>数据</li><li>客户端支持防止<code>CSRF/XSRF</code></li></ul><h2 id="二、axios基础"><a href="#二、axios基础" class="headerlink" title="二、axios基础"></a>二、axios基础</h2><ul><li><code>axios.request（config）</code></li><li><code>axios.get（url [，config]）</code></li><li><code>axios.delete（url [，config]）</code></li><li><code>axios.head（url [，config]）</code></li><li><code>axios.options（url [，config]）</code></li><li><code>axios.post（url [，data [，config]]</code>）</li><li><code>axios.put（url [，data [，config]]）</code></li><li><code>axios.patch（url [，data [，config]]）</code></li></ul><h2 id="三、执行-GET-请求"><a href="#三、执行-GET-请求" class="headerlink" title="三、执行 GET 请求"></a>三、执行 GET 请求</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 向具有指定ID的用户发出请求</span></span><br><span class="line">axios.get(<span class="string">'/user?ID=12345'</span>)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;);</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 也可以通过 params 对象传递参数</span></span><br><span class="line">axios.get(<span class="string">'/user'</span>, &#123;</span><br><span class="line">    params: &#123;</span><br><span class="line">        ID: <span class="number">12345</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span> (<span class="params">response</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(response);</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="四、执行-POST-请求"><a href="#四、执行-POST-请求" class="headerlink" title="四、执行 POST 请求"></a>四、执行 POST 请求</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">axios.post(<span class="string">'/user'</span>, &#123;</span><br><span class="line">    userId:<span class="string">"123"</span></span><br><span class="line">&#125;,&#123;</span><br><span class="line">    headers:&#123;</span><br><span class="line">        token:<span class="string">"abc"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">.then(<span class="function"><span class="keyword">function</span> (<span class="params">res</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res);</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="keyword">function</span> (<span class="params">error</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="五、通过配置方式发送请求"><a href="#五、通过配置方式发送请求" class="headerlink" title="五、通过配置方式发送请求"></a>五、通过配置方式发送请求</h2><blockquote><p><code>get</code>请求是发送参数，在<code>params</code>中定义。而<code>POST</code>请求是发送<code>request body</code>,需要在<code>data</code>中定义</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// get 在params中定义</span></span><br><span class="line">axios(&#123;</span><br><span class="line">    url:<span class="string">"pakage.json"</span>,</span><br><span class="line">    method:<span class="string">"get"</span>,</span><br><span class="line">    params:&#123;</span><br><span class="line">        userId:<span class="string">"123"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    headers:&#123;</span><br><span class="line">        token:<span class="string">"http-test"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res.data);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// post 在data中定义</span></span><br><span class="line">axios(&#123;</span><br><span class="line">    url:<span class="string">"pakage.json"</span>,</span><br><span class="line">    method:<span class="string">"post"</span>,</span><br><span class="line">    data:&#123;</span><br><span class="line">        userId:<span class="string">"123"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    headers:&#123;</span><br><span class="line">        token:<span class="string">"http-test"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;).then(<span class="function"><span class="params">res</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(res.data);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="六、执行多个并发请求"><a href="#六、执行多个并发请求" class="headerlink" title="六、执行多个并发请求"></a>六、执行多个并发请求</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserAcount</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 返回一个promise对象</span></span><br><span class="line">    <span class="keyword">return</span> axios.get(<span class="string">"/user/1234"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getUserPermissions</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 返回一个promise对象</span></span><br><span class="line">    <span class="keyword">return</span> axios.get(<span class="string">"/user/1234/getUserPermissions"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//一次性返回两个接口</span></span><br><span class="line">axios.all([getUserAccount(),getUserPerssions()]).then(axios.spread(<span class="function">(<span class="params">acct, perms</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// spread展开两个返回的结果</span></span><br><span class="line">    <span class="comment">//两个请求现已完成</span></span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure><h2 id="七、全局拦截"><a href="#七、全局拦截" class="headerlink" title="七、全局拦截"></a>七、全局拦截</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">"app"</span>,</span><br><span class="line">    data:&#123;</span><br><span class="line">        msg:<span class="string">""</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 初始化生命周期的一个函数</span></span><br><span class="line">    mounted:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">     <span class="comment">//拦截请求之前</span></span><br><span class="line">       axios.interceptors.request.use(<span class="function"><span class="params">config</span>=&gt;</span>&#123;</span><br><span class="line">           <span class="comment">//这里做一些拦截操作,拦截用户的请求 请求之前做一些loading处理</span></span><br><span class="line">           <span class="keyword">return</span> config;</span><br><span class="line">       &#125;)</span><br><span class="line">       <span class="comment">//拦截响应之后处理</span></span><br><span class="line">       axios.interceptors.response.use(<span class="function"><span class="params">response</span>=&gt;</span>&#123;</span><br><span class="line">           <span class="comment">//这里做一些拦截操作,响应以后做什么，在返回数据</span></span><br><span class="line">           <span class="keyword">return</span> response;</span><br><span class="line">       &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    methods: &#123;</span><br><span class="line">        get: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        </span><br><span class="line">        &#125;,</span><br><span class="line">        post:<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">           </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="八、请求封装、异常统一处理"><a href="#八、请求封装、异常统一处理" class="headerlink" title="八、请求封装、异常统一处理"></a>八、请求封装、异常统一处理</h2><blockquote><p>vue中采用axios处理网络请求，避免请求接口重复代码，以及各种网络情况造成的异常情况的判断，采用axios请求封装和异常拦截操作</p></blockquote><h3 id="8-1-axios-请求封装"><a href="#8-1-axios-请求封装" class="headerlink" title="8.1 axios 请求封装"></a>8.1 axios 请求封装</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  引入axios文件包</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// POST 方法封装  (参数处理)</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> postRequest = <span class="function">(<span class="params">url, params</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> axios(&#123;</span><br><span class="line">    method: <span class="string">'post'</span>,</span><br><span class="line">    url: url,</span><br><span class="line">    data: params,</span><br><span class="line">    transformRequest: [<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">let</span> ret = <span class="string">''</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> it <span class="keyword">in</span> data) &#123;</span><br><span class="line">        ret += <span class="built_in">encodeURIComponent</span>(it) + <span class="string">'='</span> + <span class="built_in">encodeURIComponent</span>(data[it]) + <span class="string">'&amp;'</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> ret</span><br><span class="line">    &#125;],</span><br><span class="line">    headers: &#123;</span><br><span class="line">      <span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// POST 方法封装  (文件上传)</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> uploadFileRequest = <span class="function">(<span class="params">url, params</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> axios(&#123;</span><br><span class="line">    method: <span class="string">'post'</span>,</span><br><span class="line">    url: url,</span><br><span class="line">    data: params,</span><br><span class="line">    headers: &#123;</span><br><span class="line">      <span class="string">'Content-Type'</span>: <span class="string">'multipart/form-data'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  GET 方法封装</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> getRequest = <span class="function">(<span class="params">url</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> axios(&#123;</span><br><span class="line">    method: <span class="string">'get'</span>,</span><br><span class="line">    url: url</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  PUT 方法封装</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> putRequest = <span class="function">(<span class="params">url, params</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> axios(&#123;</span><br><span class="line">    method: <span class="string">'put'</span>,</span><br><span class="line">    url: url,</span><br><span class="line">    data: params,</span><br><span class="line">    transformRequest: [<span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">      <span class="keyword">let</span> ret = <span class="string">''</span></span><br><span class="line">      <span class="keyword">for</span> (<span class="keyword">let</span> it <span class="keyword">in</span> data) &#123;</span><br><span class="line">        ret += <span class="built_in">encodeURIComponent</span>(it) + <span class="string">'='</span> + <span class="built_in">encodeURIComponent</span>(data[it]) + <span class="string">'&amp;'</span></span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">return</span> ret</span><br><span class="line">    &#125;],</span><br><span class="line">    headers: &#123;</span><br><span class="line">      <span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded'</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//  DELETE 方法封装</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> deleteRequest = <span class="function">(<span class="params">url</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">return</span> axios(&#123;</span><br><span class="line">    method: <span class="string">'delete'</span>,</span><br><span class="line">    url: url</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-2-axios请求异常统一处理"><a href="#8-2-axios请求异常统一处理" class="headerlink" title="8.2 axios请求异常统一处理"></a>8.2 axios请求异常统一处理</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 引入依赖包</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></span><br><span class="line"><span class="keyword">import</span> &#123;Message&#125; <span class="keyword">from</span> <span class="string">'element-ui'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//  REQUEST 请求异常拦截</span></span><br><span class="line">axios.interceptors.request.use(<span class="function"><span class="params">config</span>=&gt;</span> &#123;</span><br><span class="line"> <span class="comment">//==========  所有请求之前都要执行的操作  ==============</span></span><br><span class="line">  <span class="keyword">return</span> config;</span><br><span class="line">&#125;, err=&gt; &#123;</span><br><span class="line"> <span class="comment">//==================  错误处理  ====================</span></span><br><span class="line">  Message.error(&#123;<span class="attr">message</span>: <span class="string">'请求超时!'</span>&#125;);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(err);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">//  RESPONSE 响应异常拦截</span></span><br><span class="line">axios.interceptors.response.use(<span class="function"><span class="params">data</span>=&gt;</span> &#123;</span><br><span class="line"><span class="comment">//==============  所有请求完成后都要执行的操作  ==================</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第一种方式</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 根据返回的code值来做不同的处理（和后端约定）</span></span><br><span class="line">    <span class="keyword">switch</span> (data.code) &#123;</span><br><span class="line">        <span class="keyword">case</span> <span class="string">'0'</span>:</span><br><span class="line">            <span class="comment">// exp: 修复iPhone 6+ 微信点击返回出现页面空白的问题</span></span><br><span class="line">            <span class="keyword">if</span> (isIOS()) &#123;</span><br><span class="line">                <span class="comment">// 异步以保证数据已渲染到页面上</span></span><br><span class="line">                setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">                    <span class="comment">// 通过滚动强制浏览器进行页面重绘</span></span><br><span class="line">                    <span class="built_in">document</span>.body.scrollTop += <span class="number">1</span></span><br><span class="line">                &#125;, <span class="number">0</span>)</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 这一步保证数据返回，如果没有return则会走接下来的代码，不是未登录就是报错</span></span><br><span class="line">            <span class="keyword">return</span> data</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 需要重新登录</span></span><br><span class="line">        <span class="keyword">case</span> <span class="string">'SHIRO_E5001'</span>:</span><br><span class="line">            <span class="comment">// 微信生产环境下授权登录</span></span><br><span class="line">            <span class="keyword">if</span> (isWeChat() &amp;&amp; IS_PRODUCTION) &#123;</span><br><span class="line">                axios.get(apis.common.wechat.authorizeUrl).then(<span class="function">(<span class="params">&#123; result &#125;</span>) =&gt;</span> &#123;</span><br><span class="line">                    location.replace(global.decodeURIComponent(result))</span><br><span class="line">                &#125;)</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">// 否则跳转到h5登录并带上跳转路由</span></span><br><span class="line">                <span class="keyword">const</span> search = encodeSearchParams(&#123;</span><br><span class="line">                    next: location.href,</span><br><span class="line">                &#125;)</span><br><span class="line"></span><br><span class="line">                location.replace(<span class="string">`/user/login`</span>)</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">// 不显示提示消息</span></span><br><span class="line">            data.description = <span class="string">''</span></span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">default</span>:</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 若不是正确的返回code，且已经登录，就抛出错误</span></span><br><span class="line">    <span class="keyword">const</span> err = <span class="keyword">new</span> <span class="built_in">Error</span>(data.description)</span><br><span class="line"></span><br><span class="line">    err.data = data</span><br><span class="line">    err.response = response</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 第二种方式，仅对200和error状态处理</span></span><br><span class="line">  <span class="keyword">if</span> (data.status &amp;&amp; data.status == <span class="number">200</span> &amp;&amp; data.data.status == <span class="string">'error'</span>) &#123;</span><br><span class="line">    Message.error(&#123;<span class="attr">message</span>: data.data.msg&#125;);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> data;</span><br><span class="line">&#125;, err=&gt; &#123;</span><br><span class="line"><span class="comment">//==============  错误处理  ====================</span></span><br><span class="line">   <span class="keyword">if</span> (err &amp;&amp; err.response) &#123;</span><br><span class="line">        <span class="keyword">switch</span> (err.response.status) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">400</span>: err.message = <span class="string">'请求错误(400)'</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">401</span>: err.message = <span class="string">'未授权，请重新登录(401)'</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">403</span>: err.message = <span class="string">'拒绝访问(403)'</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">404</span>: err.message = <span class="string">'请求出错(404)'</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">408</span>: err.message = <span class="string">'请求超时(408)'</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">500</span>: err.message = <span class="string">'服务器错误(500)'</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">501</span>: err.message = <span class="string">'服务未实现(501)'</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">502</span>: err.message = <span class="string">'网络错误(502)'</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">503</span>: err.message = <span class="string">'服务不可用(503)'</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">504</span>: err.message = <span class="string">'网络超时(504)'</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">505</span>: err.message = <span class="string">'HTTP版本不受支持(505)'</span>; <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>: err.message = <span class="string">`连接出错(<span class="subst">$&#123;err.response.status&#125;</span>)!`</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        err.message = <span class="string">'连接服务器失败!'</span></span><br><span class="line">    &#125;</span><br><span class="line">  Message.err( &#123;<span class="attr">message</span>: err.message &#125; )</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>请求出错的时候执行的是：<code>Promise.resolve(err)</code>;，而不是<code>Promise.reject(err)</code>;，这样无论请求成功还是失败，在成功的回调中都能收到通知</p></blockquote><h3 id="8-3-vue-项目中使用该方法"><a href="#8-3-vue-项目中使用该方法" class="headerlink" title="8.3 vue 项目中使用该方法"></a>8.3 vue 项目中使用该方法</h3><blockquote><p>在main.js中导入所有请求方法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  导入所有请求方法</span></span><br><span class="line"><span class="keyword">import</span> &#123;getRequest,postRequest,deleteRequest,putRequest&#125; <span class="keyword">from</span> <span class="string">'./utils/api'</span></span><br></pre></td></tr></table></figure><blockquote><p>将请求方法添加至 <code>Vue.prototype</code> 上</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  向VUE的原型上添加请求方法</span></span><br><span class="line">Vue.prototype.getRequest = getRequest;</span><br><span class="line">Vue.prototype.postRequest = postRequest;</span><br><span class="line">Vue.prototype.deleteRequest = deleteRequest;</span><br><span class="line">Vue.prototype.putRequest = putRequest;</span><br></pre></td></tr></table></figure><blockquote><p>发送请求（请求方法的调用）</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  发送网络请求</span></span><br><span class="line"><span class="keyword">this</span>.postRequest(<span class="string">'/login'</span>, &#123;userName，password&#125;).then(<span class="function"><span class="params">resp</span>=&gt;</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="九、接口封装处理"><a href="#九、接口封装处理" class="headerlink" title="九、接口封装处理"></a>九、接口封装处理</h2><blockquote><p><code>vue</code>中<code>Axios</code>的封装与<code>API</code>接口的管理详解</p></blockquote><h3 id="9-1-axios的封装"><a href="#9-1-axios的封装" class="headerlink" title="9.1 axios的封装"></a>9.1 axios的封装</h3><blockquote><p>在<code>vue</code>项目中，和后台交互获取数据这块，我们通常使用的是<code>axios</code>库，它是基于<code>promise</code>的<code>http</code>库，可运行在浏览器端和<code>node.js</code>中。他有很多优秀的特性，例如拦截请求和响应、取消请求、转换<code>json</code>、客户端防御<code>XSRF</code>等</p></blockquote><ul><li>一般我会在项目的<code>src</code>目录中，新建一个<code>request</code>文件夹，然后在里面新建一个<code>http.js</code>和一个<code>api.js</code>文件。<code>http.js</code>文件用来封装我们的<code>axios</code>，<code>api.js</code>用来统一管理我们的接口</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在http.js中引入axios</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>; <span class="comment">// 引入axios</span></span><br><span class="line"><span class="keyword">import</span> QS <span class="keyword">from</span> <span class="string">'qs'</span>; <span class="comment">// 引入qs模块，用来序列化post类型的数据，后面会提到</span></span><br><span class="line"><span class="comment">// vant的toast提示框组件，大家可根据自己的ui组件更改。</span></span><br><span class="line"><span class="keyword">import</span> &#123; Toast &#125; <span class="keyword">from</span> <span class="string">'vant'</span>;</span><br></pre></td></tr></table></figure><h3 id="9-2-环境的切换"><a href="#9-2-环境的切换" class="headerlink" title="9.2 环境的切换"></a>9.2 环境的切换</h3><blockquote><p>我们的项目环境可能有开发环境、测试环境和生产环境。我们通过<code>node</code>的环境变量来匹配我们的默认的接口<code>url</code>前缀。<code>axios.defaults.baseURL</code>可以设置<code>axios</code>的默认请求地址就不多说了</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 环境的切换</span></span><br><span class="line"><span class="keyword">if</span> (process.env.NODE_ENV == <span class="string">'development'</span>) &#123; </span><br><span class="line"> axios.defaults.baseURL = <span class="string">'https://www.baidu.com'</span>;&#125; </span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (process.env.NODE_ENV == <span class="string">'debug'</span>) &#123; </span><br><span class="line"> axios.defaults.baseURL = <span class="string">'https://www.ceshi.com'</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (process.env.NODE_ENV == <span class="string">'production'</span>) &#123; </span><br><span class="line"> axios.defaults.baseURL = <span class="string">'https://www.production.com'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-3-设置请求超时"><a href="#9-3-设置请求超时" class="headerlink" title="9.3 设置请求超时"></a>9.3 设置请求超时</h3><blockquote><p>通过<code>axios.defaults.timeout</code>设置默认的请求超时时间。例如超过了10s，就会告知用户当前请求超时，请刷新等</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axios.defaults.timeout = 10000;</span><br></pre></td></tr></table></figure><blockquote><p><code>post</code>请求头的设置<code>post</code>请求的时候，我们需要加上一个请求头，所以可以在这里进行一个默认的设置，即设置<code>post</code>的请求头为<code>application/x-www-form-urlencoded;charset=UTF-8</code></p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">axios.defaults.headers.post[&apos;Content-Type&apos;] = &apos;application/x-www-form-urlencode</span><br></pre></td></tr></table></figure><h3 id="9-4-请求拦截"><a href="#9-4-请求拦截" class="headerlink" title="9.4 请求拦截"></a>9.4 请求拦截</h3><blockquote><p>我们在发送请求前可以进行一个请求的拦截，为什么要拦截呢，我们拦截请求是用来做什么的呢？比如，有些请求是需要用户登录之后才能访问的，或者post请求的时候，我们需要序列化我们提交的数据。这时候，我们可以在请求被发送之前进行一个拦截，从而进行我们想要的操作</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 先导入vuex,因为我们要使用到里面的状态对象</span></span><br><span class="line"><span class="comment">// vuex的路径根据自己的路径去写</span></span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'@/store/index'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求拦截器axios.interceptors.request.use( </span></span><br><span class="line"> config =&gt; &#123; </span><br><span class="line"> <span class="comment">// 每次发送请求之前判断vuex中是否存在token </span></span><br><span class="line"> <span class="comment">// 如果存在，则统一在http请求的header都加上token，这样后台根据token判断你的登录情况</span></span><br><span class="line"> <span class="comment">// 即使本地存在token，也有可能token是过期的，所以在响应拦截器中要对返回状态进行判断 </span></span><br><span class="line"> <span class="keyword">const</span> token = store.state.token; </span><br><span class="line"> token &amp;&amp; (config.headers.Authorization = token); </span><br><span class="line"> <span class="keyword">return</span> config; </span><br><span class="line"> &#125;, </span><br><span class="line"> error =&gt; &#123; </span><br><span class="line"> <span class="keyword">return</span> <span class="built_in">Promise</span>.error(error); </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>一般是在登录完成之后，将用户的<code>token</code>通过<code>localStorage</code>或者<code>cookie</code>存在本地，然后用户每次在进入页面的时候（即在<code>main.js</code>中），会首先从本地存储中读取<code>token</code>，如果<code>token</code>存在说明用户已经登陆过，则更新vuex中的token状态。然后，在每次请求接口的时候，都会在请求的<code>header</code>中携带<code>token</code>，后台人员就可以根据你携带的<code>token</code>来判断你的登录是否过期，如果没有携带，则说明没有登录过。这时候或许有些小伙伴会有疑问了，就是每个请求都携带<code>token</code>，那么要是一个页面不需要用户登录就可以访问的怎么办呢？其实，你前端的请求可以携带<code>token</code>，但是后台可以选择不接收啊！</p></blockquote><h3 id="9-5-响应的拦截"><a href="#9-5-响应的拦截" class="headerlink" title="9.5 响应的拦截"></a>9.5 响应的拦截</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">axios.interceptors.response.use( </span><br><span class="line"> response =&gt; &#123; </span><br><span class="line"> <span class="comment">// 如果返回的状态码为200，说明接口请求成功，可以正常拿到数据 </span></span><br><span class="line"> <span class="comment">// 否则的话抛出错误</span></span><br><span class="line"> <span class="keyword">if</span> (response.status === <span class="number">200</span>) &#123;  </span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(response); </span><br><span class="line"> &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(response); </span><br><span class="line"> &#125; </span><br><span class="line"> &#125;, </span><br><span class="line"> <span class="comment">// 服务器状态码不是2开头的的情况</span></span><br><span class="line"> <span class="comment">// 这里可以跟你们的后台开发人员协商好统一的错误状态码 </span></span><br><span class="line"> <span class="comment">// 然后根据返回的状态码进行一些操作，例如登录过期提示，错误提示等等</span></span><br><span class="line"> <span class="comment">// 下面列举几个常见的操作，其他需求可自行扩展</span></span><br><span class="line"> error =&gt; &#123;  </span><br><span class="line"> <span class="keyword">if</span> (error.response.status) &#123;  </span><br><span class="line">  <span class="keyword">switch</span> (error.response.status) &#123;  </span><br><span class="line">  <span class="comment">// 401: 未登录</span></span><br><span class="line">  <span class="comment">// 未登录则跳转登录页面，并携带当前页面的路径</span></span><br><span class="line">  <span class="comment">// 在登录成功后返回当前页面，这一步需要在登录页操作。  </span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">401</span>:   </span><br><span class="line">   router.replace(&#123;   </span><br><span class="line">   path: <span class="string">'/login'</span>,   </span><br><span class="line">   query: &#123; </span><br><span class="line">    redirect: router.currentRoute.fullPath </span><br><span class="line">   &#125;</span><br><span class="line">   &#125;);</span><br><span class="line">   <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 403 token过期</span></span><br><span class="line">  <span class="comment">// 登录过期对用户进行提示</span></span><br><span class="line">  <span class="comment">// 清除本地token和清空vuex中token对象</span></span><br><span class="line">  <span class="comment">// 跳转登录页面  </span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">403</span>:</span><br><span class="line">   Toast(&#123;</span><br><span class="line">   message: <span class="string">'登录过期，请重新登录'</span>,</span><br><span class="line">   duration: <span class="number">1000</span>,</span><br><span class="line">   forbidClick: <span class="literal">true</span></span><br><span class="line">   &#125;);</span><br><span class="line">   <span class="comment">// 清除token</span></span><br><span class="line">   localStorage.removeItem(<span class="string">'token'</span>);</span><br><span class="line">   store.commit(<span class="string">'loginSuccess'</span>, <span class="literal">null</span>);</span><br><span class="line">   <span class="comment">// 跳转登录页面，并将要浏览的页面fullPath传过去，登录成功后跳转需要访问的页面 </span></span><br><span class="line">   setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;   </span><br><span class="line">   router.replace(&#123;    </span><br><span class="line">    path: <span class="string">'/login'</span>,    </span><br><span class="line">    query: &#123; </span><br><span class="line">    redirect: router.currentRoute.fullPath </span><br><span class="line">    &#125;   </span><br><span class="line">   &#125;);   </span><br><span class="line">   &#125;, <span class="number">1000</span>);   </span><br><span class="line">   <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 404请求不存在</span></span><br><span class="line">  <span class="keyword">case</span> <span class="number">404</span>:</span><br><span class="line">   Toast(&#123;</span><br><span class="line">   message: <span class="string">'网络请求不存在'</span>,</span><br><span class="line">   duration: <span class="number">1500</span>,</span><br><span class="line">   forbidClick: <span class="literal">true</span></span><br><span class="line">   &#125;);</span><br><span class="line">   <span class="keyword">break</span>;</span><br><span class="line">  <span class="comment">// 其他错误，直接抛出错误提示</span></span><br><span class="line">  <span class="keyword">default</span>:</span><br><span class="line">   Toast(&#123;</span><br><span class="line">   message: error.response.data.message,</span><br><span class="line">   duration: <span class="number">1500</span>,</span><br><span class="line">   forbidClick: <span class="literal">true</span></span><br><span class="line">   &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error.response);</span><br><span class="line"> &#125;</span><br><span class="line"> &#125; </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>响应拦截器很好理解，就是服务器返回给我们的数据，我们在拿到之前可以对他进行一些处理。例如上面的思想：如果后台返回的状态码是200，则正常返回数据，否则的根据错误的状态码类型进行一些我们需要的错误，其实这里主要就是进行了错误的统一处理和没登录或登录过期后调整登录页的一个操作</p></blockquote><ul><li>要注意的是，上面的<code>Toast()</code>方法，是我引入的<code>vant</code>库中的<code>toast</code>轻提示组件，你根据你的<code>ui</code>库，对应使用你的一个提示组件</li></ul><h3 id="9-6-封装get方法和post方法"><a href="#9-6-封装get方法和post方法" class="headerlink" title="9.6 封装get方法和post方法"></a>9.6 封装get方法和post方法</h3><blockquote><p>我们常用的<code>ajax</code>请求方法有<code>get</code>、<code>post</code>、<code>put</code>等方法。<code>axios</code>对应的也有很多类似的方法，不清楚的可以看下文档。但是为了简化我们的代码，我们还是要对其进行一个简单的封装。下面我们主要封装两个方法：<code>get</code>和<code>post</code></p></blockquote><ul><li><code>get</code>方法：我们通过定义一个<code>get</code>函数，<code>get</code>函数有两个参数，第一个参数表示我们要请求的<code>url</code>地址，第二个参数是我们要携带的请求参数。<code>get</code>函数返回一个<code>promise</code>对象，当<code>axios</code>其请求成功时<code>resolve</code>服务器返回值，请求失败时<code>reject</code>错误值。最后通过<code>export</code>抛出<code>get</code>函数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * get方法，对应get请求</span></span><br><span class="line"><span class="comment"> * @param &#123;String&#125; url [请求的url地址]</span></span><br><span class="line"><span class="comment"> * @param &#123;Object&#125; params [请求时携带的参数]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">url, params</span>)</span>&#123; </span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span>&#123; </span><br><span class="line"> axios.get(url, &#123;  </span><br><span class="line">  params: params </span><br><span class="line"> &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  resolve(res.data);</span><br><span class="line"> &#125;).catch(<span class="function"><span class="params">err</span> =&gt;</span>&#123;</span><br><span class="line">  reject(err.data) </span><br><span class="line"> &#125;) </span><br><span class="line">&#125;);&#125;</span><br></pre></td></tr></table></figure><ul><li><code>post</code>方法：原理同<code>get</code>基本一样，但是要注意的是，<code>post</code>方法必须要使用对提交从参数对象进行序列化的操作，所以这里我们通过<code>node</code>的<code>qs</code>模块来序列化我们的参数。这个很重要，如果没有序列化操作，后台是拿不到你提交的数据的</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * post方法，对应post请求 </span></span><br><span class="line"><span class="comment"> * @param &#123;String&#125; url [请求的url地址] </span></span><br><span class="line"><span class="comment"> * @param &#123;Object&#125; params [请求时携带的参数] </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span> <span class="function"><span class="keyword">function</span> <span class="title">post</span>(<span class="params">url, params</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function">(<span class="params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">  axios.post(url, QS.stringify(params))</span><br><span class="line"> .then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  resolve(res.data);</span><br><span class="line"> &#125;)</span><br><span class="line"> .catch(<span class="function"><span class="params">err</span> =&gt;</span>&#123;</span><br><span class="line">  reject(err.data)</span><br><span class="line"> &#125;)</span><br><span class="line"> &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p><code>axios.get()</code>方法和<code>axios.post()</code>在提交数据时参数的书写方式还是有区别的。区别就是，<code>get</code>的第二个参数是一个<code>{}</code>，然后这个对象的<code>params</code>属性值是一个参数对象的。而<code>post</code>的第二个参数就是一个参数对象</p></blockquote><h3 id="9-7-api的统一管理"><a href="#9-7-api的统一管理" class="headerlink" title="9.7 api的统一管理"></a>9.7 api的统一管理</h3><blockquote><p>首先我们在<code>api.js</code>中引入我们封装的<code>get</code>和<code>post</code>方法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * api接口统一管理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> &#123; get, post &#125; <span class="keyword">from</span> <span class="string">'./http'</span></span><br></pre></td></tr></table></figure><p>在<code>api.js</code>中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export const apiAddress = param =&gt; post(&apos;api/v1/users&apos;,param)</span><br></pre></td></tr></table></figure><p>在我们的页面中可以这样调用我们的<code>api</code>接口</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; apiAddress &#125; <span class="keyword">from</span> <span class="string">'@/request/api'</span>;<span class="comment">// 导入我们的api接口</span></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;  </span><br><span class="line"> name: <span class="string">'Address'</span>, </span><br><span class="line"> created () &#123;</span><br><span class="line">  <span class="keyword">this</span>.onLoad();</span><br><span class="line"> &#125;,</span><br><span class="line"> methods: &#123;   </span><br><span class="line">  <span class="comment">// 获取数据   </span></span><br><span class="line">  onLoad() &#123;</span><br><span class="line">   <span class="comment">// 调用api接口，并且提供了两个参数    </span></span><br><span class="line">   apiAddress(&#123;     </span><br><span class="line">    type: <span class="number">0</span>,     </span><br><span class="line">    sort: <span class="number">1</span>    </span><br><span class="line">   &#125;).then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="comment">// 获取数据成功后的其他操作</span></span><br><span class="line">    ………………    </span><br><span class="line">   &#125;)   </span><br><span class="line">  &#125;  </span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="9-8-完整封装代码"><a href="#9-8-完整封装代码" class="headerlink" title="9.8 完整封装代码"></a>9.8 完整封装代码</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**axios封装</span></span><br><span class="line"><span class="comment"> * 请求拦截、相应拦截、错误统一处理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span>;</span><br><span class="line"><span class="keyword">import</span> QS <span class="keyword">from</span> <span class="string">'qs'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">Toast</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">from</span> <span class="string">'vant'</span>;</span><br><span class="line"><span class="keyword">import</span> store <span class="keyword">from</span> <span class="string">'../store/index'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 环境的切换</span></span><br><span class="line"><span class="keyword">if</span> (process.env.NODE_ENV == <span class="string">'development'</span>) &#123;</span><br><span class="line">axios.defaults.baseURL = <span class="string">'/api'</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (process.env.NODE_ENV == <span class="string">'debug'</span>) &#123;</span><br><span class="line">axios.defaults.baseURL = <span class="string">''</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (process.env.NODE_ENV == <span class="string">'production'</span>) &#123;</span><br><span class="line">axios.defaults.baseURL = <span class="string">'http://api.123dailu.com/'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求超时时间</span></span><br><span class="line">axios.defaults.timeout = <span class="number">10000</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// post请求头</span></span><br><span class="line">axios.defaults.headers.post[<span class="string">'Content-Type'</span>] = <span class="string">'application/x-www-form-urlencoded;charset=UTF-8'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 请求拦截器</span></span><br><span class="line">axios.interceptors.request.use(</span><br><span class="line">config = &gt; &#123;</span><br><span class="line"><span class="comment">// 每次发送请求之前判断是否存在token，如果存在，则统一在http请求的header都加上token，不用每次请求都手动添加了</span></span><br><span class="line"><span class="comment">// 即使本地存在token，也有可能token是过期的，所以在响应拦截器中要对返回状态进行判断</span></span><br><span class="line"><span class="keyword">const</span> token = store.state.token;</span><br><span class="line">token &amp;&amp; (config.headers.Authorization = token);</span><br><span class="line"><span class="keyword">return</span> config;</span><br><span class="line">&#125;, error = &gt; &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Promise</span>.error(error);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 响应拦截器</span></span><br><span class="line">axios.interceptors.response.use(</span><br><span class="line">response = &gt; &#123;</span><br><span class="line"><span class="keyword">if</span> (response.status === <span class="number">200</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(response);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Promise</span>.reject(response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;,</span><br><span class="line"><span class="comment">// 服务器状态码不是200的情况 </span></span><br><span class="line">error = &gt; &#123;</span><br><span class="line"><span class="keyword">if</span> (error.response.status) &#123;</span><br><span class="line"><span class="keyword">switch</span> (error.response.status) &#123;</span><br><span class="line"><span class="comment">// 401: 未登录    </span></span><br><span class="line"><span class="comment">// 未登录则跳转登录页面，并携带当前页面的路径    </span></span><br><span class="line"><span class="comment">// 在登录成功后返回当前页面，这一步需要在登录页操作。    </span></span><br><span class="line"><span class="keyword">case</span> <span class="number">401</span>:</span><br><span class="line">router.replace(&#123;</span><br><span class="line">path: <span class="string">'/login'</span>,</span><br><span class="line">query: &#123;</span><br><span class="line">redirect: router.currentRoute.fullPath</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="comment">// 403 token过期    </span></span><br><span class="line"><span class="comment">// 登录过期对用户进行提示    </span></span><br><span class="line"><span class="comment">// 清除本地token和清空vuex中token对象    </span></span><br><span class="line"><span class="comment">// 跳转登录页面    </span></span><br><span class="line"><span class="keyword">case</span> <span class="number">403</span>:</span><br><span class="line">Toast(&#123;</span><br><span class="line">message: <span class="string">'登录过期，请重新登录'</span>,</span><br><span class="line">duration: <span class="number">1000</span>,</span><br><span class="line">forbidClick: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 清除token     </span></span><br><span class="line">localStorage.removeItem(<span class="string">'token'</span>);</span><br><span class="line">store.commit(<span class="string">'loginSuccess'</span>, <span class="literal">null</span>);</span><br><span class="line"><span class="comment">// 跳转登录页面，并将要浏览的页面fullPath传过去，登录成功后跳转需要访问的页面</span></span><br><span class="line">setTimeout(() = &gt; &#123;</span><br><span class="line">router.replace(&#123;</span><br><span class="line">path: <span class="string">'/login'</span>,</span><br><span class="line">query: &#123;</span><br><span class="line">redirect: router.currentRoute.fullPath</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">&#125;, <span class="number">1000</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="comment">// 404请求不存在    </span></span><br><span class="line"><span class="keyword">case</span> <span class="number">404</span>:</span><br><span class="line">Toast(&#123;</span><br><span class="line">message: <span class="string">'网络请求不存在'</span>,</span><br><span class="line">duration: <span class="number">1500</span>,</span><br><span class="line">forbidClick: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="comment">// 其他错误，直接抛出错误提示    </span></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">Toast(&#123;</span><br><span class="line">message: error.response.data.message,</span><br><span class="line">duration: <span class="number">1500</span>,</span><br><span class="line">forbidClick: <span class="literal">true</span></span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error.response);</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * get方法，对应get请求</span></span><br><span class="line"><span class="comment"> * @param &#123;String&#125; url [请求的url地址]</span></span><br><span class="line"><span class="comment"> * @param &#123;Object&#125; params [请求时携带的参数]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">get</span>(<span class="params">url, params</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>((resolve, reject) = &gt; &#123;</span><br><span class="line">axios.get(url, &#123;</span><br><span class="line">params: params</span><br><span class="line">&#125;).then(res = &gt; &#123;</span><br><span class="line">resolve(res.data);</span><br><span class="line">&#125;).</span><br><span class="line"><span class="keyword">catch</span> (err = &gt; &#123;</span><br><span class="line">reject(err.data)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/** </span></span><br><span class="line"><span class="comment"> * post方法，对应post请求</span></span><br><span class="line"><span class="comment"> * @param &#123;String&#125; url [请求的url地址]</span></span><br><span class="line"><span class="comment"> * @param &#123;Object&#125; params [请求时携带的参数]</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">export</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">post</span>(<span class="params">url, params</span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>((resolve, reject) = &gt; &#123;</span><br><span class="line">axios.post(url, QS.stringify(params)).then(res = &gt; &#123;</span><br><span class="line">resolve(res.data);</span><br><span class="line">&#125;).</span><br><span class="line"><span class="keyword">catch</span> (err = &gt; &#123;</span><br><span class="line">reject(err.data)</span><br><span class="line">&#125;)</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、axios-简介&quot;&gt;&lt;a href=&quot;#一、axios-简介&quot; class=&quot;headerlink&quot; title=&quot;一、axios 简介&quot;&gt;&lt;/a&gt;一、axios 简介&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;&lt;code&gt;axios&lt;/code&gt; 是一个基于&lt;
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="Vue" scheme="http://blog.poetries.top/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>vue路由（十一）</title>
    <link href="http://blog.poetries.top/2018/08/28/vue-router/"/>
    <id>http://blog.poetries.top/2018/08/28/vue-router/</id>
    <published>2018-08-28T07:30:32.000Z</published>
    <updated>2018-08-31T08:54:59.928Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、路由基础介绍"><a href="#一、路由基础介绍" class="headerlink" title="一、路由基础介绍"></a>一、路由基础介绍</h2><h3 id="1-1-什么是前端路由"><a href="#1-1-什么是前端路由" class="headerlink" title="1.1 什么是前端路由"></a>1.1 什么是前端路由</h3><ul><li>路由是根据不同的<code>url</code>地址展示不同的内容或页面</li><li>前端路由就是把不同的路由对应不同的内容或页面的任务交给前端来做，之前是通过服务端根据<code>url</code>的不同返回不同的页面实现的</li></ul><h3 id="1-2-什么时候使用前端路由"><a href="#1-2-什么时候使用前端路由" class="headerlink" title="1.2 什么时候使用前端路由"></a>1.2 什么时候使用前端路由</h3><ul><li>在单页面应用，大部分结构不变，只改变内容的使用</li></ul><h3 id="1-3-前端路由优点、缺点"><a href="#1-3-前端路由优点、缺点" class="headerlink" title="1.3 前端路由优点、缺点"></a>1.3 前端路由优点、缺点</h3><ul><li><strong>优点</strong>：<ul><li>用户体验好，不需要每次都从服务器全部获取，快速展现给用户</li></ul></li><li><strong>缺点</strong>：<ul><li>不利于<code>SEO</code></li><li>使用浏览器的前进，后退键的时候会重新发送请求，没有合理的利用缓存</li><li>单页面无法记住之前滚动的位置，无法再前进，后退的时候记住滚动的位置</li></ul></li></ul><h2 id="二、vue-router用来构建SPA"><a href="#二、vue-router用来构建SPA" class="headerlink" title="二、vue-router用来构建SPA"></a>二、vue-router用来构建SPA</h2><h3 id="2-1-开始"><a href="#2-1-开始" class="headerlink" title="2.1 开始"></a>2.1 开始</h3><blockquote><p>在你的文件夹下的 <code>src</code> 文件夹下的 <code>main.js</code> 文件内写入以下代码</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> VueRouter <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"></span><br><span class="line">Vue.use(VueRouter)</span><br></pre></td></tr></table></figure><blockquote><ul><li><code>vue-router</code>其实就是对<code>history</code>的封装</li><li>地址后面跟<code>#</code>其实就是用了<code>hash</code></li></ul></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--定义模版--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"a"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        第一个router</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span> <span class="attr">id</span>=<span class="string">"b"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">        第二个router</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> routes = [</span><br><span class="line">    &#123;</span><br><span class="line">        path:<span class="string">"/one"</span>,</span><br><span class="line"></span><br><span class="line">        component:&#123;<span class="attr">template</span>:<span class="string">"#a"</span>&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path:<span class="string">"/two"</span>,</span><br><span class="line">        component:&#123;<span class="attr">template</span>:<span class="string">"#b"</span>&#125;</span><br><span class="line">    &#125;,</span><br><span class="line">];</span><br><span class="line"><span class="comment">// 定义路由组件</span></span><br><span class="line"><span class="keyword">var</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">    routes</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 定义路由</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el:<span class="string">"#box"</span>,</span><br><span class="line">    router</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 创建和挂载实例</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"box"</span>&gt;</span> </span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/one"</span>&gt;</span>One<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/two"</span>&gt;</span>Two<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>&lt; router-link &gt;</code> 默认会被渲染成一个 <code>&lt;a&gt;</code> 标签 <code>to=&quot;&quot;</code>为我们定义的路由</li><li><code>&lt; router-view &gt;</code> 路由匹配到的组件将渲染在这里</li></ul><ul><li>在<code>new Router</code>中指定<code>mode</code>为<code>history</code>即可去掉<code>#</code>，这样加载更加逼真符合预期</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Router(&#123;</span><br><span class="line">    mode: <span class="string">"history"</span>,</span><br><span class="line">    routes: []</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//router-link跳转标签 当a标签使用，to必须是一个绝对地址</span></span><br><span class="line">&lt;router-link to=<span class="string">"/goods/title"</span>&gt;<span class="xml"><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">//或者</span></span><br><span class="line"><span class="xml">this.$router.push(&#123;path:""&#125;)</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">// 组件的渲染 配合router—link使用</span></span><br><span class="line">&lt;router-view&gt;&lt;/router-view&gt;</span><br></pre></td></tr></table></figure><h3 id="2-2-动态路由匹配"><a href="#2-2-动态路由匹配" class="headerlink" title="2.2 动态路由匹配"></a>2.2 动态路由匹配</h3><blockquote><p>通过变化的地址去加载信息</p></blockquote><table><thead><tr><th>模式</th><th>匹配路径</th><th><code>$route.params</code></th></tr></thead><tbody><tr><td><code>/user/:username</code></td><td><code>/user/poetries</code></td><td><code>{username:&quot;poetries&quot;}</code></td></tr><tr><td><code>/user/:username/post/:post_id</code></td><td><code>/user/poetries/post/123</code></td><td><code>{username:&quot;evan&quot;,post_id:123}</code></td></tr></tbody></table><ul><li>应用场景<ul><li>商城的详情页，要变换商品的<code>id</code>，根据商品的<code>id</code>去查对应商品的信息</li></ul></li></ul><h3 id="2-3-嵌套路由"><a href="#2-3-嵌套路由" class="headerlink" title="2.3 嵌套路由"></a>2.3 嵌套路由</h3><ul><li>什么是嵌套路由<ul><li>路由嵌套路由</li></ul></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Router(&#123;</span><br><span class="line">    mode: <span class="string">"history"</span>,</span><br><span class="line">    routes: [</span><br><span class="line">        &#123;</span><br><span class="line">            path:<span class="string">"/goods"</span>, </span><br><span class="line">            name: <span class="string">"GoodsList"</span>,</span><br><span class="line">            component:GoodsList,</span><br><span class="line">            children: [ <span class="comment">// 定义子组件</span></span><br><span class="line">               &#123;</span><br><span class="line">                   path:<span class="string">"title"</span>,<span class="comment">//最后形式/goods/title</span></span><br><span class="line">                   name:<span class="string">"title"</span>,</span><br><span class="line">                   component:Title</span><br><span class="line">               &#125;</span><br><span class="line">            ]</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="2-4-编程式路由"><a href="#2-4-编程式路由" class="headerlink" title="2.4 编程式路由"></a>2.4 编程式路由</h3><blockquote><p>通过js来实现页面的跳转</p></blockquote><ul><li>通过<code>push</code>名字就可以实现页面的跳转</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 方式一</span></span><br><span class="line"><span class="keyword">this</span>.$router.push(<span class="string">"name"</span>) <span class="comment">//name /cart</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式二 </span></span><br><span class="line"><span class="keyword">this</span>.$router.push(&#123;<span class="attr">path</span>:<span class="string">"name"</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式三 传递参数</span></span><br><span class="line"><span class="keyword">this</span>.$router.push(&#123;<span class="attr">path</span>:<span class="string">"name?a=123"</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 或者</span></span><br><span class="line"><span class="keyword">this</span>.$router.push(&#123;<span class="attr">path</span>:<span class="string">"name"</span>,<span class="attr">query</span>:&#123;<span class="attr">a</span>:<span class="number">123</span>&#125;&#125;)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 方式四 </span></span><br><span class="line"><span class="keyword">this</span>.$router.go(<span class="number">1</span>) <span class="comment">//$router其实就是对history的封装</span></span><br></pre></td></tr></table></figure><ul><li>如何拿到传递过来的参数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$router.push(<span class="string">"/cart?goodsId=123"</span>)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--如何在页面上拿到goodsId--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;$.route.query.goodsId&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>$route.params</code>是组件跟组件之间路由切换的时候，参数传递</li></ul><h3 id="2-5-命名路由"><a href="#2-5-命名路由" class="headerlink" title="2.5 命名路由"></a>2.5 命名路由</h3><blockquote><p>有时我们通过一个名称来标识一个路由显得更方便一些，特别是在链接一个路由，或者是执行一些跳转的时候。你可以在创建 <code>Router</code> 实例的时候，在 <code>routes</code> 配置中给某个路由设置名称</p></blockquote><blockquote><ul><li>给路由定义不同的名字，根据名字进行匹配</li><li>给不同的<code>router-view</code>定义名字，通过名字进行对应组件渲染</li></ul></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Router(&#123;</span><br><span class="line">    mode: <span class="string">"history"</span>,</span><br><span class="line">    routes: [</span><br><span class="line">        &#123;</span><br><span class="line">            path:<span class="string">"/cart/:cartId"</span>, </span><br><span class="line">            name: <span class="string">"cart"</span>,</span><br><span class="line">            component:GoodsList,</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><ul><li>之前的跳转方式</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/cart"</span>&gt;</span><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>根据路由名字跳转。以下是一个命名的路由，而且还带了参数</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">v-bind:to</span>=<span class="string">"&#123;&#123;name:'cart',params:&#123;cartId:123&#125;&#125;&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--params是路由的参数，并不是页面之间跳转的参数--&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-6-命名视图"><a href="#2-6-命名视图" class="headerlink" title="2.6 命名视图"></a>2.6 命名视图</h3><blockquote><p>有时候想同时（同级）展示多个视图，而不是嵌套展示，例如创建一个布局，有 <code>·sidebar·</code>（侧导航） 和<code>main</code>（主内容） 两个视图，这个时候命名视图就派上用场了。你可以在界面中拥有多个单独命名的视图，而不是只有一个单独的出口。如果 <code>router-view</code> 没有设置名字，那么默认为 <code>default</code></p></blockquote><ul><li>实现一个命名的视图（很少用到）<ul><li>给<code>router-view</code>加<code>name</code>值</li></ul></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">"title"</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">"image"</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>页面一进来就加载三个<code>router-view</code>。实现方法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Router(&#123;</span><br><span class="line">    mode: <span class="string">"history"</span>,</span><br><span class="line">    routes: [</span><br><span class="line">        &#123;</span><br><span class="line">            path:<span class="string">"/"</span>, </span><br><span class="line">            name: <span class="string">"cart"</span>,</span><br><span class="line">            <span class="comment">// 根据不同的name值去加载对应的router-view,映射到对应的组件</span></span><br><span class="line">            components:&#123;</span><br><span class="line">                <span class="keyword">default</span>:GoodsList,</span><br><span class="line">                title:Title,</span><br><span class="line">                img:Image</span><br><span class="line">            &#125;,</span><br><span class="line">            path:<span class="string">"/cart/:cartId"</span>, </span><br><span class="line">            name: <span class="string">"cart"</span>,</span><br><span class="line">            component:Cart</span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>当我们的视图如上时,我们会发现每一个路由被渲染了两次,所以我们需要为视图命名</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">"a"</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">router-view</span> <span class="attr">name</span>=<span class="string">"b"</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">```    </span><br><span class="line"></span><br><span class="line">```javascript</span><br><span class="line">var Foo = &#123; template: '<span class="tag">&lt;<span class="name">div</span>&gt;</span>foo<span class="tag">&lt;/<span class="name">div</span>&gt;</span>' &#125;</span><br><span class="line">var Bar = &#123; template: '<span class="tag">&lt;<span class="name">div</span>&gt;</span>bar<span class="tag">&lt;/<span class="name">div</span>&gt;</span>' &#125;</span><br><span class="line">var routes = [</span><br><span class="line">        &#123;</span><br><span class="line">            path:"/one",</span><br><span class="line">            name:"one",</span><br><span class="line">            components:&#123;</span><br><span class="line">                a:Foo,</span><br><span class="line">                b:Bar</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    ]</span><br></pre></td></tr></table></figure><h3 id="2-7-重定向和别名"><a href="#2-7-重定向和别名" class="headerlink" title="2.7 重定向和别名"></a>2.7 重定向和别名</h3><p><strong>重定向</strong></p><blockquote><p>重定向(<code>Redirect</code>)就是通过各种方法将各种网络请求重新定个方向转到其它位置,用于网站调整或网页被移到一个新地址,它也是通过 <code>routes</code> 配置来完成，下面例子是从 <code>/a</code> 重定向到 <code>/b</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'/a'</span>, <span class="attr">redirect</span>: <span class="string">'/b'</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>别名</strong></p><blockquote><p><code>/a</code> 的别名是 <code>/b</code>，意味着，当用户访问<code>/b</code> 时，<code>URL</code> 会保持为 <code>/b</code>，但是路由匹配则为 <code>/a</code>，就像用户访问<code>/a</code> 一样。简单的说就是给 /a 起了一个外号叫做 <code>/b</code> ,但是本质上还是 <code>/a</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> router = <span class="keyword">new</span> VueRouter(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123; <span class="attr">path</span>: <span class="string">'/a'</span>, <span class="attr">component</span>: A, <span class="attr">alias</span>: <span class="string">'/b'</span> &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="2-8-列表进入详情页传参"><a href="#2-8-列表进入详情页传参" class="headerlink" title="2.8 列表进入详情页传参"></a>2.8 列表进入详情页传参</h3><blockquote><p>例如商品列表页面前往商品详情页面，需要传一个商品id</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123;path: 'detail', query: &#123;id: 1&#125;&#125;"</span>&gt;</span>前往detail页面<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>c</code>页面的路径为<code>http://localhost:8080/#/detail?id=1</code>，可以看到传了一个参数<code>id=1</code>，并且就算刷新页面id也还会存在。此时在c页面可以通过id来获取对应的详情数据，获取<code>id</code>的方式是<code>this.$route.query.id</code></p></blockquote><p><strong>vue传参方式有：query、params+动态路由传参</strong></p><blockquote><p><code>query</code>通过<code>path</code>切换路由，<code>params</code>通过<code>name</code>切换路由</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// query通过path切换路由</span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123;path: 'Detail', query: &#123; id: 1 &#125;&#125;"</span>&gt;</span>前往Detail页面<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">// params通过name切换路由</span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123;name: 'Detail', params: &#123; id: 1 &#125;&#125;"</span>&gt;</span>前往Detail页面<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>query</code>通过<code>this.$route.query</code>来接收参数，<code>params</code>通过<code>this.$route.params</code>来接收参数</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// query通过this.$route.query接收参数</span></span><br><span class="line">created () &#123;</span><br><span class="line">    <span class="keyword">const</span> id = <span class="keyword">this</span>.$route.query.id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// params通过this.$route.params来接收参数</span></span><br><span class="line">created () &#123;</span><br><span class="line">    <span class="keyword">const</span> id = <span class="keyword">this</span>.$route.params.id;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>query</code>传参的<code>url</code>展现方式：<code>/detail?id=1&amp;user=123&amp;identity=1&amp;</code>更多参数</li><li><code>params</code>＋动态路由的<code>url</code>方式：<code>/detail/123</code></li><li><code>params</code>动态路由传参，一定要在路由中定义参数，然后在路由跳转的时候必须要加上参数，否则就是空白页面</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;      </span><br><span class="line">    path: &apos;/detail/:id&apos;,      </span><br><span class="line">    name: &apos;Detail&apos;,      </span><br><span class="line">    component: Detail    </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><ul><li><strong>注意</strong>，<code>params</code>传参时，如果没有在路由中定义参数，也是可以传过去的，同时也能接收到，但是一旦刷新页面，这个参数就不存在了。这对于需要依赖参数进行某些操作的行为是行不通的</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">// 定义的路由中，只定义一个id参数</span><br><span class="line">&#123;</span><br><span class="line">    path: 'detail/:id',</span><br><span class="line">    name: 'Detail',</span><br><span class="line">    components: Detail</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// template中的路由传参，</span><br><span class="line">// 传了一个id参数和一个token参数</span><br><span class="line">// id是在路由中已经定义的参数，而token没有定义</span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123;name: 'Detail', params: &#123; id: 1, token: '123456' &#125;&#125;"</span>&gt;</span>前往Detail页面<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// 在详情页接收</span><br><span class="line">created () &#123;</span><br><span class="line">    // 以下都可以正常获取到</span><br><span class="line">    // 但是页面刷新后，id依然可以获取，而token此时就不存在了</span><br><span class="line">    const id = this.$route.params.id;</span><br><span class="line">    const token = this.$route.params.token;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、路由基础介绍&quot;&gt;&lt;a href=&quot;#一、路由基础介绍&quot; class=&quot;headerlink&quot; title=&quot;一、路由基础介绍&quot;&gt;&lt;/a&gt;一、路由基础介绍&lt;/h2&gt;&lt;h3 id=&quot;1-1-什么是前端路由&quot;&gt;&lt;a href=&quot;#1-1-什么是前端路由&quot; class
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="Vue" scheme="http://blog.poetries.top/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>vue计算属性与数据监听（十）</title>
    <link href="http://blog.poetries.top/2018/08/28/vue-computed-watch/"/>
    <id>http://blog.poetries.top/2018/08/28/vue-computed-watch/</id>
    <published>2018-08-28T06:10:42.000Z</published>
    <updated>2018-08-31T08:54:59.928Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、监听属性"><a href="#一、监听属性" class="headerlink" title="一、监听属性"></a>一、监听属性</h2><blockquote><p>我们在工作中常常需要监听某一个属性值的变化，这个时候我们就需要用到了监听属性<code>watch</code></p></blockquote><h3 id="1-1-基础版监听"><a href="#1-1-基础版监听" class="headerlink" title="1.1 基础版监听"></a>1.1 基础版监听</h3><blockquote><p>场景如下：输入框输入你的年龄，如果年龄在0-15岁提示信息：你还是个小孩，如果年龄在 15-25岁，提示信息：你已经是个少年，如果年龄在25岁以上，提示信息：你已经长大了</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  年齡：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">v-model</span>=<span class="string">"age"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  提示信息：<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;infoMsg&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined"> data() &#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="javascript">   age: <span class="string">""</span>,</span></span><br><span class="line"><span class="javascript">   infoMsg:<span class="string">""</span></span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"> &#125;,</span></span><br><span class="line"><span class="undefined"> watch:&#123;</span></span><br><span class="line"><span class="javascript">  age:<span class="function"><span class="keyword">function</span>(<span class="params">val,oldval</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">   <span class="keyword">if</span>(val&gt;<span class="number">0</span> &amp;&amp; val&lt;<span class="number">15</span>)&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.infoMsg=<span class="string">"你还是个小孩"</span></span></span><br><span class="line"><span class="javascript">   &#125;<span class="keyword">else</span> <span class="keyword">if</span>(val&gt;<span class="number">15</span> &amp;&amp; val&lt;<span class="number">25</span>)&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.infoMsg=<span class="string">"你已经是个少年"</span></span></span><br><span class="line"><span class="javascript">   &#125;<span class="keyword">else</span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">this</span>.infoMsg=<span class="string">"你已经长大了"</span></span></span><br><span class="line"><span class="undefined">   &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"> &#125;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-2-进阶版监听"><a href="#1-2-进阶版监听" class="headerlink" title="1.2 进阶版监听"></a>1.2 进阶版监听</h3><blockquote><p>下面我们改变一下需求：基础规则不变，但是因为后台数据库的更改,我们需要提交一个这样的数据结构</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">data() &#123;</span><br><span class="line">  <span class="keyword">return</span> &#123;</span><br><span class="line">   info: &#123;</span><br><span class="line">    age: <span class="string">""</span></span><br><span class="line">   &#125;,</span><br><span class="line">   infoMsg: <span class="string">""</span></span><br><span class="line">  &#125;;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>由于我们监听的是对象<code>info</code>中的属性<code>age</code>值的变化，所以我们需要使用到的是深度监听，具体代码如下</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  年齡：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">v-model</span>=<span class="string">"info.age"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  提示信息：<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;infoMsg&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined"> data() &#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="undefined">   info: &#123;</span></span><br><span class="line"><span class="javascript">    age: <span class="string">""</span></span></span><br><span class="line"><span class="undefined">   &#125;,</span></span><br><span class="line"><span class="javascript">   infoMsg: <span class="string">""</span></span></span><br><span class="line"><span class="undefined">  &#125;;</span></span><br><span class="line"><span class="undefined"> &#125;,</span></span><br><span class="line"><span class="undefined"> watch: &#123;</span></span><br><span class="line"><span class="undefined">  info: &#123;</span></span><br><span class="line"><span class="javascript">   handler: <span class="function"><span class="keyword">function</span>(<span class="params">val, oldval</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> that = <span class="keyword">this</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (val.age &gt; <span class="number">0</span> &amp;&amp; val.age &lt; <span class="number">15</span>) &#123;</span></span><br><span class="line"><span class="javascript">     that.infoMsg = <span class="string">"你还是个小孩"</span>;</span></span><br><span class="line"><span class="javascript">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (val.age &gt; <span class="number">15</span> &amp;&amp; val.age &lt; <span class="number">25</span>) &#123;</span></span><br><span class="line"><span class="javascript">     that.infoMsg = <span class="string">"你已经是个少年"</span>;</span></span><br><span class="line"><span class="javascript">    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">     that.infoMsg = <span class="string">"你已经长大了"</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">   &#125;,</span></span><br><span class="line"><span class="javascript">   deep: <span class="literal">true</span></span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"> &#125;</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>这里的<code>function</code>不能使用箭头函数替代，如果使用箭头函数的话，<code>this</code>的指向会是全局</li><li>你会注意到这里多加入一个属性是<code>deep</code>，它的含义表示是否开启深度监听，如果开启值为<code>true</code>，反之为<code>false</code></li></ul><h3 id="1-3-高级版监听"><a href="#1-3-高级版监听" class="headerlink" title="1.3 高级版监听"></a>1.3 高级版监听</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">  年齡：<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">v-model</span>=<span class="string">"info.age"</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">  提示信息：<span class="tag">&lt;<span class="name">span</span>&gt;</span>&#123;&#123;infoMsg&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined"> data() &#123;</span></span><br><span class="line"><span class="javascript">  <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="undefined">   info: &#123;</span></span><br><span class="line"><span class="javascript">    age: <span class="string">""</span>,</span></span><br><span class="line"><span class="javascript">    name: <span class="string">""</span>,</span></span><br><span class="line"><span class="javascript">    hobit: <span class="string">""</span></span></span><br><span class="line"><span class="undefined">   &#125;,</span></span><br><span class="line"><span class="javascript">   infoMsg: <span class="string">""</span></span></span><br><span class="line"><span class="undefined">  &#125;;</span></span><br><span class="line"><span class="undefined"> &#125;,</span></span><br><span class="line"><span class="undefined"> computed: &#123;</span></span><br><span class="line"><span class="javascript">  ageval: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">   <span class="keyword">return</span> <span class="keyword">this</span>.info.age;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"> &#125;,</span></span><br><span class="line"><span class="undefined"> watch: &#123;</span></span><br><span class="line"><span class="undefined">  ageval: &#123;</span></span><br><span class="line"><span class="javascript">   handler: <span class="function"><span class="keyword">function</span>(<span class="params">val, oldval</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> that = <span class="keyword">this</span>;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">if</span> (val &gt; <span class="number">0</span> &amp;&amp; val &lt; <span class="number">15</span>) &#123;</span></span><br><span class="line"><span class="javascript">     that.infoMsg = <span class="string">"你还是个小孩"</span>;</span></span><br><span class="line"><span class="javascript">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (val &gt; <span class="number">15</span> &amp;&amp; val &lt; <span class="number">25</span>) &#123;</span></span><br><span class="line"><span class="javascript">     that.infoMsg = <span class="string">"你已经是个少年"</span>;</span></span><br><span class="line"><span class="javascript">    &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">     that.infoMsg = <span class="string">"你已经长大了"</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">   &#125;,</span></span><br><span class="line"><span class="javascript">   deep: <span class="literal">true</span></span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"> &#125;</span></span><br><span class="line"><span class="undefined">&#125;;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>这次我们监听的是计算属性<code>ageval</code>，而计算属性返回的则是<code>info</code>对象中<code>age</code>的值，与第二次的代码进行比较我们可以发现两次代码中监听的一个是对象<code>info</code>，一个是<code>info</code>对象中<code>age</code>的值</p></blockquote><h2 id="二、计算属性"><a href="#二、计算属性" class="headerlink" title="二、计算属性"></a>二、计算属性</h2><h3 id="2-1-什么是计算属性"><a href="#2-1-什么是计算属性" class="headerlink" title="2.1 什么是计算属性"></a>2.1 什么是计算属性</h3><blockquote><p>模板内的表达式非常便利，但是设计它们的初衷是用于简单运算的。在模板中放入太多的逻辑会让模板过重且难以维护。例如</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span></span><br><span class="line">  &#123;&#123; message.split('').reverse().join('') &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>遇到复杂逻辑时应该使用Vue特带的计算属性<code>computed</code>来进行处理</p></blockquote><h3 id="2-2-计算属性的用法"><a href="#2-2-计算属性的用法" class="headerlink" title="2.2 计算属性的用法"></a>2.2 计算属性的用法</h3><blockquote><p>在一个计算属性里可以完成各种复杂的逻辑，包括运算、函数调用等，只要最终返回一个结果就可以</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"example"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Original message: "&#123;&#123; message &#125;&#125;"<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>Computed reversed message: "&#123;&#123; reversedMessage &#125;&#125;"<span class="tag">&lt;/<span class="name">p</span>&gt;</span>　<span class="comment">&lt;!--我们把复杂处理放在了计算属性里面了--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#example'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        message: <span class="string">'Hello'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">        reversedMessage: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="comment">// `this` 指向 vm 实例</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.message.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>)</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><blockquote><p>计算属性还可以依赖多个Vue 实例的数据，只要其中任一数据变化，计算属性就会重新执行，视图也会更新</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"add()"</span>&gt;</span>补充货物1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>总价为：&#123;&#123;price&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;        </span><br><span class="line">       el: <span class="string">'#app'</span>, </span><br><span class="line">   data: &#123;</span><br><span class="line">       package1: &#123;</span><br><span class="line">           count: <span class="number">5</span>,</span><br><span class="line">           price: <span class="number">5</span></span><br><span class="line">       &#125;,</span><br><span class="line">       package2: &#123;</span><br><span class="line">           count: <span class="number">10</span>,</span><br><span class="line">           price: <span class="number">10</span></span><br><span class="line">       &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">     price: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">         <span class="keyword">return</span> <span class="keyword">this</span>.package1.count*<span class="keyword">this</span>.package1.price+<span class="keyword">this</span>.package2.count*<span class="keyword">this</span>.package2.price　　<span class="comment">//总价随着货物或价格的改变会重新计算</span></span><br><span class="line">     &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods: &#123;   <span class="comment">//对象的方法</span></span><br><span class="line">        add: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.package1.count++</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><ul><li>每一个计算属性都包含一个<code>getter</code> 和一个<code>setter</code> ，我们上面的两个示例都是计算属性的默认用法， 只是利用了<code>getter</code> 来读取</li><li>在你需要时，也可以提供一个<code>setter</code> 函数， 当手动修改计算属性的值就像修改一个普通数据那样时，就会触发<code>setter</code> 函数，执行一些自定义的操作，例如</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#demo'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">        firstName: <span class="string">'Foo'</span>,</span><br><span class="line">        lastName: <span class="string">'Bar'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    computed: &#123;</span><br><span class="line">        fullName: &#123;</span><br><span class="line">            <span class="comment">// getter</span></span><br><span class="line">            get: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">this</span>.firstName + <span class="string">' '</span> + <span class="keyword">this</span>.lastName</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="comment">// setter</span></span><br><span class="line">            set: <span class="function"><span class="keyword">function</span> (<span class="params">newValue</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> names = newValue.split(<span class="string">' '</span>);</span><br><span class="line">                <span class="keyword">this</span>.firstName = names[<span class="number">0</span>];</span><br><span class="line">                <span class="keyword">this</span>.lastName = names[names.length - <span class="number">1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//现在再运行 vm.fullName = 'John Doe' 时，setter 会被调用，vm.firstName 和 vm.lastName 也会相应地被更新。</span></span><br></pre></td></tr></table></figure><blockquote><p>绝大多数情况下，我们只会用默认的<code>getter</code> 方法来读取一个计算属性，在业务中很少用到<code>setter</code>,所以在声明一个计算属性时，可以直接使用默认的写法，不必将<code>getter</code> 和<code>setter</code>都声明</p></blockquote><h3 id="2-3-计算属性缓存"><a href="#2-3-计算属性缓存" class="headerlink" title="2.3 计算属性缓存"></a>2.3 计算属性缓存</h3><blockquote><p>除了使用计算属性外，我们也可以通过在表达式中调用方法来达到同样的效果</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;reverseTitle()&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在组件中</span></span><br><span class="line">methods: &#123;</span><br><span class="line">  reverseTitle: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.title.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>我们可以将同一函数定义为一个方法而不是一个计算属性，两种方式的最终结果确实是完全相同的。只是一个使用<code>reverseTitle()</code>取值，一个使用<code>reverseTitle</code>取值。</li><li>然而，不同的是计算属性是基于它们的依赖进行缓存的。计算属性只有在它的相关依赖发生改变时才会重新求值。</li><li>这就意味着只要 <code>title</code>还没有发生改变，多次访问<code>reverseTitle</code>计算属性会立即返回之前的计算结果，而不必再次执行函数。</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;reverseTitle&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;reverseTitle1()&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"add()"</span>&gt;</span>补充货物1<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>总价为：&#123;&#123;price&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    computed: &#123;</span></span><br><span class="line"><span class="javascript">      reverseTitle: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">return</span> <span class="keyword">this</span>.title.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>)　　<span class="comment">//而使用计算属性，只要title没变，页面渲染是不会重新进这里来计算的，而是使用了缓存。</span></span></span><br><span class="line"><span class="undefined">      &#125;,</span></span><br><span class="line"><span class="javascript">      price: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">         <span class="keyword">return</span> <span class="keyword">this</span>.package1.count*<span class="keyword">this</span>.package1.price+<span class="keyword">this</span>.package2.count*<span class="keyword">this</span>.package2.price</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">     &#125;,</span></span><br><span class="line"><span class="javascript">    methods: &#123;   <span class="comment">//对象的方法</span></span></span><br><span class="line"><span class="javascript">    add: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.package1.count++</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="javascript">    reverseTitle1: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">return</span> <span class="keyword">this</span>.title.split(<span class="string">''</span>).reverse().join(<span class="string">''</span>)　　<span class="comment">//点击补充货物，也会进这个方法，再次计算。不是刷新，而是只要页面渲染，就会进方法里重新计算。</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>相比之下，每当触发重新渲染时，调用方法将总会再次执行函数。 </li><li>我们为什么需要缓存？假设我们有一个性能开销比较大的的计算属性 A，它需要遍历一个巨大的数组并做大量的计算。然后我们可能有其他的计算属性依赖于 A </li><li>如果没有缓存，我们将不可避免的多次执行 A 的<code>getter</code>！如果你不希望有缓存，请用方法来替代</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、监听属性&quot;&gt;&lt;a href=&quot;#一、监听属性&quot; class=&quot;headerlink&quot; title=&quot;一、监听属性&quot;&gt;&lt;/a&gt;一、监听属性&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;我们在工作中常常需要监听某一个属性值的变化，这个时候我们就需要用到了监听属性&lt;co
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="Vue" scheme="http://blog.poetries.top/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>vue组件（九)</title>
    <link href="http://blog.poetries.top/2018/08/27/vue-component/"/>
    <id>http://blog.poetries.top/2018/08/27/vue-component/</id>
    <published>2018-08-27T03:20:32.000Z</published>
    <updated>2018-08-31T08:54:59.928Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、组件的基本使用"><a href="#一、组件的基本使用" class="headerlink" title="一、组件的基本使用"></a>一、组件的基本使用</h2><h3 id="1-1-注册组件"><a href="#1-1-注册组件" class="headerlink" title="1.1 注册组件"></a>1.1 注册组件</h3><blockquote><p>注册组件就是利用<code>Vue.component()</code>方法，先传入一个自定义组件的名字，然后传入这个组件的配置</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'mycomponent'</span>,&#123;</span><br><span class="line">    template: <span class="string">`&lt;div&gt;这是一个自定义组件&lt;/div&gt;`</span>,</span><br><span class="line">    data () &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        message: <span class="string">'hello world'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><blockquote><p>如上方式，就已经创建了一个自定义组件，然后就可以在Vue实例挂在的DOM元素中使用它</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mycomponent</span>&gt;</span><span class="tag">&lt;/<span class="name">mycomponent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-component</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">    data: &#123;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    components: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="string">'my-component'</span>: &#123;</span></span><br><span class="line"><span class="xml">        template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span>这是一个局部的自定义组件，只能在当前Vue实例中使用<span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>直接使用<code>Vue.component()</code>创建的组件，所有的Vue实例都可以使用。还可以在某个Vue实例中注册只有自己能使用的组件</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    components: &#123;</span><br><span class="line">      <span class="string">'my-component'</span>: &#123;</span><br><span class="line">        template: <span class="string">`&lt;div&gt;这是一个局部的自定义组件，只能在当前Vue实例中使用&lt;/div&gt;`</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><h3 id="1-2-模板的要求"><a href="#1-2-模板的要求" class="headerlink" title="1.2 模板的要求"></a>1.2 模板的要求</h3><blockquote><p>注意：组件的模板只能有一个根元素。下面的情况是不允许的</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">template: `&lt;div&gt;这是一个局部的自定义组件，只能在当前Vue实例中使用&lt;/div&gt;</span><br><span class="line">            &lt;button&gt;hello&lt;/button&gt;`,</span><br></pre></td></tr></table></figure><h3 id="1-3-组件中的data必须是函数"><a href="#1-3-组件中的data必须是函数" class="headerlink" title="1.3 组件中的data必须是函数"></a>1.3 组件中的data必须是函数</h3><ul><li>可以看出，注册组件时传入的配置和创建Vue实例差不多，但也有不同，其中一个就是<code>data</code>属性必须是一个函数</li><li>这是因为如果像<code>Vue</code>实例那样，传入一个对象，由于JS中对象类型的变量实际上保存的是对象的引用，所以当存在多个这样的组件时，会共享数据，导致一个组件中数据的改变会引起其他组件数据的改变。</li><li>而使用一个返回对象的函数，每次使用组件都会创建一个新的对象，这样就不会出现共享数据的问题来了</li></ul><h3 id="1-4-关于DOM模板的解析"><a href="#1-4-关于DOM模板的解析" class="headerlink" title="1.4 关于DOM模板的解析"></a>1.4 关于DOM模板的解析</h3><blockquote><p>当使用 DOM 作为模版时 (例如，将 el 选项挂载到一个已存在的元素上), 你会受到 HTML 的一些限制，因为 Vue 只有在浏览器解析和标准化 HTML 后才能获取模板内容。尤其像这些元素 <code>&lt;ul&gt;</code>，<code>&lt;ol&gt;</code>，<code>&lt;table&gt;</code>，<code>&lt;select&gt;</code> 限制了能被它包裹的元素，而一些像 <code>&lt;option&gt;</code> 这样的元素只能出现在某些其它元素内部</p></blockquote><ul><li>在自定义组件中使用这些受限制的元素时会导致一些问题，例如</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">my-row</span>&gt;</span>...<span class="tag">&lt;/<span class="name">my-row</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>自定义组件 <code>&lt;my-row&gt;</code> 被认为是无效的内容，因此在渲染的时候会导致错误。这时应使用特殊的 <code>is</code> 属性</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span> <span class="attr">is</span>=<span class="string">"my-row"</span>&gt;</span><span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>也就是说，标准HTML中，一些元素中只能放置特定的子元素，另一些元素只能存在于特定的父元素中。比如<code>table</code>中不能放置<code>div</code>，<code>tr</code>的父元素不能<code>div</code>等。所以，当使用自定义标签时，标签名还是那些标签的名字，但是可以在标签的<code>is</code>属性中填写自定义组件的名字</p></blockquote><p><strong>应当注意，如果您使用来自以下来源之一的字符串模板，这些限制将不适用</strong>：</p><ul><li><code>&lt;script type=&quot;text/x-template&quot;&gt;</code></li><li><code>JavaScript</code> 内联模版字符串</li><li><code>.vue</code> 组件</li></ul><blockquote><p>一般情况下，只有单文件组件<code>.vue</code>可以忽略这种情况</p></blockquote><h2 id="二、组件的属性和事件"><a href="#二、组件的属性和事件" class="headerlink" title="二、组件的属性和事件"></a>二、组件的属性和事件</h2><blockquote><p>在<code>html</code>中使用元素，会有一些属性，如<code>class</code>,<code>id</code>，还可以绑定事件，自定义组件也是可以的。当在一个组件中，使用了其他自定义组件时，就会利用子组件的属性和事件来和父组件进行数据交流</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-a057513f8294a129.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ul><li>父子组件之间的通信就是 <code>props down</code>,<code>events up</code>，父组件通过属性<code>props</code>向下传递数据给子组件，子组件通过 事件<code>events</code> 给父组件发送消息。</li><li>比如，子组件需要某个数据，就在内部定义一个prop属性，然后父组件就像给<code>html</code>元素指定特性值一样，把自己的<code>data</code>属性传递给子组件的这个属性。</li><li>而当子组件内部发生了什么事情的时候，就通过自定义事件来把这个事情涉及到的数据暴露出来，供父组件处理</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">v-bind:foo</span>=<span class="string">"baz"</span> <span class="attr">v-on:event-a</span>=<span class="string">"doThis(arg1,...arg2)"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>foo</code>是<code>&lt;my-component&gt;</code>组件内部定义的一个<code>prop</code>属性，<code>baz</code>是父组件的一个<code>data</code>属性，</li><li><code>event-a</code>是子组件定义的一个事件，<code>doThis</code>是父组件的一个方法</li></ul><p><strong>过程就是这样</strong></p><ul><li>父组件把<code>baz</code>数据通过<code>prop</code>传递给子组件的<code>foo</code>；</li><li>子组件内部得到<code>foo</code>的值，就可以进行相应的操作；</li><li>当子组件内部发生了一些变化，希望父组件能知道时，就利用代码触发<code>event-a</code>事件，把一些数据发送出去</li><li>父组件把这个事件处理器绑定为<code>doThis</code>方法，子组件发送的数据，就作为<code>doThis</code>方法的参数被传进来</li><li>然后父组件就可以根据这些数据，进行相应的操作</li></ul><h2 id="三、属性Props"><a href="#三、属性Props" class="headerlink" title="三、属性Props"></a>三、属性Props</h2><blockquote><p>Vue组件通过<code>props</code>属性来声明一个自己的属性，然后父组件就可以往里面传递数据</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'mycomponent'</span>,&#123;</span><br><span class="line">    template: <span class="string">'&lt;div&gt;这是一个自定义组件,父组件传给我的内容是：&#123;&#123;myMessage&#125;&#125;&lt;/div&gt;'</span>,</span><br><span class="line">    props: [<span class="string">'myMessage'</span>],</span><br><span class="line">    data () &#123;</span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line">        message: <span class="string">'hello world'</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><blockquote><p>调用该组件</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mycomponent</span> <span class="attr">my-message</span>=<span class="string">"hello"</span>&gt;</span><span class="tag">&lt;/<span class="name">mycomponent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><strong>注意</strong>，由于<code>HTML</code>特性是不区分大小写的，所以传递属性值时，<code>myMessage</code>应该转换成 <code>kebab-case</code> (短横线隔开式)<code>my-message=&quot;hello&quot;</code></li></ul><h3 id="3-1-v-bind绑定属性值"><a href="#3-1-v-bind绑定属性值" class="headerlink" title="3.1 v-bind绑定属性值"></a>3.1 v-bind绑定属性值</h3><ul><li>一般情况下，使用<code>v-bind</code>给元素特性(attribute)传递值时，<code>Vue</code>会将<code>&quot;&quot;</code>中的内容当做一个表达式</li><li>用<code>v-bind:class</code>和<code>class</code>传入正常的类名，效果是一样的，因为对于这两个特性，<code>Vue</code>采用了合并而不是替换的原则</li></ul><h3 id="3-2-动态绑定特性值"><a href="#3-2-动态绑定特性值" class="headerlink" title="3.2 动态绑定特性值"></a>3.2 动态绑定特性值</h3><blockquote><p>想要把父组件的属性绑定到子组件，应该使用<code>v-bind</code>，这样，父组件中数据改变时能反映到子组件。<br>注意，根据父组件传递给子组件的属性类型的不同，当在子组件中更改这个属性时，会有以下两种情况</p></blockquote><ul><li>当父组件传递的属性是引用类型时，在子组件中更改相应的属性会导致父组件相应属性的更改</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app2"</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">div</span>&gt;</span>这是父组件的parentArray：&#123;&#123;parentArray&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">my-component</span> <span class="attr">:child-array</span>=<span class="string">"parentArray"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">     Vue.component(<span class="string">'my-component'</span>, &#123;</span></span><br><span class="line"><span class="undefined">       template: `</span></span><br><span class="line"><span class="xml">       <span class="tag">&lt;<span class="name">div</span>&gt;</span>这是接收了父组件传递值的子组件的childArray: &#123;&#123;childArray&#125;&#125; <span class="tag">&lt;<span class="name">br</span>&gt;</span></span></span><br><span class="line"><span class="xml">           <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> @<span class="attr">click</span>=<span class="string">"changeArray"</span>&gt;</span></span></span><br><span class="line"><span class="xml">           点击我改变父元素的parentArray<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">         <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span><br><span class="line"><span class="javascript">       props: [<span class="string">'childArray'</span>],</span></span><br><span class="line"><span class="undefined">       data () &#123;</span></span><br><span class="line"><span class="javascript">         <span class="keyword">return</span> &#123;</span></span><br><span class="line"><span class="undefined">           counter: 1</span></span><br><span class="line"><span class="undefined">         &#125;</span></span><br><span class="line"><span class="undefined">       &#125;,</span></span><br><span class="line"><span class="undefined">       methods: &#123;</span></span><br><span class="line"><span class="undefined">         changeArray () &#123;</span></span><br><span class="line"><span class="javascript">           <span class="keyword">this</span>.childArray.push(<span class="keyword">this</span>.counter++)</span></span><br><span class="line"><span class="undefined">         &#125;</span></span><br><span class="line"><span class="undefined">       &#125;</span></span><br><span class="line"><span class="undefined">     &#125;)</span></span><br><span class="line"><span class="javascript">     <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">       el: <span class="string">'#app2'</span>,</span></span><br><span class="line"><span class="undefined">       data: &#123;</span></span><br><span class="line"><span class="undefined">         parentArray: []</span></span><br><span class="line"><span class="undefined">       &#125;</span></span><br><span class="line"><span class="undefined">     &#125;)</span></span><br><span class="line"><span class="undefined">   </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>当父组件传递值为基本类型时，在子组件中更改这个属性会报错。正确的做法是，在父组件中绑定属性值时，加上<code>.sync</code>修饰符</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">:child-array.sync</span>=<span class="string">"parentArray"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>然后在子组件中改变相应的属性</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">    changeArray () &#123;</span><br><span class="line">      <span class="keyword">this</span>.counter++</span><br><span class="line">      <span class="keyword">this</span>.$emit(<span class="string">'update:childArray'</span>, <span class="keyword">this</span>.counter)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="3-3-子组件希望对传入的prop进行操作"><a href="#3-3-子组件希望对传入的prop进行操作" class="headerlink" title="3.3 子组件希望对传入的prop进行操作"></a>3.3 子组件希望对传入的prop进行操作</h3><blockquote><p>一般来说，是不建议在子组件中对父组件中传递来的属性进行操作的。如果真的有这种需求,可以这样:</p></blockquote><ul><li>父组件传递了一个基本类型值，那么可以在子组件中创建一个新的属性，并以传递进来的值进行初始化，之后就可以操作这个新的属性了</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">props: [<span class="string">'initialCounter'</span>],</span><br><span class="line">data: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> &#123; <span class="attr">counter</span>: <span class="keyword">this</span>.initialCounter &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>父组件传递了一个引用类型值，为了避免更改父组件中相应的数据，最好是对引用类型进行复制。复杂的情况，肯定应该是深复制。</li></ul><h3 id="3-4-给子组件传递正确类型的值"><a href="#3-4-给子组件传递正确类型的值" class="headerlink" title="3.4 给子组件传递正确类型的值"></a>3.4 给子组件传递正确类型的值</h3><blockquote><p>静态的给子组件的特性传递值，它都会把他当做一个字符串</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 传递了一个字符串 &quot;1&quot; --&gt;</span><br><span class="line">&lt;comp some-prop=&quot;1&quot;&gt;&lt;/comp&gt;</span><br></pre></td></tr></table></figure><blockquote><p>子组件中，特性的值是字符串 “1” 而不是 <code>number</code> 1。如果想传递正确的数值，应该使用<code>v-bind</code>传递，这样就能把传递的值当做一个表达式来处理，而不是字符串</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 传递实际的 number 1 --&gt;</span><br><span class="line">&lt;comp v-bind:some-prop=&quot;1&quot;&gt;&lt;/comp&gt;</span><br></pre></td></tr></table></figure><h2 id="四、Prop验证"><a href="#四、Prop验证" class="headerlink" title="四、Prop验证"></a>四、Prop验证</h2><blockquote><p>我们可以给组件的<code>props</code>属性添加验证，当传入的数据不符合要求时，<code>Vue</code>会发出警告</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">Vue.component(<span class="string">'example'</span>, &#123;</span><br><span class="line">  props: &#123;</span><br><span class="line">    <span class="comment">// 基础类型检测 (`null` 意思是任何类型都可以)</span></span><br><span class="line">    propA: <span class="built_in">Number</span>,</span><br><span class="line">    <span class="comment">// 多种类型</span></span><br><span class="line">    propB: [<span class="built_in">String</span>, <span class="built_in">Number</span>],</span><br><span class="line">    <span class="comment">// 必传且是字符串</span></span><br><span class="line">    propC: &#123;</span><br><span class="line">      type: <span class="built_in">String</span>,</span><br><span class="line">      required: <span class="literal">true</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 数字，有默认值</span></span><br><span class="line">    propD: &#123;</span><br><span class="line">      type: <span class="built_in">Number</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="number">100</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 数组/对象的默认值应当由一个工厂函数返回</span></span><br><span class="line">    propE: &#123;</span><br><span class="line">      type: <span class="built_in">Object</span>,</span><br><span class="line">      <span class="keyword">default</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> &#123; <span class="attr">message</span>: <span class="string">'hello'</span> &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 自定义验证函数</span></span><br><span class="line">    propF: &#123;</span><br><span class="line">      validator: <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> value &gt; <span class="number">10</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>type 可以是下面原生构造器</strong>：</p><ul><li><code>String</code></li><li><code>Number</code></li><li><code>Boolean</code></li><li><code>Function</code></li><li><code>Object</code></li><li><code>Array</code></li><li><code>Symbol</code></li><li><code>type</code>也可以是一个自定义构造器函数，使用 <code>instanceof</code> 检测</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 自定义Person构造器</span></span><br><span class="line"> <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name</span><br><span class="line">    <span class="keyword">this</span>.age = age</span><br><span class="line">  &#125;</span><br><span class="line">  Vue.component(<span class="string">'my-component'</span>, &#123;</span><br><span class="line">    template: <span class="string">`&lt;div&gt;名字: &#123;&#123; person-prop.name &#125;&#125;， 年龄： &#123;&#123; person-prop.age &#125;&#125; &lt;/div&gt;`</span>,</span><br><span class="line">    props: &#123;</span><br><span class="line">      person-prop: &#123;</span><br><span class="line">        type: Person     <span class="comment">// 指定类型</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">  <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app2'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      person: <span class="number">2</span>        <span class="comment">// 传入Number类型会报错</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p><strong>非Prop类型的属性</strong></p><blockquote><p>也可以像在html标签中添加<code>data-</code>开头的自定义属性一样，给自定义组件添加任意的属性。而不仅限于<code>data-*</code>形式，这样做的话，Vue会把这个属性放在自定义组件的根元素上。一个自定义组件的模板只能有一个根元素</p></blockquote><p><strong>覆盖非Prop属性</strong></p><blockquote><p>如果父组件向子组件的非<code>prop</code>属性传递了值，那么这个值会覆盖子组件模板中的特性</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app3"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-component2</span> <span class="attr">att</span>=<span class="string">"helloParent"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  Vue.component(<span class="string">'my-component2'</span>, &#123;</span></span><br><span class="line"><span class="xml">    template: `<span class="tag">&lt;<span class="name">div</span> <span class="attr">att</span>=<span class="string">"helloChild"</span>&gt;</span>子组件原有的特性被覆盖了<span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="javascript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">'#app3'</span></span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>上面渲染的结果是，<code>div</code>的<code>att</code>属性是<code>helloParent</code>。</li><li>注意：前面已经提到过，覆盖原则对于<code>class</code>和<code>style</code>不适用,而是采用了合并(<code>merge</code>)的原则</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app3"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-component2</span> <span class="attr">att</span>=<span class="string">"helloParent"</span> <span class="attr">class</span>=<span class="string">"class2"</span> <span class="attr">style</span>=<span class="string">"color: red;"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  Vue.component(<span class="string">'my-component2'</span>, &#123;</span></span><br><span class="line"><span class="xml">    template: `<span class="tag">&lt;<span class="name">div</span> <span class="attr">att</span>=<span class="string">"helloChild"</span> <span class="attr">class</span>=<span class="string">"class1"</span> <span class="attr">style</span>=<span class="string">"background: yellow;"</span>&gt;</span>子组件原有的特性被覆盖了<span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="javascript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">'#app3'</span></span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>上面的渲染结果是，<code>div</code>的类名是<code>class1 class2</code>，行内样式是<code>color:red; background:yellow;</code></p></blockquote><h2 id="五、自定义事件"><a href="#五、自定义事件" class="headerlink" title="五、自定义事件"></a>五、自定义事件</h2><blockquote><p>通过<code>prop</code>属性，父组件可以向子组件传递数据，而子组件的自定义事件就是用来将内部的数据报告给父组件的</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app3"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-component2</span> <span class="attr">v-on:myclick</span>=<span class="string">"onClick"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  Vue.component(<span class="string">'my-component2'</span>, &#123;</span></span><br><span class="line"><span class="xml">    template: `<span class="tag">&lt;<span class="name">div</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">"button"</span> @<span class="attr">click</span>=<span class="string">"childClick"</span>&gt;</span>点击我触发自定义事件<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span></span><br><span class="line"><span class="xml">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`,</span></span><br><span class="line"><span class="undefined">    methods: &#123;</span></span><br><span class="line"><span class="undefined">      childClick () &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.$emit(<span class="string">'myclick'</span>, <span class="string">'这是我暴露出去的数据'</span>, <span class="string">'这是我暴露出去的数据2'</span>)</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="javascript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">'#app3'</span>,</span></span><br><span class="line"><span class="undefined">    methods: &#123;</span></span><br><span class="line"><span class="undefined">      onClick () &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="built_in">arguments</span>)</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>子组件在自己的方法中将自定义事件以及需要发出的数据通过以下代码发送出去</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">this.$emit(&apos;myclick&apos;, &apos;这是我暴露出去的数据&apos;, &apos;这是我暴露出去的数据2&apos;)</span><br></pre></td></tr></table></figure><ul><li>第一个参数是自定义事件的名字</li><li>后面的参数是依次想要发送出去的数据</li></ul><blockquote><p>父组件利用<code>v-on</code>为事件绑定处理器</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;my-component2 v-on:myclick=&quot;onClick&quot;&gt;&lt;/my-component2&gt;</span><br></pre></td></tr></table></figure><h3 id="5-1-绑定原生事件"><a href="#5-1-绑定原生事件" class="headerlink" title="5.1 绑定原生事件"></a>5.1 绑定原生事件</h3><blockquote><p>如果想在某个组件的根元素上监听一个原生事件。可以使用 <code>.native</code>修饰 <code>v-on</code></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">my-component</span> <span class="attr">v-on:click.native</span>=<span class="string">"doTheThing"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="5-2-探究v-model"><a href="#5-2-探究v-model" class="headerlink" title="5.2 探究v-model"></a>5.2 探究v-model</h3><blockquote><p><code>v-model</code>可以对表单控件实现数据的双向绑定，它的原理就是利用了绑定属性和事件来实现的。比如<code>input</code>控件。不使用<code>v-model</code>，可以这样实现数据的双向绑定</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app4"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-bind:value</span>=<span class="string">"text"</span> <span class="attr">v-on:input</span>=<span class="string">"changeValue($event.target.value)"</span>&gt;</span></span><br><span class="line">    &#123;&#123;text&#125;&#125;</span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app4'</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="javascript">          text: <span class="string">'444'</span></span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        methods: &#123;</span></span><br><span class="line"><span class="undefined">          changeValue (value) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.text = value</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;)</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>上面的代码同样实现了数据的双向绑定。其本质就是:</p></blockquote><ul><li>把<code>input</code>的<code>value</code>特性绑定到<code>Vue</code>实例的属性<code>text</code>上，<code>text</code>改变，<code>input</code>中的内容也会改变</li><li>然后把表单的<code>input</code>事件处理函数设置为<code>Vue</code>实例的一个方法，这个方法会根据输入参数改变<code>Vue</code>中<code>text</code>的值<br>相应的，在input中输入内容时，触发了<code>input</code>事件，把<code>event.target.value</code>传给这个方法，最后就实现了改变绑定的数据的效果。</li><li>而<code>v-model</code>就是上面这种方式的语法糖，也就是把上面的写法封装了一下，方便我们使用</li></ul><h3 id="5-3-使用自定义事件创建自定义的表单输入组件"><a href="#5-3-使用自定义事件创建自定义的表单输入组件" class="headerlink" title="5.3 使用自定义事件创建自定义的表单输入组件"></a>5.3 使用自定义事件创建自定义的表单输入组件</h3><blockquote><p>理解了<code>v-model</code>的内幕，也就可以把这个效果用在自定义表单组件上了。来实现一个简单的只能输入hello的表单输入组件</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app5"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">my-component3</span> <span class="attr">v-model</span>=<span class="string">"hello"</span>&gt;</span><span class="tag">&lt;/<span class="name">my-component3</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;hello&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  Vue.component(<span class="string">'my-component3'</span>, &#123;</span></span><br><span class="line"><span class="xml">    template: `<span class="tag">&lt;<span class="name">input</span> <span class="attr">ref</span>=<span class="string">"input"</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">:value</span>=<span class="string">"value"</span> @<span class="attr">input</span>=<span class="string">"checkInput($event.target.value)"</span>&gt;</span>`,</span></span><br><span class="line"><span class="javascript">    props: [<span class="string">'value'</span>],</span></span><br><span class="line"><span class="undefined">    methods: &#123;</span></span><br><span class="line"><span class="undefined">      checkInput (value) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> hello = <span class="string">'hello'</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (!hello.includes(value)) &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.$emit(<span class="string">'input'</span>, hello)</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.$refs.input.value = hello</span></span><br><span class="line"><span class="javascript">        &#125; <span class="keyword">else</span> &#123;</span></span><br><span class="line"><span class="javascript">          <span class="keyword">this</span>.$emit(<span class="string">'input'</span>, value)</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="javascript">  <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">'#app5'</span>,</span></span><br><span class="line"><span class="undefined">    data: &#123;</span></span><br><span class="line"><span class="javascript">      hello: <span class="string">''</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="六、动态组件"><a href="#六、动态组件" class="headerlink" title="六、动态组件"></a>六、动态组件</h2><blockquote><p>通过使用保留的 <code>&lt;component&gt;</code> 元素，动态地绑定到它的 <code>is</code> 特性，可以让多个组件使用同一个挂载点，并动态切换</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app6"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"currentComponent"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"home"</span>&gt;</span>home<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"post"</span>&gt;</span>post<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">"about"</span>&gt;</span>about<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">"currentComponent"</span>&gt;</span><span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app6'</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="javascript">          currentComponent: <span class="string">'home'</span></span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        components: &#123;</span></span><br><span class="line"><span class="undefined">          home: &#123;</span></span><br><span class="line"><span class="xml">            template: `<span class="tag">&lt;<span class="name">header</span>&gt;</span>这是home组件<span class="tag">&lt;/<span class="name">header</span>&gt;</span>`</span></span><br><span class="line"><span class="undefined">          &#125;,</span></span><br><span class="line"><span class="undefined">          post: &#123;</span></span><br><span class="line"><span class="xml">            template: `<span class="tag">&lt;<span class="name">header</span>&gt;</span>这是post组件<span class="tag">&lt;/<span class="name">header</span>&gt;</span>`</span></span><br><span class="line"><span class="undefined">          &#125;,</span></span><br><span class="line"><span class="undefined">          about: &#123;</span></span><br><span class="line"><span class="xml">            template: `<span class="tag">&lt;<span class="name">header</span>&gt;</span>这是about组件<span class="tag">&lt;/<span class="name">header</span>&gt;</span>`</span></span><br><span class="line"><span class="undefined">          &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>保留切换出去的组件，避免重新渲染</strong></p><blockquote><p>如果把切换出去的组件保留在内存中，可以保留它的状态或避免重新渲染。为此可以添加一个 <code>keep-alive</code> 指令参数</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">keep-alive</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">component</span> <span class="attr">:is</span>=<span class="string">"currentComponent"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 非活动组件将被缓存！ --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">keep-alive</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="七、使用slot分发内容"><a href="#七、使用slot分发内容" class="headerlink" title="七、使用slot分发内容"></a>七、使用slot分发内容</h2><h3 id="7-1-单个slot"><a href="#7-1-单个slot" class="headerlink" title="7.1 单个slot"></a>7.1 单个slot</h3><blockquote><p>很多组件的使用方式是这样的：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;component&gt;&lt;/component&gt;</span><br></pre></td></tr></table></figure><ul><li>也就是说组件中是空的，没有放置任何文本或元素。但是原生的html元素都是可以进行嵌套的，<code>div</code>里面放<code>table</code>什么的。自定义组件开闭标签之间也可以放置内容，不过需要在定义组件时使用<code>slot</code>。</li><li><code>slot</code>相当于子组件设置了一个地方，如果在调用它的时候，往它的开闭标签之间放了东西，那么它就把这些东西放到<code>slot</code>中。</li><li>当子组件中没有<code>slot</code>时，父组件放在子组件标签内的东西将被丢弃；</li><li>子组件的<code>slot</code>标签内可以放置内容，当父组件没有放置内容在子组件标签内时，slot中的内容会渲染出来</li></ul><p>子组件的模板:</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是子组件的标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">slot</span>&gt;</span></span><br><span class="line">    只有在没有要分发的内容时才会显示。</span><br><span class="line">  <span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>父组件模板：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是父组件的标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">my-component</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一些初始内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">my-component</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>渲染结果：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我是父组件的标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h2</span>&gt;</span>我是子组件的标题<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这是一些初始内容<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="7-2-带名称的slot"><a href="#7-2-带名称的slot" class="headerlink" title="7.2 带名称的slot"></a>7.2 带名称的slot</h3><ul><li><code>slot</code>可以有很多个。那么子组件对于父组件放置的多余的内容如何放到各个<code>slot</code>中呢？方法就是子组件给每个<code>slot</code>起一个名字<code>name</code>，父组件放置多余的元素时，给每个元素的<code>slot</code>属性分配一个代表<code>slot</code>的名字。到时候，多余的内容就会根据自己的<code>slot</code>属性去找具有对应名字的<code>slot</code>元素。</li></ul><p><strong>注意</strong>：</p><ul><li>子组件可以有一个匿名的<code>slot</code>，当分发的多余内容找不到对应的<code>slot</code>时，就会进入这里面<br>如果子组件没有匿名的<code>slot</code>，当分发的多余内容找不到对应的<code>slot</code>时，就会被丢弃</li></ul><p>例如，假定我们有一个 <code>app-layout</code>组件，它的模板为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"header"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span> <span class="attr">name</span>=<span class="string">"footer"</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p>父组件模版：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">app-layout</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">h1</span> <span class="attr">slot</span>=<span class="string">"header"</span>&gt;</span>这里可能是一个页面标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>主要内容的一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>另一个主要段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span> <span class="attr">slot</span>=<span class="string">"footer"</span>&gt;</span>这里有一些联系信息<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">app-layout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>渲染结果为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">header</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>这里可能是一个页面标题<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>主要内容的一个段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>另一个主要段落。<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">footer</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>这里有一些联系信息<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="八、组件通信"><a href="#八、组件通信" class="headerlink" title="八、组件通信"></a>八、组件通信</h2><blockquote><p>在 Vue.js 中，父子组件的关系可以总结为 <code>props down</code>, <code>events up</code></p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-a057513f8294a129.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>父组件通过 <code>props</code> 向下传递数据给子组件，子组件通过 <code>events</code> 给父组件发送消息</p></blockquote><h2 id="8-1-父与子"><a href="#8-1-父与子" class="headerlink" title="8.1 父与子"></a>8.1 父与子</h2><blockquote><p>父组件是通过<code>props</code>属性给子组件通信的来看下代码</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;parent&gt;</span><br><span class="line">    &lt;child :child-com=&quot;content&quot;&gt;&lt;/child&gt; //注意这里用驼峰写法哦</span><br><span class="line">&lt;/parent&gt;</span><br><span class="line"></span><br><span class="line">data()&#123;</span><br><span class="line">    return &#123;</span><br><span class="line">        content:&apos;sichaoyun&apos;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>子组件通过props来接受数据</strong></p><blockquote><p>第一种方法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">props: [<span class="string">'childCom'</span>]</span><br></pre></td></tr></table></figure><blockquote><p>第二种方法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">props: &#123;</span><br><span class="line">    childCom: <span class="built_in">String</span> <span class="comment">// 这里指定了字符串类型，如果类型不一致会警告哦</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>第三种方法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">props: &#123;</span><br><span class="line">    childCom: &#123;</span><br><span class="line">        type: <span class="built_in">String</span>,</span><br><span class="line">        <span class="keyword">default</span>: <span class="string">'sichaoyun'</span> </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="8-2-子与父"><a href="#8-2-子与父" class="headerlink" title="8.2 子与父"></a>8.2 子与父</h3><blockquote><p><code>vue2.0</code>只允许单向数据传递，我们通过出发事件来改变组件的数据</p></blockquote><p>子组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> @<span class="attr">click</span>=<span class="string">"open"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    methods: &#123;</span></span><br><span class="line"><span class="undefined">       open() &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.$emit(<span class="string">'showbox'</span>,<span class="string">'the msg'</span>); <span class="comment">//触发showbox方法，'the msg'为向父组件传递的数据</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>父组件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">child</span> @<span class="attr">showbox</span>=<span class="string">"toshow"</span> <span class="attr">:msg</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">child</span>&gt;</span> //监听子组件触发的showbox事件,然后调用toshow方法</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">    methods: &#123;</span></span><br><span class="line"><span class="undefined">        toshow(msg) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.msg = msg;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="8-3-兄弟组件之间的通信"><a href="#8-3-兄弟组件之间的通信" class="headerlink" title="8.3 兄弟组件之间的通信"></a>8.3 兄弟组件之间的通信</h3><blockquote><p>我们可以实例化一个vue实例，相当于一个第三方</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">let vm = new Vue(); //创建一个新实例</span><br></pre></td></tr></table></figure><p>组件他哥</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div @click=&quot;ge&quot;&gt;&lt;/div&gt;</span><br><span class="line">methods: &#123;</span><br><span class="line">    ge() &#123;</span><br><span class="line">        vm.$emit(&apos;blur&apos;,&apos;sichaoyun&apos;); //触发事件</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>组件小弟接受大哥命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;div&gt;&lt;/div&gt;</span><br><span class="line">created() &#123;</span><br><span class="line">  vm.$on(&apos;blur&apos;, (arg) =&gt; &#123; </span><br><span class="line">        this.test= arg; // 接收</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、组件的基本使用&quot;&gt;&lt;a href=&quot;#一、组件的基本使用&quot; class=&quot;headerlink&quot; title=&quot;一、组件的基本使用&quot;&gt;&lt;/a&gt;一、组件的基本使用&lt;/h2&gt;&lt;h3 id=&quot;1-1-注册组件&quot;&gt;&lt;a href=&quot;#1-1-注册组件&quot; class=&quot;
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="Vue" scheme="http://blog.poetries.top/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>vue过滤器（八）</title>
    <link href="http://blog.poetries.top/2018/08/27/vue-filters/"/>
    <id>http://blog.poetries.top/2018/08/27/vue-filters/</id>
    <published>2018-08-27T02:20:32.000Z</published>
    <updated>2018-08-31T08:54:59.928Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、全局过滤器"><a href="#一、全局过滤器" class="headerlink" title="一、全局过滤器"></a>一、全局过滤器</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一个参数表示：过滤器的名称</span></span><br><span class="line"><span class="comment">// 第二个参数表示：函数，使用过滤器的时候，这个函数中的代码会被执行</span></span><br><span class="line">Vue.filter(<span class="string">'filterName'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">  <span class="comment">// value 表示要过滤的内容</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>例子</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Vue.filter(<span class="string">'date'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">input, format = <span class="string">'yyyy-MM-dd hh:mm:ss'</span>）&#123;</span></span></span><br><span class="line"><span class="function"><span class="params">      var o = &#123;</span></span></span><br><span class="line"><span class="function"><span class="params">        <span class="string">"M+"</span>: input.getMonth(</span>) + 1, //月份 </span></span><br><span class="line"><span class="function">        "<span class="title">d</span>+": <span class="title">input</span>.<span class="title">getDate</span>(<span class="params"></span>), //日 </span></span><br><span class="line"><span class="function">        "<span class="title">h</span>+": <span class="title">input</span>.<span class="title">getHours</span>(<span class="params"></span>), //小时 </span></span><br><span class="line"><span class="function">        "<span class="title">m</span>+": <span class="title">input</span>.<span class="title">getMinutes</span>(<span class="params"></span>), //分 </span></span><br><span class="line"><span class="function">        "<span class="title">s</span>+": <span class="title">input</span>.<span class="title">getSeconds</span>(<span class="params"></span>), //秒 </span></span><br><span class="line"><span class="function">        "<span class="title">q</span>+": <span class="title">Math</span>.<span class="title">floor</span>(<span class="params">(input.getMonth(</span>) + 3) / 3), //季度 </span></span><br><span class="line"><span class="function">        "<span class="title">S</span>": <span class="title">input</span>.<span class="title">getMilliseconds</span>(<span class="params"></span>) //毫秒 </span></span><br><span class="line"><span class="function">      &#125;;</span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">      <span class="title">if</span> (<span class="params"><span class="regexp">/(y+)/</span>.test(format</span>)) <span class="title">format</span> = <span class="title">format</span>.<span class="title">replace</span>(<span class="params">RegExp.$<span class="number">1</span>, (input.getFullYear(</span>) + "").<span class="title">substr</span>(<span class="params"><span class="number">4</span> - RegExp.$<span class="number">1.</span>length</span>));</span></span><br><span class="line"><span class="function">      // 不够2位的前面补0</span></span><br><span class="line"><span class="function">      <span class="title">for</span> (<span class="params">var k in o</span>)</span></span><br><span class="line"><span class="function">        <span class="title">if</span> (<span class="params">new RegExp(<span class="string">"("</span> + k + <span class="string">")"</span></span>).<span class="title">test</span>(<span class="params">format</span>)) </span></span><br><span class="line"><span class="function">        <span class="title">format</span> = <span class="title">format</span>.<span class="title">replace</span>(<span class="params">RegExp.$<span class="number">1</span>, (RegExp.$<span class="number">1.</span>length == <span class="number">1</span></span>) ? (<span class="params">o[k]</span>) : (<span class="params">(<span class="string">"00"</span> + o[k]</span>).<span class="title">substr</span>(<span class="params">(<span class="string">""</span> + o[k]</span>).<span class="title">length</span>)));</span></span><br><span class="line"><span class="function">      <span class="title">return</span> <span class="title">format</span>;</span></span><br><span class="line"><span class="function">    &#125;)</span></span><br></pre></td></tr></table></figure><p>使用</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;item.time | date('yyyy-MM-dd hh:mm:ss')&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>一个项目中，可能要用到很多过滤器来处理数据，多个组件公用的，可以注册全局过滤器。单个组件使用的，就挂载到实例<code>filters</code>中。项目做的多了以后，可以整理一套常用的<code>filters</code>，不用反复的写。比如：时间等各种操作，数据格式转化，单位换算，部分数据的<code>md5</code>加密等…</p></blockquote><p><strong>创建一个filters专门放各种过滤器</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-0bab828b656d1753.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>filter.js</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-2fd4231409acdea4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p> main.js</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-631dabdbf85a1bd8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>页面上直接用 ’｜过滤器名‘ 即可</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-0941a212212fa3aa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>或者直接在<code>main.js</code>中直接自定义全局过滤器</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-0efefc41d3b8e530.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="二、局部过滤器"><a href="#二、局部过滤器" class="headerlink" title="二、局部过滤器"></a>二、局部过滤器</h2><blockquote><p>在某一个vue实例的内创建的，只在当前实例中起作用</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  data:&#123;</span><br><span class="line">      </span><br><span class="line">  &#125;,</span><br><span class="line">   <span class="comment">// 通过 filters 属性创建局部过滤器</span></span><br><span class="line">   <span class="comment">// 注意：此处为 filters</span></span><br><span class="line">  filters: &#123;</span><br><span class="line">    filterName: <span class="function"><span class="keyword">function</span>(<span class="params">value, format</span>) </span>&#123;&#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、全局过滤器&quot;&gt;&lt;a href=&quot;#一、全局过滤器&quot; class=&quot;headerlink&quot; title=&quot;一、全局过滤器&quot;&gt;&lt;/a&gt;一、全局过滤器&lt;/h2&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="Vue" scheme="http://blog.poetries.top/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>vue 表单控件与绑定（七）</title>
    <link href="http://blog.poetries.top/2018/08/27/vue-form/"/>
    <id>http://blog.poetries.top/2018/08/27/vue-form/</id>
    <published>2018-08-27T02:10:32.000Z</published>
    <updated>2018-08-31T08:54:59.928Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、文本框"><a href="#一、文本框" class="headerlink" title="一、文本框"></a>一、文本框</h2><h3 id="1-1-普通文本框"><a href="#1-1-普通文本框" class="headerlink" title="1.1 普通文本框"></a>1.1 普通文本框</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app-1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"textBox"</span> <span class="attr">placeholder</span>=<span class="string">"输入内容..."</span>&gt;</span>输入的内容：&#123;&#123; textBox &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm1 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app-1'</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="javascript">            textBox: <span class="string">''</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-2-数字文本框"><a href="#1-2-数字文本框" class="headerlink" title="1.2 数字文本框"></a>1.2 数字文本框</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app-1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model.number</span>=<span class="string">"numberTextBox"</span> <span class="attr">type</span>=<span class="string">"number"</span> <span class="attr">placeholder</span>=<span class="string">"输入内容..."</span>&gt;</span> 输入的内容：&#123;&#123; numberTextBox &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm1 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app-1'</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="javascript">            numberTextBox: <span class="string">''</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>.number</code>参数会强制把返回值转成<code>Number</code>类型，因为就算是<code>type=&quot;number&quot;</code>，返回的也是字符串型</p></blockquote><h3 id="1-3-多行输入框"><a href="#1-3-多行输入框" class="headerlink" title="1.3 多行输入框"></a>1.3 多行输入框</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app-1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">textarea</span> <span class="attr">v-model</span>=<span class="string">"multiTextBox"</span> <span class="attr">placeholder</span>=<span class="string">"输入内容..."</span>&gt;</span><span class="tag">&lt;/<span class="name">textarea</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>输入的内容：<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span> <span class="attr">style</span>=<span class="string">"white-space:pre"</span>&gt;</span>&#123;&#123; multiTextBox &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm1 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app-1'</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="javascript">            multiTextBox: <span class="string">''</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>style=&quot;white-space:pre&quot;</code>表示空白会被浏览器保留。其行为方式类似 <code>HTML</code> 中的 <code>&lt;pre&gt;</code> 标签</p></blockquote><h2 id="二、复选框"><a href="#二、复选框" class="headerlink" title="二、复选框"></a>二、复选框</h2><h3 id="2-1-单个复选框"><a href="#2-1-单个复选框" class="headerlink" title="2.1 单个复选框"></a>2.1 单个复选框</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app-1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"singleCheckBox"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"checkbox"</span>&gt;</span>&#123;&#123; singleCheckBox &#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm1 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app-1'</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="javascript">            singleCheckBox: <span class="literal">false</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-定义属性单个复选框"><a href="#2-2-定义属性单个复选框" class="headerlink" title="2.2 定义属性单个复选框"></a>2.2 定义属性单个复选框</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app-1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"customSingleCheckBox"</span> <span class="attr">v-bind:true-value</span>=<span class="string">"customTrue"</span> <span class="attr">v-bind:false-value</span>=<span class="string">"customFalse"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"checkbox"</span>&gt;</span>&#123;&#123; customSingleCheckBox &#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm1 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app-1'</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="javascript">            customTrue: <span class="string">'真'</span>,</span></span><br><span class="line"><span class="javascript">            customFalse: <span class="string">'假'</span>,</span></span><br><span class="line"><span class="javascript">            customSingleCheckBox: <span class="string">'假'</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>v-bind:true-value</code>设置为真时的属性，<code>v-bind:false-value</code>设置为假时的属性</p></blockquote><h3 id="2-3-多个复选框"><a href="#2-3-多个复选框" class="headerlink" title="2.3 多个复选框"></a>2.3 多个复选框</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app-1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"tansea"</span> <span class="attr">value</span>=<span class="string">"TanSea"</span> <span class="attr">v-model</span>=<span class="string">"multiCheckBox"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"tansea"</span>&gt;</span>TanSea<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"google"</span> <span class="attr">value</span>=<span class="string">"Google"</span> <span class="attr">v-model</span>=<span class="string">"multiCheckBox"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"google"</span>&gt;</span>Google<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"checkbox"</span> <span class="attr">id</span>=<span class="string">"baidu"</span> <span class="attr">value</span>=<span class="string">"Baidu"</span> <span class="attr">v-model</span>=<span class="string">"multiCheckBox"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"baidu"</span>&gt;</span>Baidu<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>选择的项：&#123;&#123; multiCheckBox &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm1 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app-1'</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="undefined">            multiCheckBox: []</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="三、单选框"><a href="#三、单选框" class="headerlink" title="三、单选框"></a>三、单选框</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">复制代码</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app-1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">id</span>=<span class="string">"male"</span> <span class="attr">value</span>=<span class="string">"男"</span> <span class="attr">v-model</span>=<span class="string">"radioBox"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"male"</span>&gt;</span>男<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">id</span>=<span class="string">"female"</span> <span class="attr">value</span>=<span class="string">"女"</span> <span class="attr">v-model</span>=<span class="string">"radioBox"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">"female"</span>&gt;</span>女<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>选择的项：&#123;&#123; radioBox &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm1 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app-1'</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="javascript">            radioBox: <span class="string">''</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="四、下拉框"><a href="#四、下拉框" class="headerlink" title="四、下拉框"></a>四、下拉框</h2><h3 id="4-1-普通下拉框"><a href="#4-1-普通下拉框" class="headerlink" title="4.1 普通下拉框"></a>4.1 普通下拉框</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app-1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"comboBox"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">disabled</span> <span class="attr">value</span>=<span class="string">""</span>&gt;</span>请选择一项<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>男<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>女<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>选择的项：&#123;&#123; comboBox &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm1 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app-1'</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="javascript">            comboBox: <span class="string">''</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-2-动态绑定下拉框"><a href="#4-2-动态绑定下拉框" class="headerlink" title="4.2 动态绑定下拉框"></a>4.2 动态绑定下拉框</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app-1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"dynamicComboBox"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span> <span class="attr">v-for</span>=<span class="string">"optionItem in optionItems"</span> <span class="attr">v-bind:value</span>=<span class="string">"optionItem.value"</span>&gt;</span></span><br><span class="line">            &#123;&#123; optionItem.text &#125;&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>选择的项：&#123;&#123; dynamicComboBox &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm1 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app-1'</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="javascript">            dynamicComboBox: <span class="string">''</span>,</span></span><br><span class="line"><span class="undefined">                optionItems: [</span></span><br><span class="line"><span class="javascript">                    &#123; <span class="attr">value</span>: <span class="string">'TanSea'</span>, <span class="attr">text</span>: <span class="string">'双子宫殿'</span> &#125;,</span></span><br><span class="line"><span class="javascript">                    &#123; <span class="attr">value</span>: <span class="string">'Google'</span>, <span class="attr">text</span>: <span class="string">'谷歌搜索'</span> &#125;,</span></span><br><span class="line"><span class="javascript">                    &#123; <span class="attr">value</span>: <span class="string">'Baidu'</span>, <span class="attr">text</span>: <span class="string">'百度搜索'</span> &#125;</span></span><br><span class="line"><span class="undefined">                ]</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4-3-多选列表"><a href="#4-3-多选列表" class="headerlink" title="4.3 多选列表"></a>4.3 多选列表</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app-1"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"multiComboBox"</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>双子宫殿<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>谷歌搜索<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">option</span>&gt;</span>百度搜索<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>选择的项：&#123;&#123; multiComboBox &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm1 = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#app-1'</span>,</span></span><br><span class="line"><span class="undefined">        data: &#123;</span></span><br><span class="line"><span class="undefined">            multiComboBox: []</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、文本框&quot;&gt;&lt;a href=&quot;#一、文本框&quot; class=&quot;headerlink&quot; title=&quot;一、文本框&quot;&gt;&lt;/a&gt;一、文本框&lt;/h2&gt;&lt;h3 id=&quot;1-1-普通文本框&quot;&gt;&lt;a href=&quot;#1-1-普通文本框&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="Vue" scheme="http://blog.poetries.top/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>vue事件（六）</title>
    <link href="http://blog.poetries.top/2018/08/26/vue-event/"/>
    <id>http://blog.poetries.top/2018/08/26/vue-event/</id>
    <published>2018-08-26T16:10:32.000Z</published>
    <updated>2018-08-31T08:54:59.928Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、方法传参"><a href="#一、方法传参" class="headerlink" title="一、方法传参"></a>一、方法传参</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"test"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"sayHi('你好')"</span>&gt;</span>说你好<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="comment">&lt;!--这里使用@--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"sayHi('我被点击了')"</span>&gt;</span>说我被点击了<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="comment">&lt;!--这里使用@--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> myVue = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#test'</span>,</span></span><br><span class="line"><span class="javascript">        methods: &#123;      <span class="comment">//这里使用methods</span></span></span><br><span class="line"><span class="javascript">            sayHi: <span class="function"><span class="keyword">function</span> (<span class="params">message</span>) </span>&#123;</span></span><br><span class="line"><span class="undefined">                alert(message)</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="二、vue访问原生-DOM-事件"><a href="#二、vue访问原生-DOM-事件" class="headerlink" title="二、vue访问原生 DOM 事件"></a>二、vue访问原生 DOM 事件</h2><blockquote><p>用<code>$event</code>获取</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> @<span class="attr">click</span>=<span class="string">"changeColor('你好',$event)"</span>&gt;</span>点击我<span class="tag">&lt;/<span class="name">button</span>&gt;</span> <span class="comment">&lt;!--这里使用@--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"height: 100px;width: 100px;background-color: red;"</span> @<span class="attr">mouseover</span>=<span class="string">"over('鼠标从我上面滑过',$event)"</span>&gt;</span></span><br><span class="line">    鼠标从我上面滑过试试</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">           </span><br><span class="line">            </span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">"text/javascript"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> myVue = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el: <span class="string">'#test'</span>,</span></span><br><span class="line"><span class="javascript">        methods: &#123;      <span class="comment">//这里使用methods</span></span></span><br><span class="line"><span class="javascript">            changeColor: <span class="function"><span class="keyword">function</span> (<span class="params">message, event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                alert(message+event);    <span class="comment">//弹出我被点击了,事件是[object MouseEvent]</span></span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="javascript">            over :<span class="function"><span class="keyword">function</span> (<span class="params">message, event</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">                alert(message+event);   <span class="comment">//弹出鼠标从我上面滑过,事件是[object MouseEvent]</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="三、事件修饰符"><a href="#三、事件修饰符" class="headerlink" title="三、事件修饰符"></a>三、事件修饰符</h2><blockquote><p>事件修饰符有基本的6种</p></blockquote><p><strong>.stop阻止事件冒泡</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop</span>=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>.prevent阻止默认事件</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">"onSubmit"</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>.capture时间捕获（从上到下）</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.capture</span>=<span class="string">"doThis"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>.self只在元素自身回调</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.self</span>=<span class="string">"doThat"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>.once只触发一次</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.once</span>=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>使用修饰符时，顺序很重要；相应的代码会以同样的顺序产生。因此，用 <a href="mailto:`@click.prevent.self" target="_blank" rel="noopener">`@click.prevent.self</a><code>会阻止所有的点击，而</code>@click.self.prevent` 只会阻止元素上的点击</p></blockquote><h2 id="四、键值修饰符"><a href="#四、键值修饰符" class="headerlink" title="四、键值修饰符"></a>四、键值修饰符</h2><blockquote><p>在监听键盘事件时，我们经常需要监测常见的键值。 Vue 允许为 v-on 在监听键盘事件时添加关键修饰符</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    &#123;&#123;msg&#125;&#125;</span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-on:keydown</span>=<span class="string">"ke"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">        data:&#123;</span></span><br><span class="line"><span class="javascript">            msg:<span class="string">"事件处理"</span>,</span></span><br><span class="line"><span class="undefined">            counter:0</span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        methods:&#123;</span></span><br><span class="line"><span class="javascript">            ke:<span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">if</span>(e.keyCode == <span class="number">13</span>)&#123;</span></span><br><span class="line"><span class="javascript">                    <span class="keyword">this</span>.msg = e.target.value;</span></span><br><span class="line"><span class="javascript">                    e.target.value = <span class="string">""</span>;</span></span><br><span class="line"><span class="undefined">                &#125;</span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>enter</code>(回车)</li><li><code>tab</code>（tab切换）</li><li><code>delete</code> (捕获 “删除” 和 “退格” 键)</li><li><code>esc</code>（esc键）</li><li><code>space</code>（退档键）</li><li><code>up</code>（上键）</li><li><code>down</code>（下键）</li><li><code>left</code>（左键）</li><li><code>right</code>（右键）</li></ul><blockquote><p>我们也可以通过全局<code>config.keyCodes</code> 对象自定义键值修饰符别名</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.config.keyCodes.f1 = 112</span><br></pre></td></tr></table></figure><p>、</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、方法传参&quot;&gt;&lt;a href=&quot;#一、方法传参&quot; class=&quot;headerlink&quot; title=&quot;一、方法传参&quot;&gt;&lt;/a&gt;一、方法传参&lt;/h2&gt;&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutt
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="Vue" scheme="http://blog.poetries.top/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>vue生命周期（五）</title>
    <link href="http://blog.poetries.top/2018/08/26/vue-lifecircle/"/>
    <id>http://blog.poetries.top/2018/08/26/vue-lifecircle/</id>
    <published>2018-08-26T09:21:32.000Z</published>
    <updated>2018-08-31T08:54:59.928Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>每个Vue实例在被创建之前都要经过一系列的初始化过程,这个过程就是vue的生命周期</p></blockquote><p><img src="https://cn.vuejs.org/images/lifecycle.png" alt=""></p><h2 id="一、生命周期钩子函数"><a href="#一、生命周期钩子函数" class="headerlink" title="一、生命周期钩子函数"></a>一、生命周期钩子函数</h2><ul><li><code>beforeCreate</code></li><li><code>created</code></li><li><code>beforeMount</code></li><li><code>mounted</code></li><li><code>beforeUpdate</code></li><li><code>updated</code></li><li><code>beforeDestroy</code></li><li><code>destroyed</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    data: &#123;</span><br><span class="line">      message: <span class="string">'Vue的生命周期'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    beforeCreate: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.group(<span class="string">'------beforeCreate创建前状态------'</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span> , <span class="string">"el     : "</span> + <span class="keyword">this</span>.$el); <span class="comment">//undefined</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"data   : "</span> + <span class="keyword">this</span>.$data); <span class="comment">//undefined </span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"message: "</span> + <span class="keyword">this</span>.message) </span><br><span class="line">    &#125;,</span><br><span class="line">    created: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.group(<span class="string">'------created创建完毕状态------'</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"el     : "</span> + <span class="keyword">this</span>.$el); <span class="comment">//undefined</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"data   : "</span> + <span class="keyword">this</span>.$data); <span class="comment">//已被初始化 </span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"message: "</span> + <span class="keyword">this</span>.message); <span class="comment">//已被初始化</span></span><br><span class="line">    &#125;,</span><br><span class="line">    beforeMount: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.group(<span class="string">'------beforeMount挂载前状态------'</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"el     : "</span> + (<span class="keyword">this</span>.$el)); <span class="comment">//已被初始化</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"data   : "</span> + <span class="keyword">this</span>.$data); <span class="comment">//已被初始化  </span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"message: "</span> + <span class="keyword">this</span>.message); <span class="comment">//已被初始化  </span></span><br><span class="line">    &#125;,</span><br><span class="line">    mounted: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.group(<span class="string">'------mounted 挂载结束状态------'</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"el     : "</span> + <span class="keyword">this</span>.$el); <span class="comment">//已被初始化</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el);    </span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"data   : "</span> + <span class="keyword">this</span>.$data); <span class="comment">//已被初始化</span></span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"message: "</span> + <span class="keyword">this</span>.message); <span class="comment">//已被初始化 </span></span><br><span class="line">    &#125;,</span><br><span class="line">    beforeUpdate: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.group(<span class="string">'beforeUpdate 更新前状态===============》'</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"el     : "</span> + <span class="keyword">this</span>.$el);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el);   </span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"data   : "</span> + <span class="keyword">this</span>.$data); </span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"message: "</span> + <span class="keyword">this</span>.message); </span><br><span class="line">    &#125;,</span><br><span class="line">    updated: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.group(<span class="string">'updated 更新完成状态===============》'</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"el     : "</span> + <span class="keyword">this</span>.$el);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el); </span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"data   : "</span> + <span class="keyword">this</span>.$data); </span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"message: "</span> + <span class="keyword">this</span>.message); </span><br><span class="line">    &#125;,</span><br><span class="line">    beforeDestroy: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.group(<span class="string">'beforeDestroy 销毁前状态===============》'</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"el     : "</span> + <span class="keyword">this</span>.$el);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el);    </span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"data   : "</span> + <span class="keyword">this</span>.$data); </span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"message: "</span> + <span class="keyword">this</span>.message); </span><br><span class="line">    &#125;,</span><br><span class="line">    destroyed: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.group(<span class="string">'destroyed 销毁完成状态===============》'</span>);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"el     : "</span> + <span class="keyword">this</span>.$el);</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="keyword">this</span>.$el);  </span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"data   : "</span> + <span class="keyword">this</span>.$data); </span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"%c%s"</span>, <span class="string">"color:red"</span>,<span class="string">"message: "</span> + <span class="keyword">this</span>.message)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/1480597-6a86a28b511c8325.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="二、生命周期详解"><a href="#二、生命周期详解" class="headerlink" title="二、生命周期详解"></a>二、生命周期详解</h2><blockquote><p><code>vue</code>实例在创建过程中调用的几个生命周期钩子</p></blockquote><h3 id="2-1-beforeCreate、created"><a href="#2-1-beforeCreate、created" class="headerlink" title="2.1 beforeCreate、created"></a>2.1 beforeCreate、created</h3><blockquote><p>在beforeCreate和created钩子函数之间的生命周期</p></blockquote><ul><li>在这个生命周期之间，进行初始化事件，进行数据的观测，可以看到在<code>created</code>的时候数据已经和<code>data</code>属性进行绑定（放在<code>data</code>中的属性当值发生改变的同时，视图也会改变）,此时还是没有el选项</li></ul><h3 id="2-2-created、beforeMount"><a href="#2-2-created、beforeMount" class="headerlink" title="2.2 created、beforeMount"></a>2.2 created、beforeMount</h3><blockquote><p>created钩子函数和beforeMount间的生命周期</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-2f4e9e2df0a1d7fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ul><li>首先会判断对象是否有el选项。如果有的话就继续向下编译，如果没有<code>el</code>选项，则停止编译，也就意味着停止了生命周期，直到在该vue实例上调用<code>vm.$mount(el)</code>。</li><li>此时注释掉代码中 <code>el: &#39;#app&#39;,</code> 然后运行可以看到到<code>created</code>的时候就停止了</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/1480597-5403bd286ce4ea9e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>如果我们在后面继续调用<code>vm.$mount(el)</code>,可以发现代码继续向下执行了</p></blockquote><ul><li><code>vm.$mount(el)</code> //这个el参数就是挂在的dom接点</li></ul><p><strong>template参数选项的有无对生命周期的影响</strong></p><ul><li>如果vue实例对象中有template参数选项，则将其作为模板编译成<code>render</code>函数</li><li>如果没有<code>template</code>选项，则将外部HTML作为模板编译</li><li>可以看到<code>template</code>中的模板优先级要高于<code>outer HTML</code>的优先级</li></ul><blockquote><p>修改代码如下, 在HTML结构中增加了一串html，在<code>vue</code>对象中增加了<code>template</code>选项</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width, initial-scale=1.0"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">title</span>&gt;</span>vue生命周期学习<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://cdn.bootcss.com/vue/2.4.2/vue.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--html中修改的--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;message + '这是在outer HTML中的'&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="javascript">    template: <span class="string">"&lt;h1&gt;&#123;&#123;message +'这是在template中的'&#125;&#125;&lt;/h1&gt;"</span>, <span class="comment">//在vue配置项中修改的</span></span></span><br><span class="line"><span class="undefined">    data: &#123;</span></span><br><span class="line"><span class="javascript">      message: <span class="string">'Vue的生命周期'</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>输出 <code>Vue的生命周期--这是在template中的</code></p></blockquote><p>那么将vue对象中<code>template</code>的选项注释掉后打印如下信息</p><blockquote><p>输出 <code>Vue的生命周期--这是在outer HTML中的</code></p></blockquote><ul><li>可以想想什么el的判断要在template之前了~是因为vue需要通过el找到对应的outer template</li><li>在vue对象中还有一个render函数，它是以createElement作为参数，然后做渲染操作，而且我们可以直接嵌入JSX.</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">    el: <span class="string">'#app'</span>,</span><br><span class="line">    render: <span class="function"><span class="keyword">function</span>(<span class="params">createElement</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> createElement(<span class="string">'h1'</span>, <span class="string">'this is createElement'</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>所以综合排名优先级</strong></p><ul><li><code>render</code>函数选项 &gt; <code>template</code>选项 &gt; <code>outer HTML</code></li></ul><h3 id="2-3-beforeMount、mounted"><a href="#2-3-beforeMount、mounted" class="headerlink" title="2.3 beforeMount、mounted"></a>2.3 beforeMount、mounted</h3><blockquote><p>beforeMount和mounted钩子函数间的生命周期</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-8b2cb230f2e5722f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>可以看到此时是给<code>vue</code>实例对象添加<code>$el</code>成员，并且替换掉挂在的<code>DOM</code>元素。因为在之前<code>console</code>中打印的结果可以看到<code>beforeMount</code>之前<code>el</code>上还是<code>undefined</code></p></blockquote><h3 id="2-4-mounted"><a href="#2-4-mounted" class="headerlink" title="2.4 mounted"></a>2.4 mounted</h3><p><img src="https://upload-images.jianshu.io/upload_images/1480597-39733c55ff054c34.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>在<code>mounted</code>之前h1中还是通过<code>{message}</code>进行占位的，因为此时还有挂在到页面上，还是JavaScript中的虚拟DOM形式存在的。在<code>mounted</code>之后可以看到h1中的内容发生了变化</p></blockquote><h3 id="2-5-beforeUpdate、updated"><a href="#2-5-beforeUpdate、updated" class="headerlink" title="2.5 beforeUpdate、updated"></a>2.5 beforeUpdate、updated</h3><blockquote><p><code>beforeUpdate</code>钩子函数和<code>updated</code>钩子函数间的生命周期</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-300f61cbacb6d931.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>当vue发现data中的数据发生了改变，会触发对应组件的重新渲染，先后调用<code>beforeUpdate</code>和<code>updated</code>钩子函数。我们在console中输入</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vm.message = &apos;触发组件更新&apos;</span><br></pre></td></tr></table></figure><p>发现触发了组件的更新</p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-150de7cdd6b1d0e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="2-6-beforeDestroy、destroyed"><a href="#2-6-beforeDestroy、destroyed" class="headerlink" title="2.6 beforeDestroy、destroyed"></a>2.6 beforeDestroy、destroyed</h3><blockquote><p><code>beforeDestroy</code>和<code>destroyed</code>钩子函数间的生命周期</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-e116245fa53bed64.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><ul><li><code>beforeDestroy</code>钩子函数在实例销毁之前调用。在这一步，实例仍然完全可用。</li><li><code>destroyed</code>钩子函数在<code>Vue</code> 实例销毁后调用。调用后，<code>Vue</code>实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;每个Vue实例在被创建之前都要经过一系列的初始化过程,这个过程就是vue的生命周期&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://cn.vuejs.org/images/lifecycle.png&quot; alt=&quot;&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="Vue" scheme="http://blog.poetries.top/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>vue 基本指令（四）</title>
    <link href="http://blog.poetries.top/2018/08/26/vue-base-directive/"/>
    <id>http://blog.poetries.top/2018/08/26/vue-base-directive/</id>
    <published>2018-08-26T06:10:32.000Z</published>
    <updated>2018-08-31T08:54:59.928Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://upload-images.jianshu.io/upload_images/1480597-95bb7e600db0b04a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h3 id="一、常用指令"><a href="#一、常用指令" class="headerlink" title="一、常用指令"></a>一、常用指令</h3><p><strong>v-text</strong></p><blockquote><p>更新元素的 textContent</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-text</span>=<span class="string">"msg"</span>&gt;</span><span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>v-html</strong></p><blockquote><p>更新元素的 innerHTML</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;h1 v-html=&quot;msg&quot;&gt;&lt;/h1&gt;</span><br></pre></td></tr></table></figure><p><strong>v-bind</strong></p><blockquote><p>当表达式的值改变时，将其产生的连带影响，响应式地作用于 DOM</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 完整语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">"url"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">"url"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 2 创建 Vue 的实例对象</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// el 用来指定vue挂载到页面中的元素，值是：选择器</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 理解：用来指定vue管理的HTML区域</span></span></span><br><span class="line"><span class="javascript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 数据对象，用来给视图中提供数据的</span></span></span><br><span class="line"><span class="undefined">      data: &#123;</span></span><br><span class="line"><span class="javascript">        url: <span class="string">'http://www.baidu.com'</span></span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>v-on</strong></p><ul><li>作用：绑定事件</li><li>语法：<code>v-on:click=&quot;say&quot;</code> or <code>v-on:click=&quot;say(&#39;参数&#39;, $event)&quot;</code></li><li>简写：<code>@click=&quot;say&quot;</code></li><li>说明：绑定的事件从<code>methods</code>中获取</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 完整语法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click</span>=<span class="string">"doSomething"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 缩写 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">"doSomething"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 方法传参 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">"doSomething（“123”）"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 2 创建 Vue 的实例对象</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="javascript">      <span class="comment">// methods属性用来给vue实例提供方法（事件）</span></span></span><br><span class="line"><span class="undefined">      methods: &#123;</span></span><br><span class="line"><span class="javascript">        doSomething: <span class="function"><span class="keyword">function</span>(<span class="params">str</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">//接受参数，并输出</span></span></span><br><span class="line"><span class="javascript">          <span class="built_in">console</span>.log(str);</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>事件修饰符</p></blockquote><ul><li><code>.stop</code> 阻止冒泡，调用 <code>event.stopPropagation()</code></li><li><code>.prevent</code> 阻止默认事件，调用 <code>event.preventDefault()</code></li><li><code>.capture</code> 添加事件侦听器时使用事件捕获模式</li><li><code>.self</code> 只当事件在该元素本身（比如不是子元素）触发时触发回调</li><li><code>.once</code> 事件只触发一次</li></ul><p><strong>v-model</strong></p><ul><li>作用：在表单元素上创建双向数据绑定</li><li>说明：监听用户的输入事件以更新数据</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-model</span>=<span class="string">"message"</span> <span class="attr">placeholder</span>=<span class="string">"edit me"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>Message is: &#123;&#123; message &#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>v-for</strong></p><blockquote><p>基于源数据多次渲染元素或模板块</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1 基础用法 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span>&gt;</span></span><br><span class="line">  &#123;&#123; item.text &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- item 为当前项，index 为索引 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"(item, index) in list"</span>&gt;</span>&#123;&#123;item&#125;&#125; -- &#123;&#123;index&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- item 为值，key 为键，index 为索引 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"(item, key, index) in obj"</span>&gt;</span>&#123;&#123;item&#125;&#125; -- &#123;&#123;key&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"item in 10"</span>&gt;</span>&#123;&#123;item&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>key属性</p></blockquote><ul><li>推荐：使用 <code>v-for</code>的时候提供 <code>key</code> 属性，以获得性能提升。</li><li>说明：使用 <code>key</code>，<code>VUE</code>会基于 <code>key</code> 的变化重新排列元素顺序，并且会移除 key 不存在的元素。</li><li>官方解释：当 <code>Vue.js</code>用 <code>v-for</code> 正在更新已渲染过的元素列表时，它默认用“就地复用”策略。如果数据项的顺序被改变，Vue 将不会移动 DOM 元素来匹配数据项的顺序， 而是简单复用此处每个元素，并且确保它在特定索引下显示已被渲染过的每个元素。这个类似 Vue 1.x 的 <code>track-by=&quot;$index&quot;</code></li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-for</span>=<span class="string">"item in items"</span> <span class="attr">:key</span>=<span class="string">"item.id"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 内容 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="二、样式处理-class和style"><a href="#二、样式处理-class和style" class="headerlink" title="二、样式处理 -class和style"></a>二、样式处理 -class和style</h2><ul><li>说明：这两个都是HTML元素的属性，使用<code>v-bind</code>，只需要通过表达式计算出字符串结果即可</li><li>表达式的类型：字符串、数组、对象</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"&#123; active: true &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> ===&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"active"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:class</span>=<span class="string">"['active', 'text-danger']"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> ===&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"active text-danger"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 3 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"[&#123; active: true &#125;, errorClass]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> ===&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"active text-danger"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">--- style ---</span><br><span class="line"><span class="comment">&lt;!-- 1 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">"&#123; color: activeColor, fontSize: fontSize + 'px' &#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 2 将多个 样式对象 应用到一个元素上--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">"[baseStyles, overridingStyles]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">--- script ---</span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="comment">// 2 创建 Vue 的实例对象</span></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> vm = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">      el: <span class="string">'#app'</span>,</span></span><br><span class="line"><span class="undefined">      data: &#123;</span></span><br><span class="line"><span class="javascript">        activeColor: <span class="string">'red'</span>,</span></span><br><span class="line"><span class="undefined">        fontSize: 30,</span></span><br><span class="line"><span class="undefined">        baseStyles: &#123;</span></span><br><span class="line"><span class="javascript">          color: <span class="string">'red'</span>,</span></span><br><span class="line"><span class="javascript">          <span class="string">'font-size'</span>: <span class="string">'30px'</span></span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        overridingStyles: &#123;</span></span><br><span class="line"><span class="javascript">          color: <span class="string">'green'</span>,</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">  </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="三、v-if-和-v-show"><a href="#三、v-if-和-v-show" class="headerlink" title="三、v-if 和 v-show"></a>三、v-if 和 v-show</h2><blockquote><p>条件渲染</p></blockquote><ul><li><code>v-if</code>：根据表达式的值的真假条件，销毁或重建元素</li><li><code>v-show</code>：根据表达式之真假值，切换元素的 display CSS 属性</li></ul><h2 id="四、提升用户体验：v-cloak"><a href="#四、提升用户体验：v-cloak" class="headerlink" title="四、提升用户体验：v-cloak"></a>四、提升用户体验：v-cloak</h2><ul><li>这个指令保持在元素上直到关联实例结束编译。和 CSS 规则如 <code>[v-cloak] { display: none }</code> 一起用时，这个指令可以隐藏未编译的 <code>Mustache</code> 标签直到实例准备完毕。</li><li>防止刷新页面，网速慢的情况下出现<code>{ message }</code>等数据格式</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-cloak</span>&gt;</span></span><br><span class="line">  &#123;&#123; message &#125;&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="五、提升性能"><a href="#五、提升性能" class="headerlink" title="五、提升性能"></a>五、提升性能</h2><p><strong>v-pre</strong></p><blockquote><p>说明：跳过这个元素和它的子元素的编译过程。可以用来显示原始 Mustache 标签。跳过大量没有指令的节点会加快编译</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-pre</span>&gt;</span>&#123;&#123; this will not be compiled &#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>v-once</strong></p><blockquote><p>只渲染元素和组件一次。随后的重新渲染，元素/组件及其所有的子节点将被视为静态内容并跳过。这可以用于优化更新性能</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-once</span>&gt;</span>This will never change: &#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="六、Dom元素获取-v-ref"><a href="#六、Dom元素获取-v-ref" class="headerlink" title="六、Dom元素获取: v-ref"></a>六、Dom元素获取: v-ref</h2><blockquote><p>在父组件上注册一个子组件的索引,便于直接访问,不需要表达式,必须提供参数id。可以通过父组件的<code>$refs</code>对象访问子组件</p></blockquote><ul><li>当<code>v-ref</code>和<code>v-for</code>一起使用时,注册的值将是一个数组，包含多有的子组件，对应于绑定数组；如果<code>v-for</code>使用在一个对象上，注册的值将是一个对象，包含所有的子组件，对应于绑定对象</li></ul><p><strong>Dom元素获取: v-el</strong></p><blockquote><p>为Dom元素注册一个索引，方便通过所属实例的<code>$els</code>访问这个元素,可以用<code>v-el：some-el</code>设置<code>this.$els.someEl.</code></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-el:msg</span>&gt;</span>hello<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">v-el:other-msg</span>&gt;</span>world<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>通过<code>this.$els</code>获取相应的DOM元素:</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.$els.msg.textContent  <span class="comment">// ==&gt;  "hello"</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>.$els.otherMsg.textContent  <span class="comment">// ==&gt;  "world"</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;http://upload-images.jianshu.io/upload_images/1480597-95bb7e600db0b04a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot; 
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="Vue" scheme="http://blog.poetries.top/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>vue之class与style绑定（三）</title>
    <link href="http://blog.poetries.top/2018/08/26/vue-bind-class-style/"/>
    <id>http://blog.poetries.top/2018/08/26/vue-bind-class-style/</id>
    <published>2018-08-26T06:02:32.000Z</published>
    <updated>2018-08-31T08:54:59.928Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、绑定HTML-class"><a href="#一、绑定HTML-class" class="headerlink" title="一、绑定HTML class"></a>一、绑定HTML class</h2><blockquote><p>有三种方法 1、直接绑定 2、数据属性绑定 3、计算属性绑定</p></blockquote><h3 id="1-1-对象语法"><a href="#1-1-对象语法" class="headerlink" title="1.1 对象语法"></a>1.1 对象语法</h3><blockquote><p>如果数据属性 发生改变，<code>class</code> 列表将相应地更新</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"&#123;active:isActive&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el:<span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">    data:&#123;</span></span><br><span class="line"><span class="javascript">        msg:<span class="string">"对象语法"</span>,</span></span><br><span class="line"><span class="javascript">        isActive:<span class="literal">true</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p><code>v-bind:class</code> 指令也可以与普通的 <code>class</code> 属性共存</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">.active&#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    background: red;</span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span> = <span class="string">"box"</span> <span class="attr">v-bind:class</span>=<span class="string">"&#123;active:isActive&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">        data:&#123;</span></span><br><span class="line"><span class="javascript">            msg:<span class="string">"对象语法"</span>,</span></span><br><span class="line"><span class="javascript">            isActive:<span class="literal">true</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>可以直接绑定数据里的一个对象</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">.active1&#123;</span><br><span class="line">    width: 100px;</span><br><span class="line">    height: 100px;</span><br><span class="line">    margin-top: 10px;</span><br><span class="line">    border: 1px solid #ccc ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"classObj"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">    el:<span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">    data:&#123;</span></span><br><span class="line"><span class="undefined">        classObj:&#123;</span></span><br><span class="line"><span class="javascript">            active:<span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">            aaa:<span class="literal">false</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">&#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>可以在这里绑定返回对象的计算属性。这是一个常用且强大的模式</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-class">.aaa</span>&#123;</span></span><br><span class="line"><span class="undefined">    background: green;</span></span><br><span class="line"><span class="undefined">    width: 100px;</span></span><br><span class="line"><span class="undefined">    height: 100px;</span></span><br><span class="line"><span class="undefined">    margin-top: 10px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"Obj"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">        data:&#123;</span></span><br><span class="line"><span class="javascript">            msg:<span class="string">"对象语法"</span>,</span></span><br><span class="line"><span class="javascript">            isActive:<span class="literal">true</span></span></span><br><span class="line"><span class="undefined">        &#125;,</span></span><br><span class="line"><span class="undefined">        computed:&#123;</span></span><br><span class="line"><span class="javascript">            Obj:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">return</span>&#123;</span></span><br><span class="line"><span class="javascript">                    aaa:<span class="keyword">this</span>.isActive</span></span><br><span class="line"><span class="undefined">                &#125; </span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-2-数组语法"><a href="#1-2-数组语法" class="headerlink" title="1.2 数组语法"></a>1.2 数组语法</h3><blockquote><p>我们可以把一个数组传给 <code>v-bind:class</code>，以应用一个 <code>class</code> 列表</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.active</span>&#123;</span></span><br><span class="line"><span class="undefined">        width: 100px;</span></span><br><span class="line"><span class="undefined">        height: 100px;</span></span><br><span class="line"><span class="undefined">        background: red;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.active1</span>&#123;</span></span><br><span class="line"><span class="undefined">        color: yellow;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.aaa</span>&#123;</span></span><br><span class="line"><span class="css">       <span class="selector-tag">border</span>: 5<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span> = <span class="string">"box"</span> <span class="attr">v-bind:class</span>=<span class="string">"[isActive,isActive1,isActive2]"</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">        data:&#123;</span></span><br><span class="line"><span class="javascript">            msg:<span class="string">"对象语法"</span>,</span></span><br><span class="line"><span class="javascript">            isActive:<span class="string">"active"</span>,</span></span><br><span class="line"><span class="javascript">            isActive1:<span class="string">"active1"</span>,</span></span><br><span class="line"><span class="javascript">            isActive2:<span class="string">"aaa"</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>可以用三元表达式</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.active</span>&#123;</span></span><br><span class="line"><span class="undefined">        width: 100px;</span></span><br><span class="line"><span class="undefined">        height: 100px;</span></span><br><span class="line"><span class="undefined">        background: red;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.active1</span>&#123;</span></span><br><span class="line"><span class="undefined">        color: yellow;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.aaa</span>&#123;</span></span><br><span class="line"><span class="css">       <span class="selector-tag">border</span>: 5<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span> = <span class="string">"box"</span> <span class="attr">v-bind:class</span>=<span class="string">"[isActive,isActive1,isActive5 ? isActive2 : '']"</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">        data:&#123;</span></span><br><span class="line"><span class="javascript">            msg:<span class="string">"对象语法"</span>,</span></span><br><span class="line"><span class="javascript">            isActive5:<span class="literal">false</span>,</span></span><br><span class="line"><span class="javascript">            isActive:<span class="string">"active"</span>,</span></span><br><span class="line"><span class="javascript">            isActive1:<span class="string">"active1"</span>,</span></span><br><span class="line"><span class="javascript">            isActive2:<span class="string">"aaa"</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>当有多个条件 class 时这样写有些繁琐。可以在数组语法中使用对象语法</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.active</span>&#123;</span></span><br><span class="line"><span class="undefined">        width: 100px;</span></span><br><span class="line"><span class="undefined">        height: 100px;</span></span><br><span class="line"><span class="undefined">        background: red;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.active1</span>&#123;</span></span><br><span class="line"><span class="undefined">        color: yellow;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.aaa</span>&#123;</span></span><br><span class="line"><span class="css">       <span class="selector-tag">border</span>: 5<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span> = <span class="string">"box"</span> <span class="attr">v-bind:class</span>=<span class="string">"[isActive,&#123;active1:isActive5&#125;,isActive5 ? isActive2 : '']"</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">        data:&#123;</span></span><br><span class="line"><span class="javascript">            msg:<span class="string">"对象语法"</span>,</span></span><br><span class="line"><span class="javascript">            isActive5:<span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">            isActive:<span class="string">"active"</span>,</span></span><br><span class="line"><span class="javascript">            isActive1:<span class="string">"active1"</span>,</span></span><br><span class="line"><span class="javascript">            isActive2:<span class="string">"aaa"</span></span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-3-在组件上"><a href="#1-3-在组件上" class="headerlink" title="1.3 在组件上"></a>1.3 在组件上</h3><blockquote><p>在一个自定义组件上用到 class 属性的时候，这些类将被添加到根元素上面，这个元素上已经存在的类不会被覆盖</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">    <span class="selector-class">.active1</span>&#123;</span></span><br><span class="line"><span class="undefined">        width: 100px;</span></span><br><span class="line"><span class="undefined">        background: red;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.aaa</span>&#123;</span></span><br><span class="line"><span class="css">        <span class="selector-tag">border</span>: 5<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#ccc</span>;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.bbb</span>&#123;</span></span><br><span class="line"><span class="undefined">        height: 100px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">tanchu</span> <span class="attr">v-bind:class</span>=<span class="string">"classObj"</span>&gt;</span><span class="tag">&lt;/<span class="name">tanchu</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    Vue.component(<span class="string">'tanchu'</span>, &#123;</span></span><br><span class="line"><span class="xml">        template: `<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"bbb"</span>&gt;</span></span></span><br><span class="line"><span class="xml">                <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"弹出"</span>/&gt;</span></span></span><br><span class="line"><span class="xml">            <span class="tag">&lt;/<span class="name">div</span>&gt;</span>`</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined">    </span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">        data:&#123;</span></span><br><span class="line"><span class="undefined">            classObj:&#123;</span></span><br><span class="line"><span class="javascript">                active1:<span class="literal">true</span>,</span></span><br><span class="line"><span class="javascript">                aaa:<span class="literal">true</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="二、绑定内联样式"><a href="#二、绑定内联样式" class="headerlink" title="二、绑定内联样式"></a>二、绑定内联样式</h2><h3 id="2-1-对象语法"><a href="#2-1-对象语法" class="headerlink" title="2.1 对象语法"></a>2.1 对象语法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">"&#123;background:a,border:b,width:c&#125;"</span>&gt;</span>内联样式<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">"classObj"</span>&gt;</span>内联样式<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">        data:&#123;</span></span><br><span class="line"><span class="javascript">            a:<span class="string">"red"</span>,</span></span><br><span class="line"><span class="javascript">            b:<span class="string">"5px solid #ccc"</span>,</span></span><br><span class="line"><span class="javascript">            c:<span class="string">"100px"</span></span></span><br><span class="line"><span class="undefined">            classObj:&#123;</span></span><br><span class="line"><span class="javascript">                background:<span class="string">"red"</span>,</span></span><br><span class="line"><span class="javascript">                border:<span class="string">"5px solid #ccc"</span>,</span></span><br><span class="line"><span class="javascript">                width:<span class="string">"100px"</span>,</span></span><br><span class="line"><span class="javascript">                marginTop:<span class="string">"10px"</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-2-数组语法"><a href="#2-2-数组语法" class="headerlink" title="2.2 数组语法"></a>2.2 数组语法</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 数组语法 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">"[classObj,classObj1]"</span>&gt;</span>内联样式<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> app = <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="javascript">        el:<span class="string">"#app"</span>,</span></span><br><span class="line"><span class="undefined">        data:&#123;</span></span><br><span class="line"><span class="undefined">            classObj:&#123;</span></span><br><span class="line"><span class="javascript">                background:<span class="string">"red"</span>,</span></span><br><span class="line"><span class="javascript">                border:<span class="string">"5px solid #ccc"</span>,</span></span><br><span class="line"><span class="javascript">                width:<span class="string">"100px"</span></span></span><br><span class="line"><span class="undefined">            &#125;,</span></span><br><span class="line"><span class="undefined">            classObj1:&#123;</span></span><br><span class="line"><span class="javascript">                height:<span class="string">"100px"</span></span></span><br><span class="line"><span class="undefined">            &#125;</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">    &#125;)</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-3-自动添加前缀"><a href="#2-3-自动添加前缀" class="headerlink" title="2.3 自动添加前缀"></a>2.3 自动添加前缀</h3><blockquote><p>当 <code>v-bind:style</code> 使用需要特定前缀的 CSS 属性时，如 <code>transform</code>，<code>Vue.js</code> 会自动侦测并添加相应的前缀</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、绑定HTML-class&quot;&gt;&lt;a href=&quot;#一、绑定HTML-class&quot; class=&quot;headerlink&quot; title=&quot;一、绑定HTML class&quot;&gt;&lt;/a&gt;一、绑定HTML class&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;有三种方法 1、直
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="Vue" scheme="http://blog.poetries.top/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>vue中的数据绑定（二）</title>
    <link href="http://blog.poetries.top/2018/08/26/vue-data-bind/"/>
    <id>http://blog.poetries.top/2018/08/26/vue-data-bind/</id>
    <published>2018-08-26T06:01:32.000Z</published>
    <updated>2018-08-31T08:54:59.928Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Vue 对象的改变会直接影响到 HTML 的标签的变化，而且标签的变化也会反过来影响 Vue 对象的属性的变化</p></blockquote><p><img src="https://malun666.github.io/aicoder_vip_doc/pages/vue/imgs/02vue%E5%8F%8C%E5%90%91%E7%BB%91%E5%AE%9A.jpg" alt=""></p><h2 id="一、数据渲染"><a href="#一、数据渲染" class="headerlink" title="一、数据渲染"></a>一、数据渲染</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;message&#125; <span class="tag">&lt;/<span class="name">div</span>&gt;</span><span class="comment">&lt;!--数据绑定--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-html</span>=<span class="string">"htmlMess"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> <span class="comment">&lt;!--html绑定--&gt;</span>   </span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-text</span>=<span class="string">"message"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>  <span class="comment">&lt;!--数据绑定--&gt;</span></span><br></pre></td></tr></table></figure><h2 id="二、属性绑定"><a href="#二、属性绑定" class="headerlink" title="二、属性绑定"></a>二、属性绑定</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">v-bind:title</span>=<span class="string">"message"</span>&gt;</span>aaa<span class="tag">&lt;/<span class="name">h1</span>&gt;</span>  <span class="comment">&lt;!--属性绑定--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-bind:href</span>=<span class="string">"url"</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span>  <span class="comment">&lt;!--属性绑定--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">:href</span>=<span class="string">"url"</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span>    <span class="comment">&lt;!--简写--&gt;</span></span><br></pre></td></tr></table></figure><h2 id="三、类名绑定"><a href="#三、类名绑定" class="headerlink" title="三、类名绑定"></a>三、类名绑定</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--类绑定，当isActive为true时类名生效--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"active : isActive"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>    </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--多类名绑定，用逗号隔开--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"active:isActive,red:isRed"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--对象类名绑定--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"classObj"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>    </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--类名数组绑定--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"[active,red]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span>   </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--三元运算符类名绑定--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"isActive ? active : red"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="四、样式绑定"><a href="#四、样式绑定" class="headerlink" title="四、样式绑定"></a>四、样式绑定</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--内联样式绑定--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">"&#123;width:width,height:height&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--内联样式对象绑定--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:sytle</span>=<span class="string">"styleObj"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--内联样式对象数组绑定--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:style</span>=<span class="string">"[styleObj1,styleObj2]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="五、条件绑定"><a href="#五、条件绑定" class="headerlink" title="五、条件绑定"></a>五、条件绑定</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--条件为真时显示，css中直接有无此元素--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-if</span>=<span class="string">"seen"</span>&gt;</span>hahah<span class="tag">&lt;/<span class="name">p</span>&gt;</span>    </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--效果同if，css中为display：none--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-show</span>=<span class="string">"seen"</span>&gt;</span>hah<span class="tag">&lt;/<span class="name">p</span>&gt;</span>     </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--循环绑定--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"list in lists"</span>&gt;</span>&#123;&#123;alist.text&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>  </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--绑定lists数组--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"value in lists"</span>&gt;</span>&#123;&#123;value&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>     </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--值循环输出--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"(key value) in lists"</span>&gt;</span>&#123;&#123;key&#125;&#125;:&#123;&#123;value&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>     </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--键值对输出--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"(index key value) in lists"</span>&gt;</span>&#123;&#123;index&#125;&#125;:&#123;&#123;key&#125;&#125;:&#123;&#123;value&#125;&#125; <span class="tag">&lt;/<span class="name">p</span>&gt;</span>   </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--索引加键值对输出--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">v-for</span>=<span class="string">"n in 10"</span>&gt;</span>&#123;&#123;n&#125;&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="六、事件绑定"><a href="#六、事件绑定" class="headerlink" title="六、事件绑定"></a>六、事件绑定</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--事件对应fun1方法--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click</span>=<span class="string">"fun1"</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">a</span>&gt;</span>    </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--事件绑定简写--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> @<span class="attr">click</span>=<span class="string">"fun1"</span>&gt;</span>点击<span class="tag">&lt;/<span class="name">a</span>&gt;</span>     </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--事件修饰符：--&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 阻止单击事件冒泡 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop</span>=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 提交事件不再重载页面 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>=<span class="string">"onSubmit"</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 修饰符可以串联  --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.stop.prevent</span>=<span class="string">"doThat"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 只有修饰符 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">v-on:submit.prevent</span>&gt;</span><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 添加事件侦听器时使用事件捕获模式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.capture</span>=<span class="string">"doThis"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 只当事件在该元素本身（而不是子元素）触发时触发回调 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-on:click.self</span>=<span class="string">"doThat"</span>&gt;</span>...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- click 事件只能点击一次，2.1.4版本新增 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">v-on:click.once</span>=<span class="string">"doThis"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="七、按键绑定"><a href="#七、按键绑定" class="headerlink" title="七、按键绑定"></a>七、按键绑定</h2><blockquote><p>相应按键按下时触发</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">v-on:keyup.enter</span>=<span class="string">"submit"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> @<span class="attr">keyup.enter</span>=<span class="string">"submit"</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>全部的按键别名：</p></blockquote><ul><li><code>.enter</code>  </li><li><code>.tab</code></li><li><code>.delete</code> (捕获 “删除” 和 “退格” 键) </li><li><code>.esc</code></li><li><code>.space</code> </li><li><code>.up</code></li><li><code>.down</code> </li><li><code>.left</code> </li><li><code>.right</code>  </li><li><code>.ctrl</code></li><li><code>.alt</code></li><li><code>.shift</code> </li><li><code>.meta</code></li></ul><h2 id="八、双向绑定"><a href="#八、双向绑定" class="headerlink" title="八、双向绑定"></a>八、双向绑定</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>&#123;message&#125;<span class="tag">&lt;/<span class="name">p</span>&gt;</span>   </span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--input输入值将传入Vue中的message--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">v-model</span>=<span class="string">"message"</span>/&gt;</span> </span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">v-model</span>=<span class="string">"message"</span> <span class="attr">id</span>=<span class="string">"aa"</span>&gt;</span>     </span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>腾讯<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">option</span>&gt;</span>阿里<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>绑定修饰符</strong></p><ul><li><code>v-model.lazy</code> 将<code>input</code>同步改为<code>change</code>同步    -</li><li><code>v-model.mumber</code> 将能转化为数字的字符串转化为数字</li><li><code>v-model.trim</code> 过滤空格</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;Vue 对象的改变会直接影响到 HTML 的标签的变化，而且标签的变化也会反过来影响 Vue 对象的属性的变化&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&quot;https://malun666.github.io/aicoder_vi
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="Vue" scheme="http://blog.poetries.top/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>初识vue与环境搭建（一）</title>
    <link href="http://blog.poetries.top/2018/08/26/vue-start/"/>
    <id>http://blog.poetries.top/2018/08/26/vue-start/</id>
    <published>2018-08-26T05:12:32.000Z</published>
    <updated>2018-08-31T08:54:59.928Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一、初识"><a href="#一、初识" class="headerlink" title="一、初识"></a>一、初识</h2><ul><li><code>Vue</code>框架是一个<code>MVVM</code>框架，<code>Module</code>和<code>view</code>是双向绑定的。<code>vue</code>没有控制器的概念，它的核心思想是数据驱动，状态管理，以及组件化。</li><li>因此在我们js编程中，不会去操作<code>DOM</code>、<code>class</code>，更多的关注我们的数据层面。去改变一个变量，通过变量来控制我们的视图，通过事件绑定、状态管理来进一步渲染视图。</li><li><code>MVVM</code>框架的特点是没有控制器，通过<code>view</code>和<code>module</code>来进行交互，实际上底层已经帮我们封装了</li></ul><h3 id="1-1概况"><a href="#1-1概况" class="headerlink" title="1.1概况"></a>1.1概况</h3><ul><li><code>Vue</code>本身不是一个框架</li><li><code>Vue</code>结合周边的生态构成一个灵活的、渐进式的框架</li></ul><h3 id="1-2核心思想"><a href="#1-2核心思想" class="headerlink" title="1.2核心思想"></a>1.2核心思想</h3><ul><li>数据驱动【只关注数据层面】</li><li>组件化</li></ul><h3 id="1-3双向数据绑定"><a href="#1-3双向数据绑定" class="headerlink" title="1.3双向数据绑定"></a>1.3双向数据绑定</h3><blockquote><p><code>Object.defineProperty</code>在双向绑定中起来很重要作用</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">id</span>=<span class="string">"userName"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span> <span class="attr">id</span>=<span class="string">"uName"</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line"></span><br><span class="line">object.defineProerty(obj,<span class="string">"userName"</span>,&#123;</span><br><span class="line">    get:<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    set:<span class="function">(<span class="params">val</span>)=&gt;</span>&#123;</span><br><span class="line">        $(<span class="string">"#uName"</span>).innerHTML = val</span><br><span class="line">        $(<span class="string">"#userName"</span>).value = val;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line">$(<span class="string">"#userName"</span>).on(<span class="string">"keyup"</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    obj.userName = event.target.value</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="1-4-模板语法"><a href="#1-4-模板语法" class="headerlink" title="1.4 模板语法"></a>1.4 模板语法</h3><ul><li>数据绑定 <code>msg</code></li><li><code>html</code>语法 <code>v-html</code></li><li>绑定属性 <code>v-bind:id=</code></li><li>使用表达式 <code>ok?&#39;yes&#39;:&quot;no&quot;</code></li><li>文本赋值 <code>v-text=</code></li><li>指令 <code>v-if</code></li><li>过滤器 <code>message|capitalize</code> 和 <code>v-bind:id=&#39;rawld|formatld&#39;</code></li></ul><h3 id="1-5-Class和Style绑定"><a href="#1-5-Class和Style绑定" class="headerlink" title="1.5 Class和Style绑定"></a>1.5 <code>Class</code>和<code>Style</code>绑定</h3><ul><li>对象语法：<code>v-bind:class=&quot;{ active:isActive,&#39;text-danger&#39;:hasError }&quot;</code></li><li>数组语法： </li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-bind:class</span>=<span class="string">"[activeClass, errorClass]"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">    <span class="keyword">new</span> Vue(&#123;</span></span><br><span class="line"><span class="undefined">        data:&#123;</span></span><br><span class="line"><span class="javascript">            activeClass: <span class="string">"active"</span>,</span></span><br><span class="line"><span class="javascript">            errorClass: <span class="string">'text-danger'</span></span></span><br><span class="line"><span class="undefined">        &#125;   </span></span><br><span class="line"><span class="undefined">    &#125;) </span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li><code>style</code>绑定-对象语法 <code>v-bind:style=&quot;{color:activeColor,fontSize:fontSize+&quot;px&quot;}&quot;</code></li></ul><h3 id="1-6条件渲染"><a href="#1-6条件渲染" class="headerlink" title="1.6条件渲染"></a>1.6条件渲染</h3><ul><li><code>v-if</code> 如果是<code>false</code>不会被渲染</li><li><code>v-else</code></li><li><code>v-else-if</code></li><li><code>v-show</code> 控制<code>block</code>、<code>none</code>显示</li><li><code>v-cloak</code></li></ul><h3 id="1-7事件处理器"><a href="#1-7事件处理器" class="headerlink" title="1.7事件处理器"></a>1.7事件处理器</h3><ul><li><code>v-on:click=&quot;method&quot;</code> 或者<code>@click=&quot;method&quot;</code></li><li>修饰符：<code>v-on:click.stop、prevent、self、once</code></li><li><code>v-on:keyup.enter</code>、<code>tab</code>、<code>delete</code>(捕获删除、退格键)、<code>space</code>、<code>letf</code>、<code>right</code></li></ul><h3 id="1-8组件"><a href="#1-8组件" class="headerlink" title="1.8组件"></a>1.8组件</h3><ul><li>全局组件和局部组件</li><li>父子组件通讯、数据传递</li><li><code>Slot</code> (插槽)</li></ul><blockquote><p>在Vue里面消息是单向传递的，只允许父子件向子组件流通，一般使用<code>props</code>。不允许子组件去修改父组件的变量，子组件往父组件传递数据通过<code>$emit(&quot;父组件中自定义的事件名字&quot;)</code>这种方式去触发。父组件的变量发生变化之后，会同步流向子组件</p></blockquote><h2 id="二、环境搭建"><a href="#二、环境搭建" class="headerlink" title="二、环境搭建"></a>二、环境搭建</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">npm install -g vue-cli</span><br><span class="line"></span><br><span class="line">vue init webpack-simple demo</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 初始化完整的webpack项目</span></span><br><span class="line">vue init webpack demo2</span><br></pre></td></tr></table></figure><p><strong>配置文件</strong></p><ul><li>主要关注的是<code>webpack.base.js</code>和<code>config/index.js</code>，其他的都是辅助性工具</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一、初识&quot;&gt;&lt;a href=&quot;#一、初识&quot; class=&quot;headerlink&quot; title=&quot;一、初识&quot;&gt;&lt;/a&gt;一、初识&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;Vue&lt;/code&gt;框架是一个&lt;code&gt;MVVM&lt;/code&gt;框架，&lt;code&gt;Module&lt;/c
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="Vue" scheme="http://blog.poetries.top/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>快应用入门小结篇</title>
    <link href="http://blog.poetries.top/2018/08/21/quick-app-summary/"/>
    <id>http://blog.poetries.top/2018/08/21/quick-app-summary/</id>
    <published>2018-08-21T10:05:43.000Z</published>
    <updated>2018-08-31T08:54:59.924Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>MD原文件 <a href="https://github.com/poetries/poetries.github.io/blob/dev/source/_posts/quick-app-summary.md" target="_blank" rel="noopener">https://github.com/poetries/poetries.github.io/blob/dev/source/_posts/quick-app-summary.md</a></p></blockquote><blockquote><p>注册账号通过 <a href="https://www.quickapp.cn/docCenter/post/74" target="_blank" rel="noopener">https://www.quickapp.cn/docCenter/post/74</a></p></blockquote><h1 id="一、环境搭建"><a href="#一、环境搭建" class="headerlink" title="一、环境搭建"></a>一、环境搭建</h1><h2 id="1-1-安装NodeJS"><a href="#1-1-安装NodeJS" class="headerlink" title="1.1 安装NodeJS"></a>1.1 安装NodeJS</h2><blockquote><p>需安装<code>6.0</code>以上版本的<code>NodeJS</code></p></blockquote><h2 id="1-2-安装hap-toolkit"><a href="#1-2-安装hap-toolkit" class="headerlink" title="1.2 安装hap-toolkit"></a>1.2 安装hap-toolkit</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// hap -V // 会显示安装版本信息</span><br><span class="line">npm install -g hap-toolkit</span><br></pre></td></tr></table></figure><h2 id="1-3-创建项目工程"><a href="#1-3-创建项目工程" class="headerlink" title="1.3 创建项目工程"></a>1.3 创建项目工程</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">hap init projectName</span><br><span class="line"></span><br><span class="line">// 增加编译支持</span><br><span class="line">hap update --force</span><br><span class="line"></span><br><span class="line">cd projectName &amp;&amp; npm i</span><br></pre></td></tr></table></figure><p>生成的目录结构</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">├── sign rpk <span class="comment">//包签名模块</span></span><br><span class="line">│ └── debug <span class="comment">//调试环境</span></span><br><span class="line">│ ├── certificate.pem <span class="comment">//证书文件</span></span><br><span class="line">│ └── private.pem <span class="comment">//私钥文件</span></span><br><span class="line">├── src</span><br><span class="line">│ ├── Common <span class="comment">//公用的资源和组件文件</span></span><br><span class="line">│ │ └── logo.png <span class="comment">//应用图标</span></span><br><span class="line">│ ├── Demo <span class="comment">//页面目录</span></span><br><span class="line">│ | └── index.ux <span class="comment">//页面文件，可自定义页面名称</span></span><br><span class="line">│ ├── app.ux <span class="comment">//APP文件，可引入公共脚本，暴露公共数据和方法等</span></span><br><span class="line">│ └── manifest.json <span class="comment">//项目配置文件，配置应用图标、页面路由等</span></span><br><span class="line">└── package.json <span class="comment">//定义项目需要的各种模块及配置信息</span></span><br></pre></td></tr></table></figure><ul><li><code>src</code>：项目源文件夹</li><li><code>sign</code>：签名模块，当前仅有<code>debug</code>签名，如果内测上线，请添加<code>release</code>文件夹，增加线上签名；签名生成方法详见文档编译工具</li></ul><p><strong>编译项目</strong></p><ul><li><code>npm run release</code>     # 发布程序包，在 <code>/dist/.signed.rpk</code>，注意需要使用 <code>release</code> 签名模块</li><li><code>npm run build</code>      # 生成 <code>build</code> 和 <code>dist</code> 两个目录。前者是临时产出，后者是最终产出</li><li><code>npm run watch</code>      # 文件保存时自动编译和调试</li></ul><p>手动编译项目</p><blockquote><p>在项目的根目录下，运行如下命令进行编译打包，生成rpk包</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><ul><li>编译打包成功后，项目根目录下会生成文件夹：<code>build</code>、<code>dist</code></li><li><code>build</code>：临时产出，包含编译后的页面js，图片等</li><li><code>dist</code>：最终产出，包含<code>rpk</code>文件。其实是将<code>build</code>目录下的资源打包压缩为一个文件，后缀名为<code>rpk</code>，这个<code>rpk</code>文件就是项目编译后的最终产出</li></ul><p>自动编译项目</p><ul><li>每次修改源代码文件后，都自动编译项目</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run watch</span><br></pre></td></tr></table></figure><p><strong>在安卓手机上安装调试工具</strong></p><blockquote><p><a href="https://www.quickapp.cn/docCenter/post/69" target="_blank" rel="noopener">https://www.quickapp.cn/docCenter/post/69</a></p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-5b4e639317894e37.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="1-4-连接手机进行调试"><a href="#1-4-连接手机进行调试" class="headerlink" title="1.4 连接手机进行调试"></a>1.4 连接手机进行调试</h2><blockquote><p>注意：一定要注意手机连接的wifi与电脑所连接的网络需要在同一局域网和网段，需要能够相互访问。</p></blockquote><ul><li>在项目根目录下执行如下命令，启动HTTP调试服务器：（<code>server</code>前需要先<code>npm run build</code>）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run server</span><br></pre></td></tr></table></figure><ul><li>开发者可以通过命令行终端或者调试服务器主页看到提供扫描的二维码</li><li>开发者通过快应用调试器扫码安装按钮，扫码安装待调试的<code>rpk</code>文件</li><li>开发者点击快应用调试器中的开始调试按钮，开始调试</li></ul><blockquote><p>打开之前安装的快应用调试助手扫描即可预览</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-32579fff42fb9530.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><blockquote><p>扫描二维码之后点击开始调试，会调出devtool工具本地调试</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-3cd020c83fd15543.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/1480597-afd1d41337c7a3a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><h2 id="1-5-安装Hap-Extension"><a href="#1-5-安装Hap-Extension" class="headerlink" title="1.5 安装Hap Extension"></a>1.5 安装Hap Extension</h2><blockquote><p>启动Visual Studio Code，打开项目，点击左上侧扩展，搜索hap，点击安装Hap Extension</p></blockquote><ul><li>更多详情 <a href="https://doc.quickapp.cn/tutorial/getting-started/code-edit-conf.html" target="_blank" rel="noopener">https://doc.quickapp.cn/tutorial/getting-started/code-edit-conf.html</a></li></ul><h1 id="二、快应用结构分析"><a href="#二、快应用结构分析" class="headerlink" title="二、快应用结构分析"></a>二、快应用结构分析</h1><h2 id="2-1-文件组织"><a href="#2-1-文件组织" class="headerlink" title="2.1 文件组织"></a>2.1 文件组织</h2><blockquote><p>一个应用包含：描述项目配置信息的<code>manifest</code>文件，放置项目公共资源脚本的<code>app.ux</code>文件，多个描述页面/自定义组件的ux文件</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">├── manifest.json</span><br><span class="line">├── app.ux</span><br><span class="line">├── Page1</span><br><span class="line">│   ├── page1.ux</span><br><span class="line">├── Page2</span><br><span class="line">│   ├── page2.ux</span><br><span class="line">└── Common</span><br><span class="line">    ├── ComponentA.ux</span><br><span class="line">    ├── ComponentB.ux</span><br><span class="line">    └── xxx.png</span><br></pre></td></tr></table></figure><blockquote><p>其中<code>Common</code>目录下为公用的资源文件和组件文件，每个页面目录下存放各自页面私有的资源文件和组件文件，如：图片，<code>CSS</code>，<code>JS</code>等</p></blockquote><h2 id="2-2-源码文件"><a href="#2-2-源码文件" class="headerlink" title="2.2 源码文件"></a>2.2 源码文件</h2><blockquote><p><code>APP</code>，页面和自定义组件均通过<code>ux</code>文件编写，<code>ux</code>文件由<code>template</code>模板、<code>style</code>样式和<code>script</code>脚本3个部分组成，一个典型的页面<code>ux</code>文件示例如下</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- template里只能有一个根节点 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"demo-page"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"title"</span>&gt;</span>欢迎打开&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 点击跳转详情页 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">class</span>=<span class="string">"btn"</span> <span class="attr">type</span>=<span class="string">"button"</span> <span class="attr">value</span>=<span class="string">"跳转到详情页"</span> <span class="attr">onclick</span>=<span class="string">"routeDetail"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.demo-page</span> &#123;</span></span><br><span class="line"><span class="undefined">    flex-direction: column;</span></span><br><span class="line"><span class="undefined">    justify-content: center;</span></span><br><span class="line"><span class="undefined">    align-items: center;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.title</span> &#123;</span></span><br><span class="line"><span class="undefined">    font-size: 40px;</span></span><br><span class="line"><span class="undefined">    text-align: center;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.btn</span> &#123;</span></span><br><span class="line"><span class="undefined">    width: 550px;</span></span><br><span class="line"><span class="undefined">    height: 86px;</span></span><br><span class="line"><span class="undefined">    margin-top: 75px;</span></span><br><span class="line"><span class="undefined">    border-radius: 43px;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">background-color</span>: <span class="selector-id">#09ba07</span>;</span></span><br><span class="line"><span class="undefined">    font-size: 30px;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#ffffff</span>;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'@system.router'</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    <span class="comment">// 页面级组件的数据模型，影响传入数据的覆盖机制：private内定义的属性不允许被覆盖</span></span></span><br><span class="line"><span class="undefined">    private: &#123;</span></span><br><span class="line"><span class="javascript">      title: <span class="string">'示例页面'</span></span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    routeDetail () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 跳转到应用内的某个页面，router用法详见：文档-&gt;接口-&gt;页面路由</span></span></span><br><span class="line"><span class="undefined">      router.push (&#123;</span></span><br><span class="line"><span class="javascript">        uri: <span class="string">'/DemoDetail'</span></span></span><br><span class="line"><span class="undefined">      &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-3-manifest配置"><a href="#2-3-manifest配置" class="headerlink" title="2.3 manifest配置"></a>2.3 manifest配置</h2><blockquote><p><a href="https://doc.quickapp.cn/framework/manifest.html" target="_blank" rel="noopener">https://doc.quickapp.cn/framework/manifest.html</a></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    # 包名，区分不同应用的唯一id，因为名称其实是可以一样的</span><br><span class="line">    <span class="string">"package"</span>: <span class="string">"com.application.demo"</span>,</span><br><span class="line"></span><br><span class="line">    # 应用名称</span><br><span class="line">    <span class="string">"name"</span>: <span class="string">"hi"</span>,</span><br><span class="line"></span><br><span class="line">    # 版本管理的话，每次更新将versionCode自增1即可</span><br><span class="line">    <span class="string">"versionName"</span>: <span class="string">"1.0.0"</span>,</span><br><span class="line">    <span class="string">"versionCode"</span>: <span class="string">"1"</span>,</span><br><span class="line">    <span class="string">"minPlatformVersion"</span>: <span class="string">"101"</span>,</span><br><span class="line"></span><br><span class="line">    # 程序的入口icon，所有关于文件的引用统一使用根目录</span><br><span class="line">    # 根目录对应src文件夹</span><br><span class="line">    <span class="string">"icon"</span>: <span class="string">"/Common/logo.png"</span>,</span><br><span class="line"></span><br><span class="line">    # </span><br><span class="line">    <span class="string">"features"</span>: [</span><br><span class="line">        &#123; <span class="string">"name"</span>: <span class="string">"system.prompt"</span> &#125;,</span><br><span class="line">        &#123; <span class="string">"name"</span>: <span class="string">"system.router"</span> &#125;,</span><br><span class="line">        &#123; <span class="string">"name"</span>: <span class="string">"system.shortcut"</span> &#125;</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    <span class="string">"permissions"</span>: [</span><br><span class="line">        &#123; <span class="string">"origin"</span>: <span class="string">"*"</span> &#125;</span><br><span class="line">    ],</span><br><span class="line"></span><br><span class="line">    # 配置相关</span><br><span class="line">    <span class="string">"config"</span>: &#123;</span><br><span class="line">        # 这里的设置是log输出的最低等级</span><br><span class="line">        # 如果是warn的话，info类型将不会输出</span><br><span class="line">        # 等级请参考js中的console日志</span><br><span class="line">        <span class="string">"logLevel"</span>: <span class="string">"off"</span></span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    # 路由</span><br><span class="line">    # 这里会配置应用入口的页面</span><br><span class="line">    # 所有的页面都需要在这里配置</span><br><span class="line">    # 会把页面与对应的页面文件对应起来</span><br><span class="line">    # 经过配置之后可以通过/Demo访问到Demo目录下的index.ux页面</span><br><span class="line">    <span class="string">"router"</span>: &#123;</span><br><span class="line">        <span class="string">"entry"</span>: <span class="string">"Demo"</span>,</span><br><span class="line">        <span class="string">"pages"</span>: &#123;</span><br><span class="line">            <span class="string">"Demo"</span>: &#123;</span><br><span class="line">                # 这里对应的Demo文件夹里的index.ux</span><br><span class="line">                <span class="string">"component"</span>: <span class="string">"index"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"DemoDetail"</span>: &#123;</span><br><span class="line">                <span class="string">"component"</span>: <span class="string">"index"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"About"</span>: &#123;</span><br><span class="line">                <span class="string">"component"</span>: <span class="string">"index"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    </span><br><span class="line">    # 配置页面UI显示</span><br><span class="line">    # 主要分为两种，页面公有与页面私有</span><br><span class="line">    <span class="string">"display"</span>: &#123;</span><br><span class="line">        # 这三个都是所有页面公有的，顶部titleBar内容</span><br><span class="line">        <span class="string">"titleBarText"</span>: <span class="string">"public title"</span></span><br><span class="line">        <span class="string">"titleBarBackgroundColor"</span>: <span class="string">"#f2f2f2"</span>,</span><br><span class="line">        <span class="string">"titleBarTextColor"</span>: <span class="string">"#414141"</span>,</span><br><span class="line"></span><br><span class="line">        # 会增加一个导航栏</span><br><span class="line">        <span class="string">"menu"</span>: <span class="literal">true</span>,</span><br><span class="line"></span><br><span class="line">        # 页面私有内容</span><br><span class="line">        <span class="string">"pages"</span>: &#123;</span><br><span class="line">            <span class="string">"Demo"</span>: &#123;</span><br><span class="line">                # 这里面的内容就是每个页面私有的了</span><br><span class="line">                <span class="string">"titleBarText"</span>: <span class="string">"示例页"</span>,</span><br><span class="line">                <span class="string">"menu"</span>: <span class="literal">false</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"DemoDetail"</span>: &#123;</span><br><span class="line">                <span class="string">"titleBarText"</span>: <span class="string">"详情页"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"About"</span>: &#123;</span><br><span class="line">                <span class="string">"menu"</span>: <span class="literal">false</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>package</code> 应用包名，确认与原生应用的包名不一致，推荐采用<code>com.company.module</code>的格式，如：<code>com.example.demo</code></li><li><code>name</code> 应用名称，6个汉字以内，与应用商店保存的名称一致，用于在桌面图标、弹窗等处显示应用名称</li><li><code>icon</code> 应用图标，提供<code>192x192</code>大小的即可</li><li><code>versionName</code> 应用版本名称，如：<code>&quot;1.0&quot;</code></li><li><code>versionCode</code> 应用版本号，从1自增，推荐每次重新上传包时<code>versionCode+1</code></li><li><code>minPlatformVersion</code> 支持的最小平台版本号，兼容性检查，避免上线后在低版本平台运行并导致不兼容；如果不填按照内测版本处理</li><li><code>features</code> 接口列表，绝大部分接口都需要在这里声明，否则不能调用，详见每个接口的文档说明</li><li><code>config</code> 系统配置<ul><li><code>logLevel</code>：打印日志等级，分为<code>off</code>,<code>error</code>,<code>warn</code>,<code>info</code>,<code>log</code>,<code>debug</code></li><li><code>designWidth</code>：页面设计基准宽度，根据实际设备宽度来缩放元素大小</li></ul></li><li><code>router</code> 路由信息 <ul><li><code>entry:</code>首页名称</li><li><code>pages</code>:页面配置列表，<code>key</code>值为页面名称（对应页面目录名，例如Hello对应’Hello’目录），<code>value</code>为页面详细配置<code>page</code>，详见下面说明</li><li><code>router.page</code> 用于定义单个页面路由信息<ul><li><code>component</code>: 页面对应的组件名，与<code>ux</code>文件名保持一致，例如<code>&#39;hello&#39;</code> 对应 <code>&#39;hello.ux&#39;</code></li><li><code>path</code> 页面路径，例如<code>“/user”</code>,不填则默认为/&lt;页面名称&gt;。<code>path</code>必须唯一,不能和其他<code>page</code>的<code>path</code>相同。下面<code>page</code>的<code>path</code>因为缺失,会被设置为<code>“/Index”</code>：<code>&quot;Index&quot;</code>: <code>{&quot;component&quot;: &quot;index&quot;}</code></li><li><code>filter</code>: 声明页面可以处理某种请求</li></ul></li></ul></li><li><code>display UI</code>显示相关配置<ul><li><code>backgroundColor</code> 窗口背景颜色</li><li><code>fullScreen</code> 是否是全屏模式，默认不会同时作用于<code>titleBar</code>，<code>titleBar</code>需要继续通过<code>titleBar</code>控制</li><li><code>titleBar</code> 是否显示<code>titleBar</code></li><li><code>titleBarBackgroundColor</code>标题栏背景色</li><li><code>titleBarTextColor</code> 标题栏文字颜色</li><li><code>titleBarText</code> 标题栏文字(也可通过页面跳转传递参数(<code>titleBarText</code>)设置)</li><li><code>menu</code> 是否显示标题栏右上角菜单按钮</li><li><code>pages</code> 各个页面的显示样式，key为页面名（与路由中的页面名保持一致），<code>value</code>为窗口显示</li></ul></li></ul><h2 id="2-4-app-ux"><a href="#2-4-app-ux" class="headerlink" title="2.4 app.ux"></a>2.4 app.ux</h2><blockquote><p>当前<code>app.ux</code>编译后会包含<code>manifest</code>配置信息（可以在<code>npm run build</code>之后查看文件内容），所以请不要删除<code>/**manifest**/</code>的注释内容标识</p></blockquote><ul><li>您可以在<code>&lt;script&gt;</code>中引入一些公共的脚本，并暴露在当前app的对象上，如下所示，然后就可以在页面ux文件的<code>ViewModel</code>中，通过<code>this.$app.util</code>访问</li></ul><h2 id="2-5-style样式"><a href="#2-5-style样式" class="headerlink" title="2.5 style样式"></a>2.5 style样式</h2><ul><li>样式布局采用<code>CSS Flexbox</code>（弹性盒）样式</li></ul><blockquote><p>支持2种导入外部文件的方式</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 导入外部文件, 代替style内部样式 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">src</span>=<span class="string">"./style.css"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 合并外部文件 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  @<span class="keyword">import</span> <span class="string">'./style.css'</span>;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.a</span> &#123;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>模板内部样式</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 内联inline --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"color:red; margin: 10px;"</span>/&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- class声明 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"normal append"</span>/&gt;</span></span><br></pre></td></tr></table></figure><p><strong>样式预编译</strong></p><blockquote><p>目前支持less, sass的预编译</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--导入外部文件, 代替style内部样式--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"less"</span> <span class="attr">src</span>=<span class="string">"./lessFile.less"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--合并外部文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"less"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  @<span class="keyword">import</span> <span class="string">'./lessFile.less'</span>;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.page-less</span> &#123;</span></span><br><span class="line"><span class="css">    <span class="selector-id">#testTag</span> &#123;</span></span><br><span class="line"><span class="css">      <span class="selector-class">.less-font-text</span>, <span class="selector-class">.less-font-comma</span> &#123;</span></span><br><span class="line"><span class="undefined">        font-size: 60px;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">  /**</span></span><br><span class="line"><span class="undefined">   * 应用级别的配置，供所有页面公用</span></span><br><span class="line"><span class="undefined">   */</span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> util <span class="keyword">from</span> <span class="string">'./util'</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">    showMenu: util.showMenu,</span></span><br><span class="line"><span class="undefined">    createShortcut: util.createShortcut</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-6-template模板"><a href="#2-6-template模板" class="headerlink" title="2.6 template模板"></a>2.6 template模板</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- temp.ux --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">name</span>=<span class="string">"hint"</span> <span class="attr">src</span>=<span class="string">"./hint-modal"</span>&gt;</span><span class="tag">&lt;/<span class="name">import</span>&gt;</span>  <span class="comment">&lt;!-- 引入外部模板 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">src</span>=<span class="string">"./table"</span>&gt;</span><span class="tag">&lt;/<span class="name">import</span>&gt;</span>  <span class="comment">&lt;!-- 引入外部模板 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mod-header"</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"mod-title"</span> <span class="attr">style</span>=<span class="string">"color: red; margin: 10px;"</span>&gt;</span>&#123;&#123;title&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span>    <span class="comment">&lt;!-- 行内样式 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"mod-detail"</span> <span class="attr">onclick</span>=<span class="string">"showDetail"</span>&gt;</span>?<span class="tag">&lt;/<span class="name">text</span>&gt;</span>    <span class="comment">&lt;!-- 无参事件绑定 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"mod-content"</span>&gt;</span></span><br><span class="line">          <span class="comment">&lt;!-- block 用来表示逻辑，不渲染 --&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">block</span> <span class="attr">for</span>=<span class="string">"totalData"</span>&gt;</span>   <span class="comment">&lt;!-- for 循环遍历数组 $idx, $item 分别为数组的索引和值--&gt;</span></span><br><span class="line">              <span class="comment">&lt;!-- 事件绑定 --&gt;</span></span><br><span class="line">              <span class="tag">&lt;<span class="name">div</span> <span class="attr">onclick</span>=<span class="string">"onTabClick($idx)"</span> <span class="attr">class</span>=<span class="string">"item &#123;&#123;tabIndex === $idx &amp;&amp; 'active'&#125;&#125;"</span>&gt;</span> <span class="comment">&lt;!-- 支持简单表达式 --&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"&#123;&#123;tabIndex === $idx &amp;&amp; 'text-active'&#125;&#125;"</span>&gt;</span>&#123;&#123;($item || &#123;&#125;).name&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">                  <span class="tag">&lt;<span class="name">text</span> <span class="attr">class</span>=<span class="string">"&#123;&#123;tabIndex === $idx &amp;&amp; 'text-active'&#125;&#125;"</span>&gt;</span>&#123;&#123;($item || &#123;&#125;).value&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span>  <span class="comment">&lt;!-- 布尔值、null、undefined、'' 不渲染，其余包括 falsy 值一律渲染 --&gt;</span></span><br><span class="line">              <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">image</span> <span class="attr">class</span>=<span class="string">"mod-like"</span> <span class="attr">if</span>=<span class="string">"&#123;&#123;isLike&#125;&#125;"</span> /&gt;</span> <span class="comment">&lt;!-- 支持if elif else, 必须是相邻节点 --&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">image</span> <span class="attr">class</span>=<span class="string">"mod-dislike"</span> <span class="attr">else</span> /&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">table</span> <span class="attr">data</span>=<span class="string">&#123;&#123;dataList&#125;&#125;</span>&gt;</span><span class="tag">&lt;/<span class="name">table</span>&gt;</span>  <span class="comment">&lt;!-- 传入属性值，使用外部模板--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">hint</span> <span class="attr">show</span>=<span class="string">"&#123;&#123;isHintShown&#125;&#125;"</span>&gt;</span></span><br><span class="line">          This is children of hint templete.</span><br><span class="line">      <span class="tag">&lt;/<span class="name">hint</span>&gt;</span>   <span class="comment">&lt;!-- 使用外部模板 --&gt;</span></span><br><span class="line">      <span class="comment">&lt;!-- if 和 show 的区别：if 为 false 分支的节点不会渲染进 DOM 树，而 show 为 false 的节点会渲染，只是 display: none; --&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"less"</span> <span class="attr">src</span>=<span class="string">"./lessFile.less"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span>   <span class="comment">&lt;!-- 引入外部 CSS/LESS --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"less"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="comment">/* 引入外部 CSS/LESS */</span></span></span><br><span class="line"><span class="css">  @<span class="keyword">import</span> <span class="string">'../Common/global.less'</span>;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.container</span>&#123;</span></span><br><span class="line"><span class="css">    <span class="comment">/* 定义样式，less 支持 */</span></span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> fetch <span class="keyword">from</span> <span class="string">"@system.fetch"</span>    <span class="comment">// 引入系统 js</span></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> conf <span class="keyword">from</span> <span class="string">'./globalConf'</span>;     <span class="comment">// 引入外部 js</span></span></span><br><span class="line"><span class="undefined">  </span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="javascript">    props: [<span class="string">'title'</span>, <span class="string">'dataList'</span>],  <span class="comment">// 传入属性：必须字母开头，全小写、数字和 `-` ，不能保留字和函数，不能以符号开头</span></span></span><br><span class="line"><span class="undefined">    public: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 定义变量，会被 props 和内部请求覆盖</span></span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    private: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 定义变量，不会被 props 覆盖</span></span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    protected: &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 定义变量，不会被 props 覆盖, 但会被内部请求覆盖(获得通过 a 标签和 router 传递的参数)</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="javascript">    data :&#123;   <span class="comment">// data 不能和 public、private、protected 一起使用，data 也可以是 function（返回 data 对象，onInit之前执行）</span></span></span><br><span class="line"><span class="javascript">      <span class="comment">// 定义变量：不能保留字和函数，不能以符号开头</span></span></span><br><span class="line"><span class="javascript">      totalData: [&#123;<span class="attr">name</span>: <span class="string">'a'</span>,<span class="attr">value</span>: <span class="number">97</span>&#125;,&#123;<span class="attr">name</span>: <span class="string">'b'</span>,<span class="attr">value</span>: <span class="number">98</span>&#125;];</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 定义变量，会被 props 覆盖</span></span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="javascript">    onTabClick(index)&#123;    <span class="comment">// 内部事件定义</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.log(index);</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    events: &#123;</span></span><br><span class="line"><span class="undefined">       onIDChange()&#123;</span></span><br><span class="line"><span class="javascript">          <span class="comment">// 外部事件定义</span></span></span><br><span class="line"><span class="undefined">       &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- hint.ux --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">text</span>&gt;</span><span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">text</span>&gt;</span>          <span class="comment">&lt;!-- slot: 获取该数据的引用的 children, 该例中即：This is children of hint templete. --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="2-7-script脚本"><a href="#2-7-script脚本" class="headerlink" title="2.7 script脚本"></a>2.7 script脚本</h2><h3 id="2-7-1-模块声明"><a href="#2-7-1-模块声明" class="headerlink" title="2.7.1 模块声明"></a>2.7.1 模块声明</h3><blockquote><p>可以通过<code>import</code>引入功能模块，在代码中调用模块方法</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import fetch from &quot;@system.fetch&quot;</span><br></pre></td></tr></table></figure><blockquote><p>也可以一次引入所有的模块，例如</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">import system from &quot;@system&quot;</span><br></pre></td></tr></table></figure><ul><li>在代码中使用<code>system.network</code>来调用接口方法</li></ul><h3 id="2-7-2-对象"><a href="#2-7-2-对象" class="headerlink" title="2.7.2 对象"></a>2.7.2 对象</h3><h4 id="2-7-2-1-页面级组件"><a href="#2-7-2-1-页面级组件" class="headerlink" title="2.7.2.1 页面级组件"></a>2.7.2.1 页面级组件</h4><p><strong>data(废弃)</strong></p><ul><li>页面级组件的数据模型，能够转换为<code>JSON</code>对象</li><li>如果是函数，返回结果必须是对象，在组件初始化时会执行函数获取结果作为<code>data</code>的值</li><li>使用<code>data</code>方式声明的属性会被外部数据覆盖，因此存在一定安全风险，推荐使用下面的<code>public</code>,<code>protected</code>,<code>rivate</code>来声明属性（注意：它们不能与data同时声明）</li></ul><p><strong>public</strong></p><blockquote><p>页面级组件的数据模型，影响传入数据的覆盖机制：<code>public</code>内定义的属性允许被传入的数据覆盖，如果外部传入数据的某个属性未被声明，在<code>public</code>中不会新增这个属性</p></blockquote><p><strong>protected</strong></p><blockquote><p>页面级组件的数据模型，影响传入数据的覆盖机制：protected内定义的属性，允许被应用内部页面请求传递的数据覆盖，不允许被应用外部请求传递的数据覆盖</p></blockquote><p><strong>private</strong></p><blockquote><p>页面级组件的数据模型，影响传入数据的覆盖机制：private内定义的属性不允许被覆盖</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">   props: [<span class="string">'title'</span>, <span class="string">'dataList'</span>],  <span class="comment">// 传入属性：必须字母开头，全小写、数字和 `-` ，不能保留字和函数，不能以符号开头</span></span><br><span class="line">   public: &#123;</span><br><span class="line">     <span class="comment">// 定义变量，会被 props 和内部请求覆盖</span></span><br><span class="line">   &#125;,</span><br><span class="line">   private: &#123;</span><br><span class="line">     <span class="comment">// 定义变量，不会被 props 覆盖</span></span><br><span class="line">   &#125;,</span><br><span class="line">   protected: &#123;</span><br><span class="line">     <span class="comment">// 定义变量，不会被 props 覆盖, 但会被内部请求覆盖(获得通过 a 标签和 router 传递的参数)</span></span><br><span class="line">   &#125;</span><br><span class="line">   data :&#123;   <span class="comment">// data 不能和 public、private、protected 一起使用，data 也可以是 function（返回 data 对象，onInit之前执行）</span></span><br><span class="line">     <span class="comment">// 定义变量：不能保留字和函数，不能以符号开头</span></span><br><span class="line">     totalData: [&#123;<span class="attr">name</span>: <span class="string">'a'</span>,<span class="attr">value</span>: <span class="number">97</span>&#125;,&#123;<span class="attr">name</span>: <span class="string">'b'</span>,<span class="attr">value</span>: <span class="number">98</span>&#125;];</span><br><span class="line">       <span class="comment">// 定义变量，会被 props 覆盖</span></span><br><span class="line">   &#125;,</span><br><span class="line">   onTabClick(index)&#123;    <span class="comment">// 内部事件定义</span></span><br><span class="line">     <span class="built_in">console</span>.log(index);</span><br><span class="line">   &#125;,</span><br><span class="line">   events: &#123;</span><br><span class="line">      onIDChange()&#123;</span><br><span class="line">         <span class="comment">// 外部事件定义</span></span><br><span class="line">      &#125;</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h4 id="2-7-2-2-自定义组件"><a href="#2-7-2-2-自定义组件" class="headerlink" title="2.7.2.2 自定义组件"></a>2.7.2.2 自定义组件</h4><p><strong>data</strong></p><blockquote><p>自定义组件的数据模型，能够转换为JSON对象；属性名不能以$或_开头, 不要使用for, if, show, tid等保留字<br>如果是函数，返回结果必须是对象，在组件初始化时会执行函数获取结果作为data的值</p></blockquote><p><strong>props</strong></p><ul><li>定义组件外部可传入的所有属性</li><li>在模板代码中，请使用短横线分隔命名代替驼峰命名。如，属性定义<code>props: [&#39;propA&#39;]</code>，可通过<code>&lt;tag prop-a=&#39;xx&#39;&gt;</code>方式传递到组件内部</li></ul><p><strong>prop验证</strong></p><blockquote><p>在自定义组件中，可将props定义为带验证需求的对象。其中，key为属性名，value为属性对应的验证需求。验证失败则输出错误提示日志，增加prop验证有利于规范自定义组件的使用</p></blockquote><table><thead><tr><th>属性</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td><code>type</code></td><td>-</td><td>检查属性值的类型。支持单一类型和多种可能类型，可在原生和自定义构造函数中任意选择，单独或组合使用。原生构造函数：<code>String</code>  <code>Number</code>  <code>Boolean</code>  <code>Function</code>  <code>Object</code>  <code>Array</code>  <code>Symbol</code></td></tr><tr><td><code>default</code></td><td>-</td><td>设置属性的默认值</td></tr><tr><td><code>required</code></td><td><code>Boolean</code></td><td>设置属性是否必填</td></tr></tbody></table><p><code>validator</code>|    <code>Function</code>|    设置自定义验证函数。若函数的返回值为真，则通过验证；否则验证失败|</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    props: &#123;</span><br><span class="line">      <span class="comment">// 单一类型检查的简写</span></span><br><span class="line">      propA: <span class="built_in">Number</span>,</span><br><span class="line">      <span class="comment">// 多种可能类型的简写</span></span><br><span class="line">      propB: [<span class="built_in">String</span>, <span class="built_in">Number</span>],</span><br><span class="line">      <span class="comment">// 必填的字符串</span></span><br><span class="line">      propC: &#123;</span><br><span class="line">        type: <span class="built_in">String</span>,</span><br><span class="line">        required: <span class="literal">true</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 带默认值的数字</span></span><br><span class="line">      propD: &#123;</span><br><span class="line">        type: <span class="built_in">Number</span>,</span><br><span class="line">        <span class="keyword">default</span>: <span class="number">100</span></span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 带有默认值的对象</span></span><br><span class="line">      propE: &#123;</span><br><span class="line">        type: <span class="built_in">Object</span>,</span><br><span class="line">        <span class="keyword">default</span> () &#123;</span><br><span class="line">          <span class="keyword">return</span> &#123; <span class="attr">message</span>: <span class="string">'hello'</span> &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="comment">// 自定义验证函数</span></span><br><span class="line">      propF: &#123;</span><br><span class="line">        validator (value) &#123;</span><br><span class="line">          <span class="keyword">return</span> value === <span class="string">'hello'</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h4 id="2-7-2-3-公共对象"><a href="#2-7-2-3-公共对象" class="headerlink" title="2.7.2.3 公共对象"></a>2.7.2.3 公共对象</h4><table><thead><tr><th>属性</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td><code>$app</code></td><td><code>Object</code></td><td>应用对象</td></tr><tr><td><code>$page</code></td><td><code>Object</code></td><td>页面对象</td></tr><tr><td><code>$valid</code></td><td><code>Boolean</code></td><td>页面对象是否有效</td></tr><tr><td><code>$visible</code></td><td><code>Boolean</code></td><td>页面是否处于用户可见状态</td></tr></tbody></table><h4 id="2-7-2-4-应用对象"><a href="#2-7-2-4-应用对象" class="headerlink" title="2.7.2.4 应用对象"></a>2.7.2.4 应用对象</h4><blockquote><p>可通过<code>$app</code>访问</p></blockquote><table><thead><tr><th>属性</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td><code>$def</code></td><td><code>Object</code></td><td>使用<code>this.$app.$def</code>获取在<code>app.ux</code>中暴露的对象</td></tr><tr><td><code>$data</code></td><td><code>Object</code></td><td>使用<code>this.$app.$data</code>获取在<code>manifest.json</code>的<code>config.data</code>中声明的全局数据</td></tr></tbody></table><h4 id="2-7-2-5-页面对象"><a href="#2-7-2-5-页面对象" class="headerlink" title="2.7.2.5 页面对象"></a>2.7.2.5 页面对象</h4><blockquote><p>可通过<code>$page</code>访问</p></blockquote><table><thead><tr><th>属性</th><th>类型</th><th>描述</th></tr></thead><tbody><tr><td><code>actio</code>n</td><td><code>String</code></td><td>获取打开当前页面的<code>action</code>。仅在当前页面是通过<code>filter</code>匹配的方式打开时有效，否则为<code>undefined</code></td></tr><tr><td><code>uri</code></td><td><code>String</code></td><td>获取打开当前页面的uri。仅在当前页面是通过filter匹配的方式打开时有效，否则为<code>undefined</code></td></tr></tbody></table><h3 id="2-7-3-方法"><a href="#2-7-3-方法" class="headerlink" title="2.7.3 方法"></a>2.7.3 方法</h3><h4 id="2-7-3-1-数据方法"><a href="#2-7-3-1-数据方法" class="headerlink" title="2.7.3.1 数据方法"></a>2.7.3.1 数据方法</h4><table><thead><tr><th>属性</th><th>类型</th><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>$set</code></td><td><code>Function</code></td><td><code>key: String value: Any</code></td><td>添加数据属性，用法<code>：this.$set(&#39;key&#39;,value)</code> <code>this.$vm(&#39;id&#39;).$set(&#39;key&#39;,value)</code></td></tr><tr><td><code>$delete</code></td><td><code>Function</code></td><td><code>key: String</code></td><td>删除数据属性，用法：<code>this.$delete(&#39;key&#39;)</code> <code>this.$vm(&#39;id&#39;).$delete(&#39;key&#39;)</code></td></tr></tbody></table><h4 id="2-7-3-2-公共方法"><a href="#2-7-3-2-公共方法" class="headerlink" title="2.7.3.2 公共方法"></a>2.7.3.2 公共方法</h4><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td><code>$element</code></td><td>获取指定<code>id</code>的组件<code>dom</code>对象，如果没有指定<code>id</code>，则返回根组件<code>dom</code>对象用法：<code>&lt;template&gt; &lt;div id=&#39;xxx&#39;&gt;&lt;/div&gt; &lt;/template&gt; this.$element(&#39;xxx&#39;)</code> 获取<code>id</code>为<code>xxx</code>的<code>div</code>组件实例对象 <code>this.$element()</code> 获取根组件实例对象</td></tr><tr><td><code>$root</code></td><td>获取顶层<code>ViewModel</code></td></tr><tr><td><code>$parent</code></td><td>获取父亲<code>ViewModel</code></td></tr><tr><td><code>$child</code></td><td>获取指定<code>id</code>的自定义组件的<code>ViewModel</code>用法：<code>this.$child(&#39;xxx&#39;)</code> 获取<code>id</code>为<code>xxx</code>的<code>div</code>组件<code>ViewModel</code></td></tr><tr><td><code>$vm deprecated</code></td><td>请使用上面<code>this.$child(&#39;xxx&#39;)</code>替代</td></tr><tr><td><code>$rootElement deprecated</code></td><td>请使用上面<code>this.$element()</code>替代</td></tr><tr><td><code>$forceUpdate</code></td><td>更新<code>ViewModel</code>数据，可能会触发<code>DOM</code>操作，如：创建节点、更新节点、删除节点等；这些DOM操作不一定在数据更新时立即执行，而是在开发者的业务代码执行后触发；若开发者期望数据更新时立即执行相应的<code>DOM</code>操作，可使用：<code>this.$forceUpdate()</code>；一般不推荐使用</td></tr></tbody></table><h4 id="2-7-3-3-事件方法"><a href="#2-7-3-3-事件方法" class="headerlink" title="2.7.3.3 事件方法"></a>2.7.3.3 事件方法</h4><table><thead><tr><th>属性</th><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>$on</code></td><td><code>type: String</code> 事件名 <br><code>handler: Function</code>事件句柄函数</td><td>添加事件处理句柄用法：<code>this.$on(&#39;xxxx&#39;, this.fn)</code> <code>fn</code>是在<code>&lt;script&gt;</code>中定义的函数</td></tr><tr><td><code>$off</code></td><td><code>type: String</code> 事件名 <br><code>handler</code>:  事件句柄函数</td><td>删除事件处理句柄用法：<code>this.$off(&#39;xxxx&#39;, this.fn)</code> <code>this.$off(&#39;xxx&#39;)</code> 删除指定事件的所有处理句柄</td></tr><tr><td><code>$dispatch</code></td><td><code>type: String</code> 事件名</td><td>向上层组件发送事件通知用法：<code>this.$dispatch(&#39;xxx&#39;)</code>正常情况下，会一直向上传递事件（冒泡）如果要停止冒泡，在事件句柄函数中调用<code>evt.stop()</code>即可</td></tr><tr><td><code>$broadcast</code></td><td><code>type: String</code> 事件名</td><td>向子组件发送事件通知用法：<code>this.$broadcast(&#39;xxx&#39;)</code>正常情况下，会一直向下传递事件如果要停止传递，在事件句柄函数中调用<code>evt.stop()</code>即可</td></tr><tr><td><code>$emit</code></td><td><code>type: String</code> 事件名 <br><code>data: Object</code> 事件参数</td><td>触发事件，对应的句柄函数被调用用法：<code>this.$emit(&#39;xxx&#39;) this.$emit(&#39;xxx&#39;, {a:1})</code>传递的事件参数可在事件回调函数中，通过<code>evt.detail</code>来访问，例如<code>evt.detail.a</code></td></tr><tr><td><code>$emitElement</code></td><td><code>type: String</code> 事件名<br><code>data: Object</code> 事件参数 <br><code>id: String</code> 组件<code>id</code> (默认为<code>-1</code> 代表根元素)</td><td>触发组件事件,对应的句柄函数被调用用法：<code>this.$emitElement(&#39;xxx&#39;, null, &#39;id&#39;) this.$emitElement(&#39;xxx&#39;,{a:1})</code>传递的事件参数可在事件回调函数中，通过<code>evt.detail</code>来访问，例如<code>evt.detail.a</code></td></tr><tr><td><code>$watch</code></td><td><code>data: String</code> 属性名, 支持<code>&#39;a.b.c&#39;</code>格式，不支持数组索引 <br><code>handler: String</code> 事件句柄函数名,函数的第一个参数为新的属性值，第二个参数为旧的属性值</td><td>动态添加属性/事件绑定，属性必须在<code>data</code>中定义，<code>handler</code>函数必须在<code>&lt;script&gt;</code>定义；当属性值发生变化时事件才被触发用法：<code>this.$watch(&#39;a&#39;,&#39;handler&#39;)</code></td></tr></tbody></table><h4 id="2-7-3-4-应用方法"><a href="#2-7-3-4-应用方法" class="headerlink" title="2.7.3.4 应用方法"></a>2.7.3.4 应用方法</h4><blockquote><p>可通过$app访问</p></blockquote><table><thead><tr><th>属性</th><th>描述</th></tr></thead><tbody><tr><td>exit</td><td>退出快应用，结束应用生命周期。<br>调用方法：<code>this.$app.exit()</code></td></tr></tbody></table><h4 id="2-7-3-5-页面方法"><a href="#2-7-3-5-页面方法" class="headerlink" title="2.7.3.5 页面方法"></a>2.7.3.5 页面方法</h4><blockquote><p>可通过<code>$page</code>访问</p></blockquote><table><thead><tr><th>属性</th><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>setTitleBar</code></td><td><code>text: String</code> 标题栏文字 <br><code>textColor: String</code> 文字颜色 <br><code>backgroundColor: String</code> 背景颜色 <br><code>backgroundOpacity : Number</code>背景透明度 <br><code>menu : Boolean</code> 是否在标题栏右上角显示菜单按钮</td><td>设置当前页面的标题栏用法：<code>this.$page.setTitleBar({text:&#39;Hello&#39;, textColor:&#39;#FF0000&#39;, backgroundColor:&#39;#FFFFFF&#39;, backgroundOpacity:0.5, menu: true})</code></td></tr><tr><td><code>finish</code></td><td>无</td><td>从本页面退出，结束页面生命周期。调用方法：<code>this.$page.finish()</code></td></tr></tbody></table><h2 id="2-8-指令"><a href="#2-8-指令" class="headerlink" title="2.8 指令"></a>2.8 指令</h2><p><strong>for</strong></p><blockquote><p><code>for</code>指令用于循环输出一个数组类型的数据</p></blockquote><ul><li>自定义变量表示<code>for</code>指令的数组索引和数组元素时，变量名不可以用<code>$</code>或<code>_</code>开头；</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tutorial-page"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 方式1：默认$item代表数组中的元素, $idx代表数组中的索引 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tutorial-row"</span> <span class="attr">for</span>=<span class="string">"&#123;&#123;list&#125;&#125;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123;&#123;$idx&#125;&#125;.&#123;&#123;$item.name&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 方式2：自定义元素变量名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tutorial-row"</span> <span class="attr">for</span>=<span class="string">"value in list"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123;&#123;$idx&#125;&#125;.&#123;&#123;value.name&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 方式3：自定义元素、索引的变量名称 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tutorial-row"</span> <span class="attr">for</span>=<span class="string">"(personIndex, personItem) in list"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123;&#123;personIndex&#125;&#125;.&#123;&#123;personItem.name&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"less"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.tutorial-page</span> &#123;</span></span><br><span class="line"><span class="undefined">    flex-direction: column;</span></span><br><span class="line"><span class="css">    <span class="selector-class">.tutorial-row</span> &#123;</span></span><br><span class="line"><span class="undefined">      width: 85%;</span></span><br><span class="line"><span class="undefined">      margin-top: 10px;</span></span><br><span class="line"><span class="undefined">      margin-bottom: 10px;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">    private: &#123;</span></span><br><span class="line"><span class="undefined">      list: [</span></span><br><span class="line"><span class="javascript">        &#123;<span class="attr">name</span>: <span class="string">'aa'</span>&#125;,</span></span><br><span class="line"><span class="javascript">        &#123; <span class="attr">name</span>: <span class="string">'bb'</span> &#125;</span></span><br><span class="line"><span class="undefined">      ]</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    onInit () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$page.setTitleBar(&#123; <span class="attr">text</span>: <span class="string">'指令for'</span> &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>指令if与指令show</strong></p><ul><li><code>if</code>条件指令，是指<code>if/elif/else</code>这3个相关指令，用于控制是否增加或者删除组件；</li><li><code>show</code>指令，是指是否显示组件，用于控制组件的显示状态，并不会从DOM结构中删除</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tutorial-page"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">onclick</span>=<span class="string">"onClickShow"</span>&gt;</span>显示隐藏：<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">show</span>=<span class="string">"&#123;&#123;showVar&#125;&#125;"</span>&gt;</span>show: 渲染但控制是否显示<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">onclick</span>=<span class="string">"onClickCondition"</span>&gt;</span>条件指令：<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">if</span>=<span class="string">"&#123;&#123;conditionVar === 1&#125;&#125;"</span>&gt;</span>if: if条件<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">elif</span>=<span class="string">"&#123;&#123;conditionVar === 2&#125;&#125;"</span>&gt;</span>elif: elif条件<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">else</span>&gt;</span>else: 其余<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"less"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.tutorial-page</span> &#123;</span></span><br><span class="line"><span class="undefined">    flex-direction: column;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">    private: &#123;</span></span><br><span class="line"><span class="javascript">      showVar: <span class="literal">true</span>,</span></span><br><span class="line"><span class="undefined">      conditionVar: 1</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    onInit () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$page.setTitleBar(&#123; <span class="attr">text</span>: <span class="string">'指令if与指令show'</span> &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    onClickShow () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.showVar = !<span class="keyword">this</span>.showVar</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    onClickCondition () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.conditionVar = ++<span class="keyword">this</span>.conditionVar % <span class="number">3</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>当<code>if/elif</code>指令的值为<code>false</code>时，节点会从页面中移除，当<code>if/elif</code>指令值为<code>true</code>，组件会动态插入节点中；</li><li>当<code>show</code>指令的值为<code>true</code>时，节点可见， - 当其值为<code>false</code>时，组件不可见，但节点仍会保留在页面DOM结构中</li></ul><p><strong>组件block</strong></p><blockquote><p>block组件是表达逻辑区块的组件，没有对应的Native组件。可以使用<block>实现更为灵活的”列表/条件渲染”。如在<block>上使用for指令和if指令</block></block></p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tutorial-page"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">onclick</span>=<span class="string">"toggleCityList"</span>&gt;</span>点击：控制是否显示城市<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"city"</span> <span class="attr">for</span>=<span class="string">"city in cities"</span> <span class="attr">if</span>=<span class="string">"&#123;&#123;showCityList === 1&#125;&#125;"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">text</span>&gt;</span>城市：&#123;&#123;city.name&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">block</span> <span class="attr">if</span>=<span class="string">"&#123;&#123;city.showSpots&#125;&#125;"</span> <span class="attr">for</span>=<span class="string">"&#123;&#123;city.spots&#125;&#125;"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">text</span>&gt;</span>景点：&#123;&#123;$item.name&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">block</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"less"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.tutorial-page</span> &#123;</span></span><br><span class="line"><span class="undefined">    flex-direction: column;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="css">  <span class="selector-class">.city</span> &#123;</span></span><br><span class="line"><span class="undefined">    flex-direction: column;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">import</span> &#123;dataDirective&#125; <span class="keyword">from</span> <span class="string">'../../Common/js/data'</span></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">    private: &#123;</span></span><br><span class="line"><span class="undefined">      showCityList: 1,</span></span><br><span class="line"><span class="undefined">      cities: dataDirective</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    onInit () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$page.setTitleBar(&#123; <span class="attr">text</span>: <span class="string">'组件block'</span> &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    toggleCityList () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.showCityList = <span class="keyword">this</span>.showCityList === <span class="number">1</span> ? <span class="number">0</span> : <span class="number">1</span></span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>组件slot</strong></p><blockquote><p>slot节点用于向开发者额外开发的自定义ux组件中插入内容</p></blockquote><ul><li>通常自定义组件的模板中提供<code>slot</code>组件，当该组件被引入到页面组件中后，开发者可以灵活定义该自定义组件内部的子内容</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//自定义组件part1.ux</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- par1.ux --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123;&#123; header &#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">slot</span>&gt;</span><span class="tag">&lt;/<span class="name">slot</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123;&#123; footer &#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">    props: [</span></span><br><span class="line"><span class="javascript">      <span class="string">'header'</span>, <span class="string">'footer'</span></span></span><br><span class="line"><span class="undefined">    ]</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">//自定义组件使用者页面index.ux</span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- index.ux --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">import</span> <span class="attr">src</span>=<span class="string">"./part1"</span>&gt;</span><span class="tag">&lt;/<span class="name">import</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">part1</span> <span class="attr">class</span>=<span class="string">"component"</span> <span class="attr">header</span>=<span class="string">"&#123;&#123;header&#125;&#125;"</span> <span class="attr">footer</span>=<span class="string">"&#123;&#123;footer&#125;&#125;"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span>&gt;</span>slot节点内容<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">part1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.component</span> &#123;</span></span><br><span class="line"><span class="undefined">    flex-direction: column;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">    private: &#123;</span></span><br><span class="line"><span class="javascript">      header: <span class="string">'HEAD'</span>,</span></span><br><span class="line"><span class="javascript">      footer: <span class="string">'FOOT'</span></span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    onInit () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$page.setTitleBar(&#123; <span class="attr">text</span>: <span class="string">'组件slot'</span> &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><blockquote><p>在子组件中使用<code>slot</code>组件，使得子组件接纳调用者传入的子内容，从而动态渲染子组件，得到最终的页面</p></blockquote><h1 id="三、生命周期"><a href="#三、生命周期" class="headerlink" title="三、生命周期"></a>三、生命周期</h1><h2 id="3-1-APP的生命周期"><a href="#3-1-APP的生命周期" class="headerlink" title="3.1 APP的生命周期"></a>3.1 APP的生命周期</h2><blockquote><p>当前为APP的生命周期提供了两个回调函数：<code>onCreate</code>, <code>onDestroy</code>；可在<code>app.ux</code>中定义回调函数</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/1480597-7761414ce847115c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;</span><br><span class="line">  natives</span><br><span class="line">&#125; <span class="keyword">from</span> <span class="string">'./util/asyncNatives'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  onCreate () &#123;</span><br><span class="line">    <span class="built_in">console</span>.info(<span class="string">'Application onCreate'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  onDestroy () &#123;</span><br><span class="line">    <span class="built_in">console</span>.info(<span class="string">'Application onDestroy'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 暴露给所有页面，在页面中通过：this.$app.$def.method1()访问</span></span><br><span class="line">  method1 () &#123;</span><br><span class="line">    <span class="built_in">console</span>.info(<span class="string">'这是APP的方法'</span>)</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="comment">// 暴露给所有页面，在页面中通过：this.$app.$def.data1访问</span></span><br><span class="line">  data1: &#123;</span><br><span class="line">    name: <span class="string">'这是APP存的数据'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  natives</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在<code>app.ux</code>中，开发者可以做一些独立于页面的操作。比如：引入公共的JS资源，然后暴露给所有页面</li><li>在<code>app.ux</code>中，通过<code>this.$def</code>访问<code>app.ux</code>中定义的数据和方法</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.info(<span class="string">`获取：APP文件中的数据：<span class="subst">$&#123;<span class="keyword">this</span>.$def.data1.name&#125;</span>`</span>)</span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">`执行：APP文件中的方法`</span>, <span class="keyword">this</span>.$def.method1())</span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">`获取：manifest.json的应用名称：<span class="subst">$&#123;<span class="keyword">this</span>.$def.manifest.name&#125;</span>`</span>)</span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">`获取：manifest.json的config.data的数据：<span class="subst">$&#123;<span class="keyword">this</span>.$data.name&#125;</span>`</span>)</span><br></pre></td></tr></table></figure><blockquote><p>在<code>pageName.ux</code>中，通过<code>this.$app.$def</code>访问<code>app.ux</code>中定义的数据和方法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.info(<span class="string">`获取：APP文件中的数据：<span class="subst">$&#123;<span class="keyword">this</span>.$app.$def.data1.name&#125;</span>`</span>)</span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">`执行：APP文件中的方法`</span>, <span class="keyword">this</span>.$app.$def.method1())</span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">`获取：manifest.json的应用名称：<span class="subst">$&#123;<span class="keyword">this</span>.$app.$def.manifest.name&#125;</span>`</span>)</span><br><span class="line"><span class="built_in">console</span>.info(<span class="string">`获取：manifest.json的config.data的数据：<span class="subst">$&#123;<span class="keyword">this</span>.$app.$data.name&#125;</span>`</span>)</span><br></pre></td></tr></table></figure><p><strong>关于$app与$app.$def</strong></p><ul><li>前者代表框架为开发者暴露提供的APP对象；后者代表开发者在<code>app.ux</code>中导出的对象，放置业务相关的全局数据和方法</li><li>前者对象拥有<code>onCreate</code>, <code>onDestroy</code>生命周期；当应用启动时会执行<code>onCreate</code>方法，里面执行<code>this.variable1</code>的赋值是在<code>$app</code>对象上</li><li>后者对象中的<code>onCreate</code>, <code>onDestroy</code>方法并不会执行，作用仅仅只是把方法复制到前者对象上而已</li><li>这些全局方法在页面中：既可以通过<code>this.$app.method1()</code>调用，也可以通过<code>this.$app.$def.method1()</code>调用；不同之处在于前者可以取到之前赋值的<code>variable1</code>变量，而后者不可以取到（因为之前的赋值是在<code>$app</code>对象上执行的）</li></ul><h2 id="3-2-页面生命周期"><a href="#3-2-页面生命周期" class="headerlink" title="3.2 页面生命周期"></a>3.2 页面生命周期</h2><p><img src="https://upload-images.jianshu.io/upload_images/1480597-70b55809168cd48a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="image.png"></p><p><strong>onInit()</strong></p><blockquote><p>表示ViewModel的数据已经准备好，可以开始使用页面中的数据</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">private: &#123;</span><br><span class="line">  <span class="comment">// 生命周期的文本列表</span></span><br><span class="line">  lcList: []</span><br><span class="line">&#125;,</span><br><span class="line">onInit () &#123;</span><br><span class="line">  <span class="keyword">this</span>.$page.setTitleBar(&#123; <span class="attr">text</span>: <span class="string">'生命周期'</span> &#125;)</span><br><span class="line"></span><br><span class="line">  <span class="keyword">this</span>.lcList.push(<span class="string">'onInit'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.info(<span class="string">`触发：onInit`</span>)</span><br><span class="line">  <span class="built_in">console</span>.info(<span class="string">`执行：获取ViewModel的lcList属性：<span class="subst">$&#123;<span class="keyword">this</span>.lcList&#125;</span>`</span>)   <span class="comment">// 执行：获取ViewModel的lcList属性：onInit</span></span><br><span class="line">  <span class="comment">// $app信息</span></span><br><span class="line">  <span class="built_in">console</span>.info(<span class="string">`获取：manifest.json的config.data的数据：<span class="subst">$&#123;<span class="keyword">this</span>.$app.$data.name&#125;</span>`</span>)</span><br><span class="line">  <span class="built_in">console</span>.info(<span class="string">`获取：APP文件中的数据：<span class="subst">$&#123;<span class="keyword">this</span>.$app.$def.data1.name&#125;</span>`</span>)</span><br><span class="line">  <span class="built_in">console</span>.info(<span class="string">`执行：APP文件中的方法`</span>, <span class="keyword">this</span>.$app.$def.method1())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>onReady()</strong></p><blockquote><p>表示ViewModel的模板已经编译完成，可以开始获取DOM节点（如：this.$element(idxxx)</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">onReady () &#123;</span><br><span class="line">  <span class="keyword">this</span>.lcList.push(<span class="string">'onReady'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.info(<span class="string">`触发：onReady`</span>)</span><br><span class="line">  <span class="built_in">console</span>.info(<span class="string">`执行：获取模板节点：<span class="subst">$&#123;<span class="keyword">this</span>.$rootElement()&#125;</span>`</span>)   <span class="comment">// 执行：获取模板节点：&lt;div attr=&#123;&#125; style=&#123;"flexDirection":"column"&#125;&gt;...&lt;/div&gt;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>onShow(), onHide()</strong></p><blockquote><p>页面被切换隐藏时调用onHide()，页面被切换重新显示时调用onShow()</p></blockquote><ul><li>判断页面的显示状态，可以调用<code>ViewModel</code>的<code>$visible</code>属性：<code>true</code>表示显示，<code>false</code>表示隐藏</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">onShow () &#123;</span><br><span class="line">  <span class="keyword">this</span>.lcList.push(<span class="string">'onShow'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.info(<span class="string">`触发：onShow`</span>)</span><br><span class="line">  <span class="built_in">console</span>.info(<span class="string">`执行：获取页面显示状态属性：<span class="subst">$&#123;<span class="keyword">this</span>.$visible&#125;</span>`</span>)  <span class="comment">// true</span></span><br><span class="line">&#125;,</span><br><span class="line">onHide () &#123;</span><br><span class="line">  <span class="keyword">this</span>.lcList.push(<span class="string">'onHide'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.info(<span class="string">`触发：onHide`</span>)</span><br><span class="line">  <span class="built_in">console</span>.info(<span class="string">`执行：获取页面显示状态属性：<span class="subst">$&#123;<span class="keyword">this</span>.$visible&#125;</span>`</span>)  <span class="comment">// false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>onDestroy()</strong></p><blockquote><p>页面被销毁时调用，被销毁的可能原因有：用户从当前页面返回到上一页，或者用户打开了太多的页面，框架自动销毁掉部分页面，避免占用资源</p></blockquote><ul><li>所以，页面销毁时应该做一些释放资源的操作，如：取消接口订阅监听<code>geolocation.unsubscribe()</code></li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">onDestroy () &#123;</span><br><span class="line">  <span class="built_in">console</span>.info(<span class="string">`触发：onDestroy`</span>)</span><br><span class="line">  <span class="built_in">console</span>.info(<span class="string">`执行：页面要被销毁，销毁状态：<span class="subst">$&#123;<span class="keyword">this</span>.$valid&#125;</span>，应该做取消接口订阅监听的操作: geolocation.unsubscribe()`</span>)    <span class="comment">// true，即将销毁</span></span><br><span class="line">  setTimeout(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.info(<span class="string">`执行：页面已被销毁，不会执行`</span>)                <span class="comment">// 页面已销毁，不会执行</span></span><br><span class="line">  &#125;.bind(<span class="keyword">this</span>), <span class="number">0</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>onBackPress()</strong></p><blockquote><p>当用户点击返回实体按键、左上角返回菜单、调用返回API时触发该事件</p></blockquote><ul><li>如果事件响应方法最后返回true表示不返回，自己处理业务逻辑（完毕后开发者自行调用API返回）；否则：不返回数据，或者返回其它数据：表示遵循系统逻辑：返回到上一页</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">onBackPress () &#123;</span><br><span class="line">  <span class="built_in">console</span>.info(<span class="string">`触发：onBackPress`</span>)</span><br><span class="line"></span><br><span class="line">  <span class="comment">// true：表示自己处理；否则默认返回上一页</span></span><br><span class="line">  <span class="comment">// return true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>返回上一页的接口API：<code>router.back()</code></p></blockquote><p><strong>onMenuPress()</strong></p><blockquote><p>当使用原生的顶部标题栏时，可以通过manifest.json中的menu属性配置是否显示右上角的菜单</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">onMenuPress () &#123;</span><br><span class="line">  <span class="keyword">this</span>.lcList.push(<span class="string">'onMenuPress'</span>)</span><br><span class="line"></span><br><span class="line">  <span class="built_in">console</span>.info(<span class="string">`触发：onMenuPress`</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>A页面的生命周期接口的调用顺序</strong></p><ul><li>打开页面A：<code>onInit()</code> -&gt; <code>onReady()</code> -&gt; <code>onShow()</code></li><li>在页面A打开页面B：<code>onHide()</code></li><li>从页面B返回页面A：<code>onShow()</code></li><li>A页面返回：<code>onBackPress() -&gt; onHide() -&gt; onDestroy()</code></li></ul><h1 id="四、置顶对象"><a href="#四、置顶对象" class="headerlink" title="四、置顶对象"></a>四、置顶对象</h1><ul><li><code>$app</code> 应用对象</li><li><code>$app.$def</code> 获取在<code>app.ux</code>中暴露的对象</li><li><code>$app.$data</code> 获取在<code>manifest.json</code>的<code>config.data</code>中声明的全局数据</li><li><code>$page</code> 页面对象</li><li><code>$page.action</code> 获取打开当前页面的<code>action</code>。仅在当前页面是通过<code>filter</code>匹配的方式打开时有效，否则为<code>undefined</code>。参见<code>manifest</code></li><li><code>$page.uri</code> 获取打开当前页面的<code>uri</code>。仅在当前页面是通过<code>filter</code>匹配的方式打开时有效，否则为<code>undefined</code></li><li><code>$page.setTitleBar</code> 设置页面标题</li><li><code>$valid</code> 页面对象是否有效</li><li><code>$visible</code> 页面是否处于用户可见状态</li></ul><blockquote><p><code>this.$page.setTitleBar</code> 参数属性包括</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  text: <span class="string">'Hello QuickApp'</span>,        <span class="comment">//标题栏文字</span></span><br><span class="line">  textColor: <span class="string">'#ffff'</span>,            <span class="comment">//文字颜色</span></span><br><span class="line">  backgroundColor: <span class="string">'#434343'</span>,    <span class="comment">//背景颜色</span></span><br><span class="line">  backgroundOpacity: <span class="string">'0.8'</span>,      <span class="comment">//背景透明度</span></span><br><span class="line">  menu: <span class="literal">false</span>,      <span class="comment">//是否在标题栏右上角显示菜单按钮 | 设置当前</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="五、全局对象"><a href="#五、全局对象" class="headerlink" title="五、全局对象"></a>五、全局对象</h1><ul><li><code>$element</code> 获取指定id的组件dom对象，如果没有指定id，则返回根组件<code>dom</code>对象用法：<code>this.$element(&#39;xxx&#39;)</code>获取id为xxx的组件实例对象 <code>this.$element()</code> 获取根组件实例对象</li><li><code>$root</code> 获取顶层<code>ViewModel</code></li><li><code>$parent</code> 获取父亲<code>ViewModel</code></li><li><code>$child</code> 获取指定id的自定义组件的<code>ViewModel</code>用法：<code>this.$child(&#39;xxx&#39;)</code> 获取<code>id</code>为<code>xxx</code>的<code>div</code>组件<code>ViewModel</code></li><li><code>$vm(弃用) 请使用上面</code>this.$child(‘xxx’)`替代</li><li><code>$forceUpdate</code> 强制页面刷新</li><li><code>$set</code> 添加数据属性，必须在<code>onInit</code>函数中使用，用法：<code>this.$set(&#39;key&#39;,value)</code></li><li><code>$delete</code> 删除数据属性，如果在<code>onInit</code>函数中使用，用法：<code>this.$delete(&#39;key&#39;)</code></li></ul><h1 id="六、元素属性方法"><a href="#六、元素属性方法" class="headerlink" title="六、元素属性方法"></a>六、元素属性方法</h1><blockquote><p>注意，获取元素应该在页面已渲染后，如 onReady 事件中或 onReady 事件执行完以后</p></blockquote><ul><li><code>$set</code> 添加数据属性，用法：<code>this.$vm(&#39;id&#39;).$set(&#39;key&#39;,value)</code></li><li><code>$delete</code>删除数据属性，用法：<code>this.$vm(&#39;id&#39;).$delete(&#39;key&#39;)</code></li><li><code>$on</code> 在当前页面注册监听事件， 可监听<code>$emit()</code>、 <code>$dispatch()</code>、 <code>$broadcast()</code>等触发的自定义事件，不能用于注册组件节点的事件响应</li><li><code>$off</code> 移除事件监听，参数 <code>fnHandler</code> 为可选，传递仅移除指定的响应函数，不传递则移除此事件的所有监听</li><li><code>$emit</code> 触发当前实例监听事件函数，与 <code>$on()</code> 配合使用</li></ul><h1 id="七、页面设计"><a href="#七、页面设计" class="headerlink" title="七、页面设计"></a>七、页面设计</h1><p><strong>布局和尺寸</strong></p><ul><li>采用<code>border-box</code> 模型且不支持 <code>box-sizing</code> 属性</li><li>目前仅支持长度单位<code>px</code>和<code>%</code></li><li>设计稿1px / 设计稿基准宽度 = 框架样式1px / 项目配置基准宽度(项目配置基准宽度:<code>/src/manifest.json</code> 中 <code>config.designWidth</code> 的值，默认<code>750</code>)</li></ul><p><strong>CSS</strong></p><ul><li>可以使用内联样式、<code>tag</code>选择器、<code>class</code>选择器、id选择器来为组件设置样式</li><li>仅可以使用并列选择、后代选择器、子代选择器</li><li>支持<code>@import</code>引入外部样式、内联样式、行内样式</li><li>颜色值不支持缩写，伪类支持不完全（支持<code>:disabled</code>,<code>:checked</code>,<code>:focus</code>等)</li></ul><h1 id="八、组件"><a href="#八、组件" class="headerlink" title="八、组件"></a>八、组件</h1><blockquote><p><code>&lt;text&gt;</code>、<code>&lt;a&gt;</code>、<code>&lt;span&gt;</code>、<code>&lt;label&gt;</code>组件为文本容器组件，其它组件不能直接放置文本内容</p></blockquote><p><strong><code>&lt;div&gt;</code>: 和 HTML 一样</strong></p><blockquote><p>支持样式 flex-direction, flex-wrap, justify-content, align-items, align-content</p></blockquote><p><strong><code>&lt;popup&gt;</code>: 气泡框</strong></p><ul><li>支持属性 <code>target</code> 和 <code>placement</code></li><li>支持样式 <code>mask-color</code></li><li>支持事件 <code>visibilitychange</code></li><li>自组件只能是<code>&lt;text&gt;</code></li></ul><p><strong><code>&lt;refresh&gt;</code>: 下拉刷新</strong></p><ul><li>支持属性 <code>offset</code>和 <code>refreshing</code></li><li>支持样式 <code>background-color</code> 和 <code>progress-color</code></li><li>支持事件 <code>refresh</code></li></ul><p><strong><code>&lt;richtext&gt;</code>: 富文本编辑器</strong></p><ul><li>支持属性 <code>type(值为 html)</code></li><li>支持<code>div</code>样式, <code>height</code> 无效</li><li>不支持子组件</li></ul><blockquote><p>更多详情 <a href="https://doc.quickapp.cn/widgets/div.html" target="_blank" rel="noopener">https://doc.quickapp.cn/widgets/div.html</a></p></blockquote><h1 id="九、页面切换和参数传递"><a href="#九、页面切换和参数传递" class="headerlink" title="九、页面切换和参数传递"></a>九、页面切换和参数传递</h1><h2 id="9-1-参数传递"><a href="#9-1-参数传递" class="headerlink" title="9.1 参数传递"></a>9.1 参数传递</h2><p><strong>传递方法1</strong></p><blockquote><p><code>&lt;a&gt;</code>标签配合 <code>queryString</code> 传递参数, 这个和前端一致</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/src/home/index.html?key=2333"</span>&gt;</span>跳转页面<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 添加变量参数 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/PageParams/receiveparams?key=&#123;&#123;title&#125;&#125;"</span>&gt;</span>携带参数key2跳转<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>传递方法2</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 导入模块</span><br><span class="line">import router from &apos;@system.router&apos;</span><br></pre></td></tr></table></figure><blockquote><p>通过 <code>router</code> 接口：<code>router.push()</code>, <code>router.replace()</code>, 接受一个如下结构的对象，用法这个和前端 <code>router</code> 一致。</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  url: <span class="string">'/src/home/index.html'</span>,</span><br><span class="line">  params: &#123; <span class="attr">key</span>: <span class="number">2333</span> <span class="comment">/* 需要传递的参数 */</span> &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>接收参数</strong></p><blockquote><p>上述2种传递参数的方法，其接收方法一致，在接收参数页面的 <code>protected</code>对象中获取即可（可设置默认值）</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">   protected: &#123;</span><br><span class="line">     key: <span class="string">''</span></span><br><span class="line">   &#125;,</span><br><span class="line">   onInit () &#123;</span><br><span class="line">     <span class="keyword">this</span>.$page.setTitleBar(&#123; <span class="attr">text</span>: <span class="string">'接收参数'</span> &#125;)</span><br><span class="line"></span><br><span class="line">     <span class="comment">// js中输出页面传递的参数</span></span><br><span class="line">     <span class="built_in">console</span>.info(<span class="string">'key: '</span> + <span class="keyword">this</span>.key)</span><br><span class="line">   &#125;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><strong>回传参数</strong></p><blockquote><p>开发者可能会遇到需要在页面之间回传参数的需求</p></blockquote><ul><li>假设存在页面A和页面B，先从页面A跳转至页面B，然后从页面B返回到页面A时，需要传递参数<br>= 此时，组件a和接口router传参不能满足需求，可以借助于app级别的对象：this.$app.$data</li></ul><blockquote><p>页面A实现代码如下</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tutorial-page"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"/PageParams/returnParams/pageb"</span>&gt;</span>跳转到页面B<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.tutorial-page</span> &#123;</span></span><br><span class="line"><span class="undefined">    flex-direction: column;</span></span><br><span class="line"><span class="undefined">    justify-content: center;</span></span><br><span class="line"><span class="undefined">    align-items: center;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined">  a &#123;</span></span><br><span class="line"><span class="undefined">    margin-top: 75px;</span></span><br><span class="line"><span class="undefined">    font-size: 30px;</span></span><br><span class="line"><span class="css">    <span class="selector-tag">color</span>: <span class="selector-id">#09ba07</span>;</span></span><br><span class="line"><span class="undefined">    text-decoration: underline;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">    private: &#123;</span></span><br><span class="line"><span class="javascript">      msg: <span class="string">''</span></span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    onInit () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$page.setTitleBar(&#123; <span class="attr">text</span>: <span class="string">'页面A'</span> &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    onShow () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 页面被切换显示时，从数据中检查是否有页面B传递来的数据</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (<span class="keyword">this</span>.$app.$data.dataPageB &amp;&amp; <span class="keyword">this</span>.$app.$data.dataPageB.gotoPage === <span class="string">'pageA'</span>) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="comment">// 从数据中获取回传给本页面的数据</span></span></span><br><span class="line"><span class="javascript">        <span class="keyword">const</span> data = <span class="keyword">this</span>.$app.$data.dataPageB.params</span></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.msg = data.msg</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>页面B实现代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tutorial-page"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span>&gt;</span>页面B<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">input</span> <span class="attr">style</span>=<span class="string">"width: 450px;"</span> <span class="attr">placeholder</span>=<span class="string">"请输入回传给页面A的信息"</span> <span class="attr">onchange</span>=<span class="string">"updateMsg"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.tutorial-page</span> &#123;</span></span><br><span class="line"><span class="undefined">    flex-direction: column;</span></span><br><span class="line"><span class="undefined">    justify-content: center;</span></span><br><span class="line"><span class="undefined">    align-items: center;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">    private: &#123;</span></span><br><span class="line"><span class="javascript">      msg: <span class="string">''</span></span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    onInit () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$page.setTitleBar(&#123; <span class="attr">text</span>: <span class="string">'页面B'</span> &#125;)</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    onHide () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 页面被切换隐藏时，将要传递的数据对象写入</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$app.$data.dataPageB = &#123;</span></span><br><span class="line"><span class="javascript">        gotoPage: <span class="string">'pageA'</span>,</span></span><br><span class="line"><span class="undefined">        params: &#123;</span></span><br><span class="line"><span class="javascript">          msg: <span class="keyword">this</span>.msg</span></span><br><span class="line"><span class="undefined">        &#125;</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    updateMsg (e) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 更新input输入的信息文本</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.msg = e.text</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="9-2-页面间通信"><a href="#9-2-页面间通信" class="headerlink" title="9.2 页面间通信"></a>9.2 页面间通信</h2><blockquote><p><a href="https://doc.quickapp.cn/framework/script.html" target="_blank" rel="noopener">https://doc.quickapp.cn/framework/script.html</a></p></blockquote><blockquote><p>会利用到一个构造函数 <code>new BroadcastChannel(string)</code>, 它接受一个字符串参数，作为实例的频道名称。它的实例具有以下属性和方法</p></blockquote><ul><li><code>name</code> 频道名称,区分不同的消息频道(注意：不同频道之间不可通信)。</li><li><code>postMessage</code> 用于在当前频道中广播消息</li><li><code>onmessage</code> 订阅消息。在频道中接收到广播消息之后，会给所有订阅者派发消息事件</li><li><code>close</code> 关闭当前的频道</li></ul><blockquote><p>其中 <code>onmessage</code> 事件有2个属性(通过 <code>event</code> 对象访问)</p></blockquote><ul><li><code>type</code> message</li><li><code>data</code> 接收到的消息内容</li></ul><h1 id="十、组件通信"><a href="#十、组件通信" class="headerlink" title="十、组件通信"></a>十、组件通信</h1><p><strong>父组件到子组件</strong></p><ul><li>子组件通过 <code>props</code> 获取父组件传入的值，见上文 template 部分</li><li>通过 <code>this.watch(props, callback)</code> 监控传入数据变化并调用回调函数</li><li>父组件通过<code>this.$broadcast()</code>完成事件触发，子组件通过<code>$on()</code>绑定事件并响应</li></ul><p><strong>子组件到父组件</strong></p><ul><li>父子组件传对象类型属于引用传递，可以直接修改父组件传入对象改变父组件数据</li><li>子组件通过<code>this.$dispatch()</code>完成事件触发，父组件通过<code>$on()</code>绑定事件并响应</li><li>子组件通过<code>this.$emit()</code>触发在节点上绑定的事件来执行父组件的方法</li></ul><blockquote><ul><li>注：<code>this.$broadcast()</code>、<code>this.$emit()</code> 和 <code>this.$dispatch()</code>参数一致</li><li>注：触发时传递参数，再接收时使用<code>event.detail</code>来获取参数</li><li>注：当传递结束后，可以调用<code>event.stop()</code>来结束传递</li></ul></blockquote><h1 id="十一、Deeplink"><a href="#十一、Deeplink" class="headerlink" title="十一、Deeplink"></a>十一、Deeplink</h1><blockquote><p>配合<code>&lt;web&gt;</code>标签框架支持通过链接从外部打开应用，格式</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http:<span class="comment">//hapjs.org/app/&lt;package&gt;/[path][?key=value]</span></span><br><span class="line">https:<span class="comment">//hapjs.org/app/&lt;package&gt;/[path][?key=value]</span></span><br><span class="line">hap:<span class="comment">//app/&lt;package&gt;/[path][?key=value]</span></span><br></pre></td></tr></table></figure><ul><li><code>package</code>: 应用包名，必选</li><li><code>path</code>: 应用内页面的<code>path</code>，可选，默认为首页</li><li><code>key-value</code>: 希望传给页面的参数，可选，可以有多个</li></ul><blockquote><p>从传统网页调起需引入以下脚本</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&apos;//statres.quickapp.cn/quickapp/js/routerinline.min.js&apos;/&gt;</span><br></pre></td></tr></table></figure><h1 id="十二、事件监听与触发"><a href="#十二、事件监听与触发" class="headerlink" title="十二、事件监听与触发"></a>十二、事件监听与触发</h1><blockquote><p><code>$on</code> 用于监听自定义事件；<code>$off</code>移除对应的事件监听</p></blockquote><p><strong>$on(evtName, fnHandler)</strong></p><blockquote><p>在当前页面注册监听事件， 可监听<code>$emit()</code>、 <code>$dispatch()</code>、 <code>$broadcast()</code>等触发的自定义事件，不能用于注册组件节点的事件响应</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    onInit()&#123;</span><br><span class="line">      <span class="keyword">this</span>.$on(<span class="string">'customEvtType1'</span>, <span class="keyword">this</span>.customEvtType1Handler)</span><br><span class="line">    &#125;,</span><br><span class="line">    customEvtType1Handler(evt)&#123;</span><br><span class="line">      <span class="comment">// 事件类型，事件参数</span></span><br><span class="line">      <span class="built_in">console</span>.info(<span class="string">`触发事件：类型：<span class="subst">$&#123;evt.type&#125;</span>, 参数： <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(evt.detail)&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>$off(evtName, fnHandler)</strong></p><blockquote><p>移除事件监听，参数 fnHandler 为可选，传递仅移除指定的响应函数，不传递则移除此事件的所有监听</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    removeEventHandler () &#123;</span><br><span class="line">      <span class="comment">// 不传递fnHandler：移除所有监听</span></span><br><span class="line">      <span class="keyword">this</span>.$off(<span class="string">'customEvtType1'</span>)</span><br><span class="line">      <span class="comment">// 传递fnHandler：移除指定的监听函数</span></span><br><span class="line">      <span class="keyword">this</span>.$off(<span class="string">'customEvtType1'</span>, <span class="keyword">this</span>.customEvtType1Handler)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>触发ViewModel事件</strong></p><blockquote><p>页面的交互中可能会遇到一些非手动触发的需求，$emit() 通过触发当前实例上的事件达到动态触发事件的行为</p></blockquote><p><strong>$emit(evtName, evtDetail)</strong></p><ul><li>触发当前实例监听事件函数，与 <code>$on()</code> 配合使用</li><li>注意：<code>$emit()</code> 目前只触发 <code>$on</code> 所监听的事件</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">    emitEvent () &#123;</span><br><span class="line">      <span class="keyword">this</span>.$emit(<span class="string">'customEvtType1'</span>, &#123; <span class="attr">params</span>: <span class="string">'参数内容'</span> &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p><strong>监听原生组件事件</strong></p><ul><li>原生组件支持一系列事件，如通用事件（如：click, disappear）、组件专有事件（如：focus）</li></ul><blockquote><ul><li>在响应函数执行时通过target获取，如：onClickHandler</li><li>在响应函数绑定时传递参数，如：onClickHandler2</li></ul></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tutorial-page"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">id</span>=<span class="string">"elNode1"</span> <span class="attr">class</span>=<span class="string">"&#123;&#123; elClassName + 1 &#125;&#125;"</span> <span class="attr">disabled</span>=<span class="string">"false"</span> <span class="attr">onclick</span>=<span class="string">"onClickHandler"</span>&gt;</span>组件节点1<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">id</span>=<span class="string">"elNode2"</span> <span class="attr">class</span>=<span class="string">"class-static-1 &#123;&#123; elClassName + 2 &#125;&#125;"</span> <span class="attr">onclick</span>=<span class="string">"onClickHandler2('参数1', argName)"</span>&gt;</span>组件节点2<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"less"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.tutorial-page</span> &#123;</span></span><br><span class="line"><span class="undefined">    flex-direction: column;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">    private: &#123;</span></span><br><span class="line"><span class="javascript">      elClassName: <span class="string">'class-dynamic'</span>,</span></span><br><span class="line"><span class="javascript">      argName: <span class="string">'动态参数'</span></span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    onClickHandler (evt) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 事件类型，参数详情</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.info(<span class="string">`触发事件：类型：<span class="subst">$&#123;evt.type&#125;</span>, 详情： <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(evt.detail)&#125;</span>`</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (evt.target) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.info(<span class="string">`触发事件：节点：<span class="subst">$&#123;evt.target.id&#125;</span>, <span class="subst">$&#123;evt.target.attr.disabled&#125;</span>`</span>)</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    onClickHandler2 (arg1, arg2, evt) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 事件类型，事件参数，target</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.info(<span class="string">`触发事件：类型：<span class="subst">$&#123;evt.type&#125;</span>, 参数： <span class="subst">$&#123;arg1&#125;</span>, <span class="subst">$&#123;arg2&#125;</span>`</span>);</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>触发原生组件事件</strong></p><blockquote><p>通过<code>$emitElement()</code>完成事件的动态触发</p></blockquote><ul><li><strong>$emitElement(evtName, evtDetail, id)</strong></li></ul><blockquote><p>可以触发指定组件<code>id</code>的事件，通过<code>evt.detail</code>获取传递的参数；该方法对自定义组件无效</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tutorial-page"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">onclick</span>=<span class="string">"emitElement"</span>&gt;</span>触发组件节点的事件：click<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">id</span>=<span class="string">"elNode1"</span> <span class="attr">class</span>=<span class="string">"&#123;&#123; elClassName + 1 &#125;&#125;"</span> <span class="attr">disabled</span>=<span class="string">"false"</span> <span class="attr">onclick</span>=<span class="string">"onClickHandler"</span>&gt;</span>组件节点1<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">text</span> <span class="attr">id</span>=<span class="string">"elNode2"</span> <span class="attr">class</span>=<span class="string">"class-static-1 &#123;&#123; elClassName + 2 &#125;&#125;"</span> <span class="attr">onclick</span>=<span class="string">"onClickHandler2('参数1', argName)"</span>&gt;</span>组件节点2<span class="tag">&lt;/<span class="name">text</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">lang</span>=<span class="string">"less"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css">  <span class="selector-class">.tutorial-page</span> &#123;</span></span><br><span class="line"><span class="undefined">    flex-direction: column;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">  <span class="keyword">export</span> <span class="keyword">default</span> &#123;</span></span><br><span class="line"><span class="undefined">    private: &#123;</span></span><br><span class="line"><span class="javascript">      elClassName: <span class="string">'class-dynamic'</span>,</span></span><br><span class="line"><span class="javascript">      argName: <span class="string">'动态参数'</span></span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    onClickHandler (evt) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 事件类型，参数详情</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.info(<span class="string">`触发事件：类型：<span class="subst">$&#123;evt.type&#125;</span>, 详情： <span class="subst">$&#123;<span class="built_in">JSON</span>.stringify(evt.detail)&#125;</span>`</span>);</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="javascript">      <span class="keyword">if</span> (evt.target) &#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.info(<span class="string">`触发事件：节点：<span class="subst">$&#123;evt.target.id&#125;</span>, <span class="subst">$&#123;evt.target.attr.disabled&#125;</span>`</span>)</span></span><br><span class="line"><span class="undefined">      &#125;</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    onClickHandler2 (arg1, arg2, evt) &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 事件类型，事件参数，target</span></span></span><br><span class="line"><span class="javascript">      <span class="built_in">console</span>.info(<span class="string">`触发事件：类型：<span class="subst">$&#123;evt.type&#125;</span>, 参数： <span class="subst">$&#123;arg1&#125;</span>, <span class="subst">$&#123;arg2&#125;</span>`</span>);</span></span><br><span class="line"><span class="undefined">    &#125;,</span></span><br><span class="line"><span class="undefined">    emitElement () &#123;</span></span><br><span class="line"><span class="javascript">      <span class="comment">// 注意：通过此类方式的事件不会携带target属性，开发者可以通过detail参数实现</span></span></span><br><span class="line"><span class="javascript">      <span class="keyword">this</span>.$emitElement(<span class="string">'click'</span>, &#123; <span class="attr">params</span>: <span class="string">'参数内容'</span> &#125;, <span class="string">'elNode1'</span>)</span></span><br><span class="line"><span class="undefined">    &#125;</span></span><br><span class="line"><span class="undefined">  &#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="十三、一些问题"><a href="#十三、一些问题" class="headerlink" title="十三、一些问题"></a>十三、一些问题</h1><ul><li>自定义属性名不能采用驼峰命名，否则值永远是 <code>undefined</code></li><li><code>show</code> 属性并不好用，没起什么作用</li><li>类似 <code>onInit</code> 等等函数是页面生命周期，不是组件生命周期，不会因为组件状态变化而执行</li><li><code>display</code>类型只有 <code>flex</code> 和 <code>none</code></li><li>子盒子不能将父盒子撑高</li><li>不遵循盒子模型，类似但不完全等同于 <code>border-box</code></li></ul><h1 id="十四、快应用开发资源"><a href="#十四、快应用开发资源" class="headerlink" title="十四、快应用开发资源"></a>十四、快应用开发资源</h1><ul><li><a href="https://github.com/l455202325/APIDemo" target="_blank" rel="noopener">快应用API Demo 集合 QuickAPP</a></li><li><a href="https://github.com/yesvods/awesome-quick-app" target="_blank" rel="noopener">awesome-quick-app</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;MD原文件 &lt;a href=&quot;https://github.com/poetries/poetries.github.io/blob/dev/source/_posts/quick-app-summary.md&quot; target=&quot;_blank&quot; r
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="快应用" scheme="http://blog.poetries.top/tags/%E5%BF%AB%E5%BA%94%E7%94%A8/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript数组方法总结篇</title>
    <link href="http://blog.poetries.top/2018/08/18/javaScript-arr-summary/"/>
    <id>http://blog.poetries.top/2018/08/18/javaScript-arr-summary/</id>
    <published>2018-08-18T10:40:43.000Z</published>
    <updated>2018-08-31T08:54:59.920Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一、数组预览图"><a href="#一、数组预览图" class="headerlink" title="一、数组预览图"></a>一、数组预览图</h3><p><img src="https://upload-images.jianshu.io/upload_images/1480597-3067afe2cc23ff1f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="数组方法"></p><h3 id="二、会改变原数组的方法"><a href="#二、会改变原数组的方法" class="headerlink" title="二、会改变原数组的方法"></a>二、会改变原数组的方法</h3><h4 id="2-1-push"><a href="#2-1-push" class="headerlink" title="2.1 push()"></a>2.1 push()</h4><ul><li>方法在数组的尾部添加一个或多个元素，并返回数组的长度</li></ul><blockquote><p>参数: item1, item2, …, itemX ,要添加到数组末尾的元素</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> length = arr.push(<span class="string">'末尾1'</span>,<span class="string">'末尾2'</span>); <span class="comment">// 返回数组长度</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr,length)</span><br><span class="line"></span><br><span class="line"><span class="comment">// [1, 2, 3, "末尾1", "末尾2"] 5</span></span><br></pre></td></tr></table></figure><blockquote><p>返回值： 数组的长度</p></blockquote><h4 id="2-2-pop"><a href="#2-2-pop" class="headerlink" title="2.2  pop()"></a>2.2  pop()</h4><ul><li>方法删除数组的最后一个元素，减小数组长度并返回它删除的值</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//组合使用push()和pop()能够用JavaScript数组实现先进后出的栈</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> stack = [];</span><br><span class="line"></span><br><span class="line">stack.push(<span class="number">1</span>,<span class="number">2</span>) <span class="comment">// 返回长度2，这时stack的值是[1,2]</span></span><br><span class="line"></span><br><span class="line">stack.pop() <span class="comment">// 返回删除的值2，这时stack的值是[1]</span></span><br></pre></td></tr></table></figure><blockquote><p>返回值： 从数组中删除的元素(当数组为空时返回undefined)。</p></blockquote><h4 id="2-3-unshift"><a href="#2-3-unshift" class="headerlink" title="2.3 unshift()"></a>2.3 unshift()</h4><blockquote><p>方法在数组的头部添加一个或多个元素，并将已存在的元素移动到更高索引的位置来获得足够的空间，最后返回数组新的长度</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> length = arr.unshift(<span class="number">1</span>,<span class="number">2</span>); <span class="comment">// 返回长度是5</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr, length)</span><br><span class="line"></span><br><span class="line"><span class="comment">//[1, 2, 3, 4, 5] 5</span></span><br></pre></td></tr></table></figure><blockquote><p>返回值： 返回数组新的长度</p></blockquote><h4 id="2-4-shift"><a href="#2-4-shift" class="headerlink" title="2.4  shift()"></a>2.4  shift()</h4><blockquote><p>方法删除数组的第一个元素并将其返回，然后把所有随后的元素下移一个位置来填补数组头部的空缺，返回值是删除的元素</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> item = arr.shift(); <span class="comment">// 返回删除的值1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr, item)</span><br><span class="line"></span><br><span class="line"><span class="comment">// [2, 3] 1</span></span><br></pre></td></tr></table></figure><blockquote><p>返回值： 从数组中删除的元素; 如果数组为空则返回undefined</p></blockquote><h4 id="2-5-splice"><a href="#2-5-splice" class="headerlink" title="2.5 splice()"></a>2.5 splice()</h4><blockquote><p>方法是在数组中插入或删除元素的通用方法</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// start不超过数组长度(以下操作是连续的)</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">arr.splice(<span class="number">2</span>) <span class="comment">// arr是[1,2]，返回值是[3,4,5]</span></span><br><span class="line"></span><br><span class="line">arr.splice(<span class="number">1</span>,<span class="number">1</span>) <span class="comment">// arr是[1]，返回值是[2]</span></span><br><span class="line"></span><br><span class="line">arr.splice(<span class="number">0</span>,<span class="number">3</span>) <span class="comment">// arr是[]，返回值是[1],因为此时数组从第0位开始不够3位，所以是删除从0开始到最后的所有元素。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// start大于数组长度(以下操作是连续的)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">arr.splice(<span class="number">5</span>) <span class="comment">// arr是[1,2,3,4,5]，返回值是[]</span></span><br><span class="line"></span><br><span class="line">arr.splice(<span class="number">5</span>,<span class="number">3</span>,<span class="number">6</span>) <span class="comment">// arr是[1,2,3,4,5,6]，返回值是[]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">arr.splice(<span class="number">5</span>,<span class="number">3</span>,<span class="number">7</span>) <span class="comment">// arr是[1,2,3,4,5,7] 返回值是[6]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// start是负数(以下操作是连续的)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">arr.splice(<span class="number">-3</span>,<span class="number">2</span>); <span class="comment">// arr是[1,2,5], 返回值是[3,4]</span></span><br><span class="line">arr.splice(<span class="number">-4</span>); <span class="comment">// arr是[],返回值是[1,2,5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入数组时，是插入数组本身，而不是数组元素</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">arr.splice(<span class="number">1</span>,<span class="number">0</span>,[<span class="number">2</span>,<span class="number">3</span>]) <span class="comment">// arr是[1,[2,3],4,5]，返回值是[]</span></span><br></pre></td></tr></table></figure><h4 id="2-6-sort"><a href="#2-6-sort" class="headerlink" title="2.6 sort()"></a>2.6 sort()</h4><blockquote><p><code>sort()</code> 方法将数组中的元素排序并返回排序后的数组</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> stringArray = [<span class="string">"Blue"</span>, <span class="string">"Humpback"</span>, <span class="string">"Beluga"</span>];</span><br><span class="line"><span class="keyword">var</span> numberArray = [<span class="number">40</span>, <span class="number">1</span>, <span class="number">5</span>, <span class="number">200</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compareNumbers</span>(<span class="params">a, b</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> a - b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'stringArray:'</span> + stringArray.join());</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Sorted:'</span> + stringArray.sort());</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'numberArray:'</span> + numberArray.join());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 没有使用比较函数时，数字并不会按照我们设想的那样排序</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Sorted without a compare function:'</span>+ numberArray.sort());</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'Sorted with compareNumbers:'</span>+ numberArray.sort(compareNumbers));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印如下</span></span><br><span class="line"><span class="comment">// stringArray: Blue,Humpback,Beluga</span></span><br><span class="line"><span class="comment">// Sorted: Beluga,Blue,Humpback</span></span><br><span class="line"><span class="comment">// numberArray: 40,1,5,200</span></span><br><span class="line"><span class="comment">// Sorted without a compare function: 1,200,40,5</span></span><br><span class="line"><span class="comment">// Sorted with compareNumbers: 1,5,40,200</span></span><br></pre></td></tr></table></figure><blockquote><p>返回值： 返回排序后的数组。原数组已经被排序后的数组代替</p></blockquote><h4 id="2-7-reverse"><a href="#2-7-reverse" class="headerlink" title="2.7  reverse()"></a>2.7  reverse()</h4><blockquote><p>方法将数组中的元素颠倒顺序，返回逆序的数组</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">arr.reverse() <span class="comment">// arr是[3,2,1]，返回值是[3,2,1]</span></span><br></pre></td></tr></table></figure><blockquote><p>返回值： 返回顺序颠倒后的数组。原数组已经被排序后的数组代替</p></blockquote><h4 id="2-8-fill"><a href="#2-8-fill" class="headerlink" title="2.8 fill()"></a>2.8 fill()</h4><blockquote><p>方法用一个固定值填充一个数组中从起始索引到终止索引内的全部元素</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">arr.fill(value[, start[, end]])</span><br></pre></td></tr></table></figure><ul><li><code>value</code> 用来填充数组元素的值。</li><li><code>start</code> (可选) 起始索引，默认值为0。</li><li><code>end</code> (可选) 终止索引，默认值为 this.length。</li><li>如果 start 是个负数, 则开始索引会被自动计算成为 <code>length+start</code>, 其中 length 是 this 对象的 <code>length</code>属性值. 如果 end 是个负数, 则结束索引会被自动计算成为 <code>length+end</code></li></ul><blockquote><p>返回值： 修改后的数组</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].fill(<span class="number">4</span>); <span class="comment">// [4, 4, 4]</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].fill(<span class="number">4</span>, <span class="number">1</span>); <span class="comment">// [1, 4, 4]</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].fill(<span class="number">4</span>, <span class="number">1</span>, <span class="number">2</span>); <span class="comment">// [1, 4, 3]</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].fill(<span class="number">4</span>, <span class="number">1</span>, <span class="number">1</span>); <span class="comment">// [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].fill(<span class="number">4</span>, <span class="number">3</span>, <span class="number">3</span>); <span class="comment">// [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].fill(<span class="number">4</span>, <span class="number">-3</span>, <span class="number">-2</span>); <span class="comment">// [4, 2, 3]</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].fill(<span class="number">4</span>, <span class="literal">NaN</span>, <span class="literal">NaN</span>); <span class="comment">// [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].fill(<span class="number">4</span>, <span class="number">3</span>, <span class="number">5</span>); <span class="comment">// [1, 2, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>(<span class="number">3</span>).fill(<span class="number">4</span>); <span class="comment">// [4, 4, 4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//fill 方法故意被设计成通用方法, 该方法不要求 this 是数组对象。</span></span><br><span class="line"></span><br><span class="line">[].fill.call(&#123; <span class="attr">length</span>: <span class="number">3</span> &#125;, <span class="number">4</span>); <span class="comment">// &#123;0: 4, 1: 4, 2: 4, length: 3&#125;</span></span><br></pre></td></tr></table></figure><h3 id="三、不改变原数组的方法"><a href="#三、不改变原数组的方法" class="headerlink" title="三、不改变原数组的方法"></a>三、不改变原数组的方法</h3><h4 id="3-1-slice"><a href="#3-1-slice" class="headerlink" title="3.1 slice()"></a>3.1 slice()</h4><blockquote><p>方法返回一个从开始到结束（不包括结束）选择的数组的一部分浅拷贝到一个新数组对象。且原始数组不会被修改</p></blockquote><ul><li>返回值： 一个含有提取元素的新数组</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr1 = arr.slice(<span class="number">1</span>,<span class="number">3</span>); <span class="comment">// arr是[1,2,3,4,5]， arr1是[2,3]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr2 = arr.slice(<span class="number">-2</span>,<span class="number">-1</span>); <span class="comment">// arr是[1,2,3,4,5], arr2是[4]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 开始位置在结束位置后面，得到的数组是空</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr3 = arr.slice(<span class="number">-2</span>, <span class="number">-3</span>); <span class="comment">// arr是[1,2,3,4,5], arr3是[]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr4 = arr.slice(<span class="number">2</span>, <span class="number">1</span>); <span class="comment">// arr是[1,2,3,4,5], arr4是[]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果元素是个对象引用 （不是实际的对象），slice 会拷贝这个对象引用到新的数组里。两个对象引用都引用了同一个对象。如果被引用的对象发生改变，则新的和原来的数组中的这个元素也会发生改变。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [&#123;<span class="attr">name</span>: <span class="string">'xiaoming'</span>&#125;];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr1 = arr.slice(); <span class="comment">// arr是[&#123;name: xiaoming&#125;]，arr1是[&#123;name: 'xiaoming'&#125;]</span></span><br><span class="line"></span><br><span class="line">arr1[<span class="number">0</span>].name = <span class="string">'xiaogang'</span>; <span class="comment">// arr是[&#123;name: 'xiaogang'&#125;]，arr1是[&#123;name: 'xiaogang'&#125;]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 对于字符串、数字及布尔值来说（不是 String、Number 或者 Boolean 对象），slice 会拷贝这些值到新的数组里。在别的数组里修改这些字符串或数字或是布尔值，将不会影响另一个数组。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr1 = arr.slice(); <span class="comment">// arr是[1,2,3]，arr1是[1,2,3]</span></span><br><span class="line"></span><br><span class="line">arr1[<span class="number">1</span>] = <span class="string">"two"</span>; <span class="comment">// arr是[1,2,3]，arr1是[1,"tow",3]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 当然，如果向两个数组任一中添加了新元素（简单或者引用类型），则另一个不会受到影响</span></span><br></pre></td></tr></table></figure><h4 id="3-2-join"><a href="#3-2-join" class="headerlink" title="3.2  join()"></a>3.2  join()</h4><blockquote><p>方法将数组（或一个类数组对象）中所有元素都转化为字符串并连接在一起，返回最后生成的字符串</p></blockquote><ul><li>返回值： 一个所有数组元素连接的字符串。如果 arr.length 为0，则返回空字符串</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> num = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str1 = num.join(); <span class="comment">// 1,2,3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str2 = num.join(<span class="string">', '</span>) <span class="comment">// 1, 2, 3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str3 = num.join(<span class="string">''</span>) <span class="comment">// 123</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//所有的数组元素被转换成字符串，再用一个分隔符将这些字符串连接起来。如果元素是undefined 或者null， 则会转化成空字符串。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> num = [<span class="number">1</span>,<span class="literal">null</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> str1 = num.join(); <span class="comment">// 1,,3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果数组中的元素是数组，会将里面的数组也调用join()</span></span><br><span class="line"><span class="keyword">let</span> num = [[<span class="number">1</span>,<span class="number">2</span>],<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str1 = num.join(<span class="string">'-'</span>); <span class="comment">// 1,2-3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果数组中的元素是对象，对象会被转为[object Object]字符串</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> num = [&#123;<span class="attr">num</span>: <span class="number">1</span>&#125;,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> str1 = num.join(<span class="string">'-'</span>); <span class="comment">// [object Object]-2-3</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 扁平化简单的二维数组</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">11</span>, [<span class="number">22</span>, <span class="number">33</span>], [<span class="number">44</span>, <span class="number">55</span>], <span class="number">66</span>];</span><br><span class="line"><span class="keyword">const</span> flatArr = arr.join().split(<span class="string">','</span>); <span class="comment">// ["11", "22", "33", "44", "55", "66"]</span></span><br></pre></td></tr></table></figure><h4 id="3-3-toString"><a href="#3-3-toString" class="headerlink" title="3.3 toString()"></a>3.3 toString()</h4><blockquote><p>方法将数组的每个元素转化为字符串(如有必要将调用元素的<code>toString()</code>方法)并且输出用逗号分割的字符串列表。返回一个字符串表示数组中的元素</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].toString(); <span class="comment">// 1,2,3</span></span><br><span class="line"></span><br><span class="line">[<span class="number">1</span>,[<span class="number">2</span>,<span class="string">'c'</span>]].toString(); <span class="comment">//1,2,c</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 以上与不使用任何参数调用join()方法返回的字符串是一样的。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下的这个例子要跟下面的toLocaleString对照看</span></span><br><span class="line"></span><br><span class="line">[&#123;<span class="attr">a</span>:<span class="number">1</span>&#125;,<span class="number">1</span>,<span class="keyword">new</span> <span class="built_in">Date</span>()].toString() <span class="comment">//"[object Object],1,Sat Jul 07 2018 18:43:45 GMT+0800 (中国标准时间)"</span></span><br></pre></td></tr></table></figure><blockquote><p>注意： 当数组和字符串操作的时候，js 会调用这个方法将数组自动转换成字符串</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[1,2,3]+&apos;abc&apos; //1,2,3abc</span><br></pre></td></tr></table></figure><blockquote><p>返回值： 返回一个字符串表示数组中的元素</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 扁平化简单的二维数组</span></span><br><span class="line"><span class="keyword">const</span> arr = [<span class="number">11</span>, [<span class="number">22</span>, <span class="number">33</span>], [<span class="number">44</span>, <span class="number">55</span>], <span class="number">66</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> flatArr = arr.toString().split(<span class="string">','</span>); <span class="comment">// ["11", "22", "33", "44", "55", "66"]</span></span><br></pre></td></tr></table></figure><h4 id="3-4-toLocaleString"><a href="#3-4-toLocaleString" class="headerlink" title="3.4  toLocaleString()"></a>3.4  toLocaleString()</h4><blockquote><p>数组中的元素将使用各自的 toLocaleString 方法转成字符串，这些字符串将使用一个特定语言环境的字符串（例如一个逗号 “,”）隔开</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//数组中的元素将会使用各自的 toLocaleString 方法：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Object: Object.prototype.toLocaleString()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Number: Number.prototype.toLocaleString()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Date: Date.prototype.toLocaleString()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> prices = [<span class="string">'￥7'</span>, <span class="number">500</span>, <span class="number">8123</span>, <span class="number">12</span>];</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不带参数</span></span><br><span class="line"></span><br><span class="line">prices.toLocaleString(); <span class="comment">// "￥7,500,8,123,12"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//带参数</span></span><br><span class="line"></span><br><span class="line">prices.toLocaleString(<span class="string">'ja-JP'</span>, &#123; <span class="attr">style</span>: <span class="string">'currency'</span>, <span class="attr">currency</span>: <span class="string">'JPY'</span> &#125;); <span class="comment">// "￥7,500,8,123,12"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//MDN上的举例中说是 "￥7,￥500,￥8,123,￥12"，在浏览器和Node中验证了返回的都是 "￥7,500,8,123,12" 啊！</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 以下的这个例子要跟上面的toString对照看</span></span><br><span class="line"></span><br><span class="line">[&#123;<span class="attr">a</span>:<span class="number">1</span>&#125;,<span class="number">1</span>,<span class="keyword">new</span> <span class="built_in">Date</span>()].toLocaleString() <span class="comment">//"[object Object],1,2018/7/7 下午6:45:00"</span></span><br></pre></td></tr></table></figure><blockquote><p>返回值： 表示数组元素的字符串</p></blockquote><h4 id="3-5-concat"><a href="#3-5-concat" class="headerlink" title="3.5  concat()"></a>3.5  concat()</h4><blockquote><p>它的元素包括调用concat()的原始数组的元素和concat()的每个参数，但是要注意，concat()不会递归扁平化数组的数组，concat()也不会修改调用的数组</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>].concat([<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>],[<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>]) <span class="comment">// [1, 2, 3, 4, 5, 6, 7, 8, 9]</span></span><br><span class="line"></span><br><span class="line">[<span class="string">'a'</span>,<span class="string">'b'</span>,<span class="string">'c'</span>].concat(<span class="number">1</span>,[<span class="number">2</span>,<span class="number">3</span>],[[<span class="number">4</span>,<span class="number">5</span>]]) <span class="comment">// ["a", "b", "c", 1, 2, 3, [4,5]]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// concat方法不会改变this或任何作为参数提供的数组，而是返回一个浅拷贝,所以原始数组和新数组都引用相同的对象。 如果引用的对象被修改，新数组和原始数组都会变。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">2</span>,obj];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">1</span>].concat(arr1);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr1,arr2) <span class="comment">//[2,&#123;a:1&#125;],[1,2,&#123;a:1&#125;]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//记录下上面的打印结果之后修改obj</span></span><br><span class="line"></span><br><span class="line">obj.a = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">console</span>.log(arr1,arr2) <span class="comment">////[2,&#123;a:2&#125;],[1,2,&#123;a:2&#125;]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 说了是浅拷贝，而且原数组也不改变，那我们就可以用它来实现数组的浅拷贝功能</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> num1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//第一种</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> num2 = num1.concat();</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> num2 = [].concat(num1);</span><br><span class="line">num2[<span class="number">0</span>] = <span class="string">'a'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(num1,num2); <span class="comment">// [1, 2, 3] ["a", 2, 3]</span></span><br></pre></td></tr></table></figure><h4 id="3-6-isArray"><a href="#3-6-isArray" class="headerlink" title="3.6 isArray()"></a>3.6 isArray()</h4><blockquote><p>用于确定传递的值是否是一个 Array</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 下面的函数调用都返回 true</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.isArray([]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.isArray([<span class="number">1</span>]);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="keyword">new</span> <span class="built_in">Array</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">// 这里注意：Array.prototype 也是一个数组,一个属性值不是索引的数组。[constructor: ƒ, concat: ƒ, find: ƒ, findIndex: ƒ, pop: ƒ, …]</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="built_in">Array</span>.prototype);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 下面的函数调用都返回 false</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.isArray();</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.isArray(&#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="literal">undefined</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="number">17</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="string">'Array'</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.isArray(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">Array</span>.isArray(&#123; <span class="attr">__proto__</span>: <span class="built_in">Array</span>.prototype &#125;);</span><br></pre></td></tr></table></figure><h3 id="四、数组遍历、映射、过滤、检测、简化等方法"><a href="#四、数组遍历、映射、过滤、检测、简化等方法" class="headerlink" title="四、数组遍历、映射、过滤、检测、简化等方法"></a>四、数组遍历、映射、过滤、检测、简化等方法</h3><h4 id="4-1-forEach"><a href="#4-1-forEach" class="headerlink" title="4.1 forEach()"></a>4.1 forEach()</h4><blockquote><p>方法从头到尾遍历数组，为每个元素调用指定的函数</p></blockquote><ul><li><code>callback</code> 为数组中每个元素执行的函数，该函数接收三个参数</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 1、 空元素不遍历,undefined和null是会遍历的。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> numberArr = [<span class="number">1</span>,<span class="number">2</span>,,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">numberArr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value,index,array</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value,index,array)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印信息如下，可见空元素是不会遍历的</span></span><br><span class="line"><span class="comment">//1 0 [1, 2, empty, 3]</span></span><br><span class="line"><span class="comment">//2 1 [1, 2, empty, 3]</span></span><br><span class="line"><span class="comment">//3 3 [1, 2, empty, 3]</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> nullArr = [<span class="number">1</span>,<span class="number">2</span>,<span class="literal">null</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line">nullArr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value,index,array</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(value,index,array)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印信息如下，null是会遍历的</span></span><br><span class="line"><span class="comment">//1 0 (4) [1, 2, null, 3]</span></span><br><span class="line"><span class="comment">//2 1 (4) [1, 2, null, 3]</span></span><br><span class="line"><span class="comment">//null 2 (4) [1, 2, null, 3]</span></span><br><span class="line"><span class="comment">//3 3 (4) [1, 2, null, 3]</span></span><br><span class="line"><span class="comment">//2、已删除的项不会被遍历到。如果已访问的元素在迭代时被删除了,之后的元素将被跳过</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> numberArr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">numberArr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value,index,array</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(index === <span class="number">0</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">delete</span> numberArr[<span class="number">2</span>]; <span class="comment">//删除第三项</span></span><br><span class="line">    <span class="comment">//或者numberArr.pop()</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(value,index,array)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印信息如下：</span></span><br><span class="line"><span class="comment">// 1 0 (3) [1, 2, empty]</span></span><br><span class="line"><span class="comment">// 2 1 (3) [1, 2, empty]</span></span><br><span class="line"><span class="keyword">let</span> numberArr1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line">numberArr1.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value,index,array</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(index === <span class="number">1</span>) &#123;</span><br><span class="line">    numberArr1.shift() <span class="comment">//遍历到第二项的时候，删除第一项</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(value,index,array)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印信息如下,遍历到第二项的时候，删除第一项，会跳过第三项</span></span><br><span class="line"><span class="comment">// 1 0 (4) [1, 2, 3, 4]</span></span><br><span class="line"><span class="comment">// 2 1 (3) [2, 3, 4]</span></span><br><span class="line"><span class="comment">// 4 2 (3) [2, 3, 4]</span></span><br><span class="line"><span class="comment">// 3、forEach 遍历的范围在第一次调用 callback 前就会确定。调用forEach 后添加到数组中的项不会被 callback 访问到。如果已经存在的值被改变，则传递给 callback 的值是 forEach 遍历到他们那一刻的值。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params">value,index,array</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(index === <span class="number">0</span>) &#123;</span><br><span class="line">        arr.push(<span class="string">'新增的不会被遍历到'</span>)</span><br><span class="line">        arr[<span class="number">2</span>] = <span class="number">4</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(value,index,array)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1 0 (4) [1, 2, 4, "新增的不会被遍历到"]</span></span><br><span class="line"><span class="comment">// 2 1 (4) [1, 2, 4, "新增的不会被遍历到"]</span></span><br><span class="line"><span class="comment">// 4 2 (4) [1, 2, 4, "新增的不会被遍历到"]</span></span><br><span class="line"><span class="comment">// 4、使用thisArg参数 和 箭头函数使用thisArg</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">arr</span>: <span class="string">'thisArg'</span>&#125;</span><br><span class="line"></span><br><span class="line">arr.forEach(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.arr)</span><br><span class="line">&#125;,obj)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印三次 'thisArg'</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> obj = &#123;<span class="attr">arr</span>: <span class="string">'thisArg'</span>&#125;</span><br><span class="line">arr.forEach(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.arr)</span><br><span class="line">&#125;,obj)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 打印三次 undefined</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 5、forEach无法中途退出循环，只能用return退出本次回调，进行下一次回调</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = arr.forEach(<span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span>(value == <span class="number">2</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">console</span>.log(value)</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result) <span class="comment">// undefined ，即使中间return vlaue，也还是undefined</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印value的值如下，说明return 并不能终止循环</span></span><br><span class="line"><span class="comment">// 1</span></span><br><span class="line"><span class="comment">// 3</span></span><br></pre></td></tr></table></figure><h4 id="4-2-map"><a href="#4-2-map" class="headerlink" title="4.2 map()"></a>4.2 map()</h4><blockquote><p>方法创建一个新数组，其结果是该数组中的每个元素都调用一个callback函数后返回的结果</p></blockquote><ul><li>返回值： 一个新数组，每个元素都是回调函数的结果</li><li>不要用 <code>map</code> 代替 <code>forEach</code>,<code>map</code> 会创建一个新的数组，占用内存。如果你不用 <code>map</code> 的返回值，那你就应当使用 <code>forEach</code></li></ul><h4 id="4-3-filter"><a href="#4-3-filter" class="headerlink" title="4.3 filter()"></a>4.3 filter()</h4><ul><li>方法返回的数组元素是调用的数组的一个子集。传入的函数时用来逻辑判定的，该函数返回 true 或 false,如果返回值为true或能转化为true的值，那么传递给判断函数的元素就是这个子集的成员，它将被添加倒一个作为返回值的数组中</li><li>返回值： 一个新的通过测试的元素的集合的数组，如果没有通过测试则返回空数组</li></ul><h4 id="4-4-every"><a href="#4-4-every" class="headerlink" title="4.4 every()"></a>4.4 every()</h4><blockquote><p>方法测试数组的所有元素是否都通过了指定函数的测试。当且仅当针对数组中的所有元素调用判定函数都返回true，它才返回true。</p></blockquote><ul><li>空数组上调用every方法，返回 true，因为空数组没有元素，所以空数组中所有元素都符合给定的条件</li><li>返回值： 一个布尔值，当所有的元素都符合条件才返回true，否则返回false</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">12</span>,<span class="number">34</span>,<span class="number">5</span>,<span class="number">23</span>,<span class="number">44</span>];</span><br><span class="line"><span class="keyword">let</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> result = arr.every(<span class="function"><span class="keyword">function</span> (<span class="params">element, index, array</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    num++;</span><br><span class="line">    <span class="keyword">return</span> element &gt; <span class="number">10</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result,num) <span class="comment">// 打印 false 3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 可见发现5这个小于10的元素后，遍历立即终止，num为3</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">12</span>,<span class="number">34</span>,,<span class="number">23</span>,<span class="number">44</span>];</span><br><span class="line"><span class="keyword">let</span> num = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">let</span> result = arr.every(<span class="function"><span class="keyword">function</span> (<span class="params">element, index, array</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">num++;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> element &gt; <span class="number">10</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result,num) <span class="comment">// 打印 true 4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 不会遍历没有赋值的索引位置，所以num为4</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = [].every(<span class="function"><span class="keyword">function</span> (<span class="params">element, index, array</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> element &gt; <span class="number">10</span>;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result) <span class="comment">// 打印 true</span></span><br></pre></td></tr></table></figure><h4 id="4-5-some"><a href="#4-5-some" class="headerlink" title="4.5 some()"></a>4.5 some()</h4><blockquote><p>方法测试数组中的某些元素是否通过由提供的函数实现的测试。当数组中至少有一个元素调用判定函数返回true，它就返回true，当且仅当数组中的所有元素调用判定函数都返回false，它才返回false</p></blockquote><ul><li>空数组调用some，返回false</li><li>返回值： 只要数组中的任意一个元素在回调函数中返回的是真值，就返回true，否则为false</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 一个简单的例子说明</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isBiggerThan10</span>(<span class="params">element, index, array</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(index)</span><br><span class="line">    <span class="keyword">return</span> element &gt; <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[<span class="number">2</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">4</span>].some(isBiggerThan10); <span class="comment">// 返回值是false，打印的index是0,1,2,3,4</span></span><br><span class="line"></span><br><span class="line">[<span class="number">12</span>, <span class="number">5</span>, <span class="number">8</span>, <span class="number">1</span>, <span class="number">4</span>].some(isBiggerThan10); <span class="comment">// 返回值是true，打印的index是0，找到符合元素之后立即返回</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 实现一个跟includes方法类似的功能</span></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">include</span>(<span class="params">value</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> arr.some(<span class="function">(<span class="params">element</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> element === value</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">include(<span class="number">2</span>) <span class="comment">// true</span></span><br><span class="line">include(<span class="number">4</span>) <span class="comment">// false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = [].some(<span class="function"><span class="keyword">function</span> (<span class="params">element, index, array</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> element &gt; <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(result) <span class="comment">// 打印 false</span></span><br></pre></td></tr></table></figure><h4 id="4-6-reduce-和-reduceRight"><a href="#4-6-reduce-和-reduceRight" class="headerlink" title="4.6 reduce() 和 reduceRight()"></a>4.6 reduce() 和 reduceRight()</h4><blockquote><p>这两个方法使用指定的函数将数组元素进行组合，生成单个值。这在函数式编程中是常见的操作，也可以称为“注入”和“折叠”。reduceRight() 和 reduce() 工作原理是一样的，不同的是reduceRight() 按照数组索引从高到低（从右到左）处理数组，而不是从低到高</p></blockquote><ul><li>如果数组为空且没有提供initialValue，会抛出TypeError 。如果数组仅有一个元素（无论位置如何）并且没有提供initialValue， 或者有提供initialValue但是数组为空，那么此唯一值将被返回并且callback不会被执行</li><li>返回值： 函数累计处理的结果</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sum = arr.reduce(<span class="function">(<span class="params">x,y</span>) =&gt;</span> x + y,<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sum) <span class="comment">// 15</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 看一下initialValue传和不传的区别</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>];</span><br><span class="line"></span><br><span class="line">arr.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">accumulator,currentValue,currentIndex,arr</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(currentIndex)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> accumulator + currentValue;</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 1,2,3,4,5 没传入initialValue，索引是从1开始</span></span><br><span class="line"></span><br><span class="line">arr.reduce(<span class="function"><span class="keyword">function</span> (<span class="params">accumulator,currentValue,currentIndex,arr</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">console</span>.log(currentIndex)</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> accumulator + currentValue;</span><br><span class="line">&#125;,<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 0,1,2,3,4,5 传入initialValue，索引从0开始</span></span><br><span class="line"><span class="comment">// 应用到二维数组展开</span></span><br><span class="line"><span class="keyword">let</span> arr = [[<span class="number">0</span>, <span class="number">1</span>], [<span class="number">2</span>, <span class="number">3</span>], [<span class="number">4</span>, <span class="number">5</span>]].reduce(</span><br><span class="line">    (a, b) =&gt; a.concat(b)</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(arr)</span><br><span class="line"><span class="comment">// [0, 1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure><h4 id="4-7-indexof"><a href="#4-7-indexof" class="headerlink" title="4.7  indexof()"></a>4.7  indexof()</h4><blockquote><p>方法返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回-1</p></blockquote><ul><li>注意： <code>indexOf</code> 使用严格相等（即 <code>===</code>）比较 <code>searchElement</code> 和数组中的元素。而且<code>indexOf()</code>不能识别 <code>NaN</code></li><li>返回值： 首个被找到的元素在数组中的索引位置; 若没有找到则返回 -1</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> array = [<span class="number">2</span>, <span class="number">5</span>, <span class="number">9</span>];</span><br><span class="line">array.indexOf(<span class="number">2</span>) <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">array.indexOf(<span class="number">7</span>) <span class="comment">// -1</span></span><br><span class="line">array.indexOf(<span class="number">9</span>, <span class="number">2</span>) <span class="comment">// 2</span></span><br><span class="line"></span><br><span class="line">array.indexOf(<span class="number">9</span>, <span class="number">3</span>) <span class="comment">// -1</span></span><br><span class="line"></span><br><span class="line">array.indexOf(<span class="number">2</span>, <span class="number">-1</span>) <span class="comment">// -1</span></span><br><span class="line"></span><br><span class="line">array.indexOf(<span class="number">2</span>, <span class="number">-3</span>) <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line">array.indexOf(<span class="number">2</span>, <span class="number">-4</span>) <span class="comment">// 0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> array1 = [<span class="number">1</span>,<span class="number">2</span>,<span class="literal">NaN</span>];</span><br><span class="line"></span><br><span class="line">array1.indexOf(<span class="literal">NaN</span>) <span class="comment">// -1</span></span><br></pre></td></tr></table></figure><h4 id="4-8-includes"><a href="#4-8-includes" class="headerlink" title="4.8 includes()"></a>4.8 includes()</h4><blockquote><p>方法用来判断一个数组是否包含一个指定的值，根据情况，如果包含则返回 true，否则返回false。 ES7新增</p></blockquote><ul><li>返回值： 一个布尔值，根据情况，如果包含则返回 true，否则返回false</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">2</span>); <span class="comment">// true</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">4</span>); <span class="comment">// false</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">3</span>, <span class="number">3</span>); <span class="comment">// false</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">3</span>, <span class="number">-1</span>); <span class="comment">// true</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>].includes(<span class="number">3</span>, <span class="number">-4</span>); <span class="comment">// true</span></span><br><span class="line">[<span class="number">1</span>, <span class="number">2</span>, <span class="literal">NaN</span>].includes(<span class="literal">NaN</span>); <span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="4-9-find-和-findIndex"><a href="#4-9-find-和-findIndex" class="headerlink" title="4.9 find() 和 findIndex()"></a>4.9 find() 和 findIndex()</h4><blockquote><p>find 方法返回数组中满足提供的测试函数的第一个元素的值。否则返回 undefined。findIndex 方法返回数组中满足提供的测试函数的第一个元素的索引。否则返回-1</p></blockquote><ul><li><code>find</code> 方法，当某个元素通过 callback 的测试时，返回数组中的一个值，否则返回 undefined。</li><li><code>findIndex</code>方法，返回数组中满足提供的测试函数的第一个元素的索引。否则返回-1</li></ul><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// find</span></span><br><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">-5</span>, <span class="number">10</span>].find(<span class="function">(<span class="params">n</span>) =&gt;</span> n &lt; <span class="number">0</span>); <span class="comment">// 返回元素-5</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> b = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">-5</span>, <span class="number">10</span>,<span class="literal">NaN</span>].find(<span class="function">(<span class="params">n</span>) =&gt;</span> <span class="built_in">Object</span>.is(<span class="literal">NaN</span>, n)); <span class="comment">// 返回元素NaN</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// findIndex</span></span><br><span class="line"><span class="keyword">let</span> a = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">-5</span>, <span class="number">10</span>].findIndex(<span class="function">(<span class="params">n</span>) =&gt;</span> n &lt; <span class="number">0</span>); <span class="comment">// 返回索引2</span></span><br><span class="line"><span class="keyword">let</span> b = [<span class="number">1</span>, <span class="number">4</span>, <span class="number">-5</span>, <span class="number">10</span>,<span class="literal">NaN</span>].findIndex(<span class="function">(<span class="params">n</span>) =&gt;</span> <span class="built_in">isNaN</span>(n)); <span class="comment">// 返回索引4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 稀疏数组</span></span><br><span class="line"><span class="keyword">let</span> a =[<span class="number">1</span>,,<span class="number">3</span>,<span class="number">4</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> index = <span class="number">0</span>;</span><br><span class="line">a.find(<span class="function">(<span class="params">n</span>) =&gt;</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="built_in">console</span>.log(index++) <span class="comment">//0,1,2 第二次是empty也会调用一次，而且返回为true，立即退出</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> n === <span class="number">3</span>;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h4 id="4-10-其他"><a href="#4-10-其他" class="headerlink" title="4.10 其他"></a>4.10 其他</h4><ul><li><code>keys()</code>方法返回一个新的Array迭代器，它包含数组中每个索引的键</li><li><code>values()</code> 方法返回一个新的Array迭代器，它包含数组中每个索引的值</li><li><code>entries()</code>方法返回一个新的Array迭代器，该对象包含数组中每个索引的键/值对</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一、数组预览图&quot;&gt;&lt;a href=&quot;#一、数组预览图&quot; class=&quot;headerlink&quot; title=&quot;一、数组预览图&quot;&gt;&lt;/a&gt;一、数组预览图&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_
      
    
    </summary>
    
      <category term="Front-End" scheme="http://blog.poetries.top/categories/Front-End/"/>
    
    
      <category term="JavaScript" scheme="http://blog.poetries.top/tags/JavaScript/"/>
    
  </entry>
  
</feed>
